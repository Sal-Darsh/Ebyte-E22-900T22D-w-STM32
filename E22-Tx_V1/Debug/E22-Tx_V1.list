
E22-Tx_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006814  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080069e4  080069e4  000079e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ad8  08006ad8  0000806c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006ad8  08006ad8  00007ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ae0  08006ae0  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ae0  08006ae0  00007ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ae4  08006ae4  00007ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006ae8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  2000006c  08006b54  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014e4  08006b54  000084e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104e7  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed8  00000000  00000000  00018583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0001b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a48  00000000  00000000  0001c208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002483f  00000000  00000000  0001cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001351b  00000000  00000000  0004148f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d31ee  00000000  00000000  000549aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127b98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000403c  00000000  00000000  00127bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012bc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080069cc 	.word	0x080069cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080069cc 	.word	0x080069cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000600:	1c59      	adds	r1, r3, #1
 8000602:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <circ_buffer_enqueue+0x90>)
 8000604:	fb83 2301 	smull	r2, r3, r3, r1
 8000608:	105a      	asrs	r2, r3, #1
 800060a:	17cb      	asrs	r3, r1, #31
 800060c:	1ad2      	subs	r2, r2, r3
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	1aca      	subs	r2, r1, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 800061c:	429a      	cmp	r2, r3
 800061e:	d029      	beq.n	8000674 <circ_buffer_enqueue+0x88>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000626:	461a      	mov	r2, r3
 8000628:	23f5      	movs	r3, #245	@ 0xf5
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4413      	add	r3, r2
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	4618      	mov	r0, r3
 8000638:	f005 fb0b 	bl	8005c52 <memcpy>
	cb->elementSizes[cb->end] = size;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <circ_buffer_enqueue+0x90>)
 8000658:	fb83 1302 	smull	r1, r3, r3, r2
 800065c:	1059      	asrs	r1, r3, #1
 800065e:	17d3      	asrs	r3, r2, #31
 8000660:	1ac9      	subs	r1, r1, r3
 8000662:	460b      	mov	r3, r1
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	1ad1      	subs	r1, r2, r3
 800066a:	b2ca      	uxtb	r2, r1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f883 24ca 	strb.w	r2, [r3, #1226]	@ 0x4ca
 8000672:	e000      	b.n	8000676 <circ_buffer_enqueue+0x8a>
		return;
 8000674:	bf00      	nop
}
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	66666667 	.word	0x66666667

08000680 <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 8000690:	461a      	mov	r2, r3
 8000692:	23f5      	movs	r3, #245	@ 0xf5
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
	if (size)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d009      	beq.n	80006b8 <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	f893 24cb 	ldrb.w	r2, [r3, #1227]	@ 0x4cb
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <circ_buffer_dequeue+0x6c>)
 80006c2:	fb83 1302 	smull	r1, r3, r3, r2
 80006c6:	1059      	asrs	r1, r3, #1
 80006c8:	17d3      	asrs	r3, r2, #31
 80006ca:	1ac9      	subs	r1, r1, r3
 80006cc:	460b      	mov	r3, r1
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	440b      	add	r3, r1
 80006d2:	1ad1      	subs	r1, r2, r3
 80006d4:	b2ca      	uxtb	r2, r1
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f883 24c9 	strb.w	r2, [r3, #1225]	@ 0x4c9
	return element;
 80006dc:	68fb      	ldr	r3, [r7, #12]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	66666667 	.word	0x66666667

080006f0 <circ_buffer_getNextSize>:
 * @param 	cb		: 	Pointer to the circular buffer
 *
 * @return 	Number	: 	of arrays in the buffer
 */
uint8_t circ_buffer_getNextSize(circ_buffer_t *cb)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if (cb->start == cb->end)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f893 24c9 	ldrb.w	r2, [r3, #1225]	@ 0x4c9
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000704:	429a      	cmp	r2, r3
 8000706:	d101      	bne.n	800070c <circ_buffer_getNextSize+0x1c>
	{
		return 0;
 8000708:	2300      	movs	r3, #0
 800070a:	e007      	b.n	800071c <circ_buffer_getNextSize+0x2c>
	}
	else
	{
		return cb->elementSizes[cb->start];
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 8000712:	461a      	mov	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
	}
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	@ (8000774 <MX_DMA_Init+0x4c>)
 8000738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_DMA_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2010      	movs	r0, #16
 8000750:	f001 f859 	bl	8001806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000754:	2010      	movs	r0, #16
 8000756:	f001 f872 	bl	800183e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2011      	movs	r0, #17
 8000760:	f001 f851 	bl	8001806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000764:	2011      	movs	r0, #17
 8000766:	f001 f86a 	bl	800183e <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <e22_lora_init>:
					void* transmissionFunc,
					void* receptionFunc,
					void* receptionCallbackFunc,
					void* configModeFunc,
					void* TransceiverModeFunc)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]
	hE22.huart 						= huart;
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <e22_lora_init+0x64>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6013      	str	r3, [r2, #0]
	hE22.loraTransmit 				= transmissionFunc;
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <e22_lora_init+0x64>)
 8000790:	6053      	str	r3, [r2, #4]
	hE22.loraStartReception 		= receptionFunc;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a11      	ldr	r2, [pc, #68]	@ (80007dc <e22_lora_init+0x64>)
 8000796:	6093      	str	r3, [r2, #8]
	hE22.loraReceive		 		= receptionCallbackFunc;
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <e22_lora_init+0x64>)
 800079c:	60d3      	str	r3, [r2, #12]
	hE22.loraConfigurationMode 		= configModeFunc;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <e22_lora_init+0x64>)
 80007a2:	6153      	str	r3, [r2, #20]
	hE22.loraTransceiverMode		= TransceiverModeFunc;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <e22_lora_init+0x64>)
 80007a8:	6113      	str	r3, [r2, #16]

	//Assign DMA buffer pointers.
	hE22.pRxDmaBuffer = rxDmaBuffer;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <e22_lora_init+0x64>)
 80007ac:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <e22_lora_init+0x68>)
 80007ae:	f8c3 2ab0 	str.w	r2, [r3, #2736]	@ 0xab0
	hE22.pTxDmaBuffer = txDmaBuffer;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <e22_lora_init+0x64>)
 80007b4:	4a0b      	ldr	r2, [pc, #44]	@ (80007e4 <e22_lora_init+0x6c>)
 80007b6:	f8c3 2ab4 	str.w	r2, [r3, #2740]	@ 0xab4
	//transceiver mode as default
	hE22.loraTransceiverMode();
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <e22_lora_init+0x64>)
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	4798      	blx	r3

	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <e22_lora_init+0x64>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <e22_lora_init+0x64>)
 80007c6:	6810      	ldr	r0, [r2, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <e22_lora_init+0x64>)
 80007ca:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	@ 0xab0
 80007ce:	22f0      	movs	r2, #240	@ 0xf0
 80007d0:	4798      	blx	r3
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000088 	.word	0x20000088
 80007e0:	20000b40 	.word	0x20000b40
 80007e4:	20000c30 	.word	0x20000c30

080007e8 <e22_lora_transnit>:
 *
 * @param channel	:	RF channel to send data over
 *
 */
void e22_lora_transnit(uint8_t *pData, uint16_t size, uint16_t address, uint8_t channel)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	4608      	mov	r0, r1
 80007f2:	4611      	mov	r1, r2
 80007f4:	461a      	mov	r2, r3
 80007f6:	4603      	mov	r3, r0
 80007f8:	817b      	strh	r3, [r7, #10]
 80007fa:	460b      	mov	r3, r1
 80007fc:	813b      	strh	r3, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
	const uint8_t overheadSize = 3;
 8000802:	2303      	movs	r3, #3
 8000804:	75fb      	strb	r3, [r7, #23]

	memset(&hE22.packet, 0, sizeof(e22_packet_t));
 8000806:	22f4      	movs	r2, #244	@ 0xf4
 8000808:	2100      	movs	r1, #0
 800080a:	4815      	ldr	r0, [pc, #84]	@ (8000860 <e22_lora_transnit+0x78>)
 800080c:	f005 f9a6 	bl	8005b5c <memset>
	//Address 2 bytes swap
	hE22.packet.address = (address >> 8) | (address << 8);
 8000810:	893b      	ldrh	r3, [r7, #8]
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	b29b      	uxth	r3, r3
 8000816:	b21a      	sxth	r2, r3
 8000818:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	b21b      	sxth	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <e22_lora_transnit+0x7c>)
 8000828:	831a      	strh	r2, [r3, #24]

	hE22.packet.chanel = channel;
 800082a:	4a0e      	ldr	r2, [pc, #56]	@ (8000864 <e22_lora_transnit+0x7c>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	7693      	strb	r3, [r2, #26]

	hE22.txPortReady = true;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <e22_lora_transnit+0x7c>)
 8000832:	2201      	movs	r2, #1
 8000834:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

	memcpy(&hE22.packet.dataBuffer, pData, size);
 8000838:	897b      	ldrh	r3, [r7, #10]
 800083a:	461a      	mov	r2, r3
 800083c:	68f9      	ldr	r1, [r7, #12]
 800083e:	480a      	ldr	r0, [pc, #40]	@ (8000868 <e22_lora_transnit+0x80>)
 8000840:	f005 fa07 	bl	8005c52 <memcpy>

	circ_buffer_enqueue(&hE22.txBuffer, (uint8_t*)&hE22.packet, size + overheadSize);
 8000844:	897b      	ldrh	r3, [r7, #10]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	4413      	add	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	4903      	ldr	r1, [pc, #12]	@ (8000860 <e22_lora_transnit+0x78>)
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <e22_lora_transnit+0x84>)
 8000854:	f7ff feca 	bl	80005ec <circ_buffer_enqueue>
}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000a0 	.word	0x200000a0
 8000864:	20000088 	.word	0x20000088
 8000868:	200000a3 	.word	0x200000a3
 800086c:	20000196 	.word	0x20000196

08000870 <e22_lora_manager>:
 * 			This function manages the E22 LoRa module by checking for packets in the TX circular buffer, dequeuing them, and transmitting
 * 			them via the E22 module.
 *
 */
void e22_lora_manager(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint8_t packetSize = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	70fb      	strb	r3, [r7, #3]
	uint8_t* pPacket = NULL;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
	//check for packet in TX circular buffer
	if(circ_buffer_getNextSize(&hE22.txBuffer))
 800087e:	481e      	ldr	r0, [pc, #120]	@ (80008f8 <e22_lora_manager+0x88>)
 8000880:	f7ff ff36 	bl	80006f0 <circ_buffer_getNextSize>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d01f      	beq.n	80008ca <e22_lora_manager+0x5a>
	{
//		uint8_t packetSize = 0;
//		uint8_t* pPacket = NULL;
		if(hE22.txPortReady)
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <e22_lora_manager+0x8c>)
 800088c:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8000890:	2b00      	cmp	r3, #0
 8000892:	d01a      	beq.n	80008ca <e22_lora_manager+0x5a>
		{
			hE22.txPortReady = false;
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <e22_lora_manager+0x8c>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
			// Dequeue packet from circular buffer
			pPacket = circ_buffer_dequeue(&hE22.txBuffer, &packetSize);
 800089c:	1cfb      	adds	r3, r7, #3
 800089e:	4619      	mov	r1, r3
 80008a0:	4815      	ldr	r0, [pc, #84]	@ (80008f8 <e22_lora_manager+0x88>)
 80008a2:	f7ff feed 	bl	8000680 <circ_buffer_dequeue>
 80008a6:	6078      	str	r0, [r7, #4]
			// Copy packet to DMA buffer
			memcpy(hE22.pTxDmaBuffer ,pPacket, packetSize);
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <e22_lora_manager+0x8c>)
 80008aa:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	@ 0xab4
 80008ae:	78fa      	ldrb	r2, [r7, #3]
 80008b0:	6879      	ldr	r1, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 f9cd 	bl	8005c52 <memcpy>
			// Transmit packet via the E22 module
			hE22.loraTransmit(hE22.huart, hE22.pTxDmaBuffer, packetSize);
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <e22_lora_manager+0x8c>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <e22_lora_manager+0x8c>)
 80008be:	6810      	ldr	r0, [r2, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <e22_lora_manager+0x8c>)
 80008c2:	f8d2 1ab4 	ldr.w	r1, [r2, #2740]	@ 0xab4
 80008c6:	78fa      	ldrb	r2, [r7, #3]
 80008c8:	4798      	blx	r3
		}
	}
	//check for packet in RX circular buffer
	if(circ_buffer_getNextSize(&hE22.rxBuffer))
 80008ca:	480d      	ldr	r0, [pc, #52]	@ (8000900 <e22_lora_manager+0x90>)
 80008cc:	f7ff ff10 	bl	80006f0 <circ_buffer_getNextSize>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <e22_lora_manager+0x7e>
	{
		pPacket = circ_buffer_dequeue(&hE22.rxBuffer, &packetSize);
 80008d6:	1cfb      	adds	r3, r7, #3
 80008d8:	4619      	mov	r1, r3
 80008da:	4809      	ldr	r0, [pc, #36]	@ (8000900 <e22_lora_manager+0x90>)
 80008dc:	f7ff fed0 	bl	8000680 <circ_buffer_dequeue>
 80008e0:	6078      	str	r0, [r7, #4]
		hE22.loraReceive(pPacket, packetSize);
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <e22_lora_manager+0x8c>)
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	78fa      	ldrb	r2, [r7, #3]
 80008e8:	4611      	mov	r1, r2
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	4798      	blx	r3
	}
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000196 	.word	0x20000196
 80008fc:	20000088 	.word	0x20000088
 8000900:	20000666 	.word	0x20000666

08000904 <e22_lora_make_ready>:
/**
 * @brief 	Make transmission line status ready at TX complete callback
 *
 */
void e22_lora_make_ready(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	hE22.txPortReady = true;
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <e22_lora_make_ready+0x18>)
 800090a:	2201      	movs	r2, #1
 800090c:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000088 	.word	0x20000088

08000920 <e22_lora_reception_complete>:
/**
 * @brief 	this function should be called at the UART RX complete callback.
 *
 */
void e22_lora_reception_complete(uint8_t size)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	circ_buffer_enqueue(&hE22.rxBuffer, (uint8_t*)hE22.pRxDmaBuffer, size);
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <e22_lora_reception_complete+0x34>)
 800092c:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	@ 0xab0
 8000930:	79fa      	ldrb	r2, [r7, #7]
 8000932:	4619      	mov	r1, r3
 8000934:	4808      	ldr	r0, [pc, #32]	@ (8000958 <e22_lora_reception_complete+0x38>)
 8000936:	f7ff fe59 	bl	80005ec <circ_buffer_enqueue>
	//Activate UART reception again
	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <e22_lora_reception_complete+0x34>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <e22_lora_reception_complete+0x34>)
 8000940:	6810      	ldr	r0, [r2, #0]
 8000942:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <e22_lora_reception_complete+0x34>)
 8000944:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	@ 0xab0
 8000948:	22f0      	movs	r2, #240	@ 0xf0
 800094a:	4798      	blx	r3
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000088 	.word	0x20000088
 8000958:	20000666 	.word	0x20000666

0800095c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	@ 0x30
 8000960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b55      	ldr	r3, [pc, #340]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a54      	ldr	r2, [pc, #336]	@ (8000acc <MX_GPIO_Init+0x170>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b52      	ldr	r3, [pc, #328]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b4e      	ldr	r3, [pc, #312]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a4d      	ldr	r2, [pc, #308]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b4b      	ldr	r3, [pc, #300]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b47      	ldr	r3, [pc, #284]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a46      	ldr	r2, [pc, #280]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b44      	ldr	r3, [pc, #272]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b40      	ldr	r3, [pc, #256]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a3f      	ldr	r2, [pc, #252]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b3d      	ldr	r3, [pc, #244]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b39      	ldr	r3, [pc, #228]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a38      	ldr	r2, [pc, #224]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b36      	ldr	r3, [pc, #216]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b32      	ldr	r3, [pc, #200]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a31      	ldr	r2, [pc, #196]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a20:	482b      	ldr	r0, [pc, #172]	@ (8000ad0 <MX_GPIO_Init+0x174>)
 8000a22:	f001 fcbd 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2140      	movs	r1, #64	@ 0x40
 8000a2a:	482a      	ldr	r0, [pc, #168]	@ (8000ad4 <MX_GPIO_Init+0x178>)
 8000a2c:	f001 fcb8 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2118      	movs	r1, #24
 8000a34:	4828      	ldr	r0, [pc, #160]	@ (8000ad8 <MX_GPIO_Init+0x17c>)
 8000a36:	f001 fcb3 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4822      	ldr	r0, [pc, #136]	@ (8000adc <MX_GPIO_Init+0x180>)
 8000a52:	f001 fb11 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a56:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <MX_GPIO_Init+0x174>)
 8000a70:	f001 fb02 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a74:	2340      	movs	r3, #64	@ 0x40
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <MX_GPIO_Init+0x178>)
 8000a8c:	f001 faf4 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <MX_GPIO_Init+0x178>)
 8000aa4:	f001 fae8 	bl	8002078 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 8000aa8:	2318      	movs	r3, #24
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_GPIO_Init+0x17c>)
 8000ac0:	f001 fada 	bl	8002078 <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	@ 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40020800 	.word	0x40020800

08000ae0 <_write>:
#include <stdbool.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *ptr, int len) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	for (int idx = 0; idx < len; idx++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e00f      	b.n	8000b12 <_write+0x32>
			while(!(USART3 -> SR & USART_SR_TXE));
 8000af2:	bf00      	nop
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <_write+0x48>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0f9      	beq.n	8000af4 <_write+0x14>
			USART3->DR = (uint8_t)ptr[idx];
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4413      	add	r3, r2
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <_write+0x48>)
 8000b0a:	605a      	str	r2, [r3, #4]
	for (int idx = 0; idx < len; idx++) {
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dbeb      	blt.n	8000af2 <_write+0x12>
	}
	return len;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	371c      	adds	r7, #28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40004800 	.word	0x40004800

08000b2c <get_timestamp_string>:

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void get_timestamp_string(char *timestamp_str, uint32_t max_len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  // Get current time and date from RTC
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b36:	2200      	movs	r2, #0
 8000b38:	490e      	ldr	r1, [pc, #56]	@ (8000b74 <get_timestamp_string+0x48>)
 8000b3a:	480f      	ldr	r0, [pc, #60]	@ (8000b78 <get_timestamp_string+0x4c>)
 8000b3c:	f002 ff31 	bl	80039a2 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This is necessary after HAL_RTC_GetTime
 8000b40:	2200      	movs	r2, #0
 8000b42:	490e      	ldr	r1, [pc, #56]	@ (8000b7c <get_timestamp_string+0x50>)
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <get_timestamp_string+0x4c>)
 8000b46:	f002 ff8a 	bl	8003a5e <HAL_RTC_GetDate>

  // Format the timestamp string as "YYYY-MM-DD HH:MM:SS"
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <get_timestamp_string+0x48>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000b4e:	4619      	mov	r1, r3
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <get_timestamp_string+0x48>)
 8000b52:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000b54:	461a      	mov	r2, r3
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <get_timestamp_string+0x48>)
 8000b58:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	9200      	str	r2, [sp, #0]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <get_timestamp_string+0x54>)
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f004 fec9 	bl	80058fc <sniprintf>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000d20 	.word	0x20000d20
 8000b78:	20000d3c 	.word	0x20000d3c
 8000b7c:	20000d34 	.word	0x20000d34
 8000b80:	080069e4 	.word	0x080069e4

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b096      	sub	sp, #88	@ 0x58
 8000b88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 fccb 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f86f 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f7ff fee3 	bl	800095c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b96:	f7ff fdc7 	bl	8000728 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b9a:	f000 fae7 	bl	800116c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b9e:	f000 fbf9 	bl	8001394 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 fab9 	bl	8001118 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ba6:	f000 f957 	bl	8000e58 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//initialize
  printf("--- LoRa Transmitter Initialized ---\r\n");
 8000baa:	4826      	ldr	r0, [pc, #152]	@ (8000c44 <main+0xc0>)
 8000bac:	f004 fe9e 	bl	80058ec <puts>

    // Initialize the E22 LoRa module driver
  e22_lora_init(&huart2,
 8000bb0:	4b25      	ldr	r3, [pc, #148]	@ (8000c48 <main+0xc4>)
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	4b25      	ldr	r3, [pc, #148]	@ (8000c4c <main+0xc8>)
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <main+0xcc>)
 8000bba:	4a26      	ldr	r2, [pc, #152]	@ (8000c54 <main+0xd0>)
 8000bbc:	4926      	ldr	r1, [pc, #152]	@ (8000c58 <main+0xd4>)
 8000bbe:	4827      	ldr	r0, [pc, #156]	@ (8000c5c <main+0xd8>)
 8000bc0:	f7ff fdda 	bl	8000778 <e22_lora_init>
                  HAL_UART_Transmit_DMA,
                  HAL_UARTEx_ReceiveToIdle_DMA,
                  main_lora_packet_receive,
                  main_e22_configurationMode,
                  main_e22_transceiverMode);
  int tx_packet_count = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  e22_lora_manager();
 8000bc8:	f7ff fe52 	bl	8000870 <e22_lora_manager>

	  	  static uint32_t last_tx_time = 0;
	  	  if(ack_received && (HAL_GetTick() - last_tx_time > 100))
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <main+0xdc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f8      	beq.n	8000bc8 <main+0x44>
 8000bd6:	f000 fd0b 	bl	80015f0 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <main+0xe0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b64      	cmp	r3, #100	@ 0x64
 8000be4:	d9f0      	bls.n	8000bc8 <main+0x44>
	  	  {
	  		  ack_received = false; // Enter "waiting for reply" state
 8000be6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <main+0xdc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
	  		  tx_packet_count++;
 8000bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000bee:	3301      	adds	r3, #1
 8000bf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  		  char timestamp[10];
	  		  get_timestamp_string(timestamp, sizeof(timestamp));
 8000bf2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bf6:	210a      	movs	r1, #10
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff97 	bl	8000b2c <get_timestamp_string>
	  		  char packet_to_send[60];
	  		  sprintf(packet_to_send, "Hello from Transmitter! %d", tx_packet_count);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c02:	4919      	ldr	r1, [pc, #100]	@ (8000c68 <main+0xe4>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 feaf 	bl	8005968 <siprintf>
	  		  uint8_t packetSize = strlen(packet_to_send);
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff faff 	bl	8000210 <strlen>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

	  		  printf("Sending: \"%s\" at %-8s \r\n", packet_to_send, timestamp);
 8000c18:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4812      	ldr	r0, [pc, #72]	@ (8000c6c <main+0xe8>)
 8000c22:	f004 fdfb 	bl	800581c <iprintf>

	  		  e22_lora_transnit((uint8_t*)packet_to_send, packetSize, 0x01, 0x12);
 8000c26:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c2a:	b299      	uxth	r1, r3
 8000c2c:	1d38      	adds	r0, r7, #4
 8000c2e:	2312      	movs	r3, #18
 8000c30:	2201      	movs	r2, #1
 8000c32:	f7ff fdd9 	bl	80007e8 <e22_lora_transnit>

	  		  last_tx_time = HAL_GetTick();
 8000c36:	f000 fcdb 	bl	80015f0 <HAL_GetTick>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a09      	ldr	r2, [pc, #36]	@ (8000c64 <main+0xe0>)
 8000c3e:	6013      	str	r3, [r2, #0]
  {
 8000c40:	e7c2      	b.n	8000bc8 <main+0x44>
 8000c42:	bf00      	nop
 8000c44:	080069f4 	.word	0x080069f4
 8000c48:	08000dad 	.word	0x08000dad
 8000c4c:	08000dc5 	.word	0x08000dc5
 8000c50:	08000de5 	.word	0x08000de5
 8000c54:	08003dd5 	.word	0x08003dd5
 8000c58:	08003cdd 	.word	0x08003cdd
 8000c5c:	20000d60 	.word	0x20000d60
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000d38 	.word	0x20000d38
 8000c68:	08006a1c 	.word	0x08006a1c
 8000c6c:	08006a38 	.word	0x08006a38

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b094      	sub	sp, #80	@ 0x50
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2234      	movs	r2, #52	@ 0x34
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 ff6c 	bl	8005b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	4b2b      	ldr	r3, [pc, #172]	@ (8000d48 <SystemClock_Config+0xd8>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8000d48 <SystemClock_Config+0xd8>)
 8000c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca4:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <SystemClock_Config+0xd8>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <SystemClock_Config+0xdc>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a24      	ldr	r2, [pc, #144]	@ (8000d4c <SystemClock_Config+0xdc>)
 8000cba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cbe:	6013      	str	r3, [r2, #0]
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <SystemClock_Config+0xdc>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000ccc:	2309      	movs	r3, #9
 8000cce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cd0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cd4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cec:	23a8      	movs	r3, #168	@ 0xa8
 8000cee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4618      	mov	r0, r3
 8000d02:	f002 fb2f 	bl	8003364 <HAL_RCC_OscConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000d0c:	f000 f89e 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d10:	230f      	movs	r3, #15
 8000d12:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d14:	2302      	movs	r3, #2
 8000d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d26:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	2105      	movs	r1, #5
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f001 fca4 	bl	800267c <HAL_RCC_ClockConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000d3a:	f000 f887 	bl	8000e4c <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	@ 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// This callback is fired when a UART transmission is complete.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
    // Check if the callback is from the LoRa module's UART (USART2)
    if(huart->Instance == USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a06      	ldr	r2, [pc, #24]	@ (8000d78 <HAL_UART_TxCpltCallback+0x28>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d105      	bne.n	8000d6e <HAL_UART_TxCpltCallback+0x1e>
    {
        // Print confirmation to the serial monitor.
//        printf("TX CONFIRMED: Packet Sent!\r\n");
        // Toggle the green LED (LD2) for visual confirmation.
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d62:	2180      	movs	r1, #128	@ 0x80
 8000d64:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_UART_TxCpltCallback+0x2c>)
 8000d66:	f001 fb34 	bl	80023d2 <HAL_GPIO_TogglePin>
        // Signal the driver that the UART is ready for the next transmission.
        e22_lora_make_ready();
 8000d6a:	f7ff fdcb 	bl	8000904 <e22_lora_make_ready>
    }
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40020400 	.word	0x40020400

08000d80 <HAL_UARTEx_RxEventCallback>:

/**
 * @brief This callback is fired when new data is received. Not actively used on the transmitter.
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == USART2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <HAL_UARTEx_RxEventCallback+0x28>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d104      	bne.n	8000da0 <HAL_UARTEx_RxEventCallback+0x20>
    {
        // Although we are a transmitter, the hardware still listens.
        // We must call this to re-arm the reception for the next idle event.
        e22_lora_reception_complete(Size); //
 8000d96:	887b      	ldrh	r3, [r7, #2]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fdc0 	bl	8000920 <e22_lora_reception_complete>
    }
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004400 	.word	0x40004400

08000dac <main_e22_transceiverMode>:

/**
 * @brief Sets the LoRa module to its default transparent transmission mode.
 */
static void main_e22_transceiverMode(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2118      	movs	r1, #24
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <main_e22_transceiverMode+0x14>)
 8000db6:	f001 faf3 	bl	80023a0 <HAL_GPIO_WritePin>
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40020400 	.word	0x40020400

08000dc4 <main_e22_configurationMode>:

/**
 * @brief Sets the LoRa module to configuration mode.
 */
static void main_e22_configurationMode(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2108      	movs	r1, #8
 8000dcc:	4804      	ldr	r0, [pc, #16]	@ (8000de0 <main_e22_configurationMode+0x1c>)
 8000dce:	f001 fae7 	bl	80023a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2110      	movs	r1, #16
 8000dd6:	4802      	ldr	r0, [pc, #8]	@ (8000de0 <main_e22_configurationMode+0x1c>)
 8000dd8:	f001 fae2 	bl	80023a0 <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40020400 	.word	0x40020400

08000de4 <main_lora_packet_receive>:

/**
 * @brief Handles received packets. This is a stub on the transmitter.
 */
static void main_lora_packet_receive(uint8_t* dataPacket, uint8_t size)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b0c0      	sub	sp, #256	@ 0x100
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	460b      	mov	r3, r1
 8000dee:	70fb      	strb	r3, [r7, #3]
	uint8_t loraPacket[MAX_DATA_PACKET_SIZE + 1] = {0};
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	22f1      	movs	r2, #241	@ 0xf1
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 feaf 	bl	8005b5c <memset>
		memcpy(loraPacket, dataPacket, size);
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	6879      	ldr	r1, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 ff23 	bl	8005c52 <memcpy>
		loraPacket[size] = '\0';
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000e12:	443b      	add	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	f803 2cf4 	strb.w	r2, [r3, #-244]

	    // Print the received message (which is the ACK/command)
		printf("REPLY RECEIVED: \"%s\". Ready for next packet.\r\n", loraPacket);
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4807      	ldr	r0, [pc, #28]	@ (8000e40 <main_lora_packet_receive+0x5c>)
 8000e22:	f004 fcfb 	bl	800581c <iprintf>
        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000e26:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e2a:	4806      	ldr	r0, [pc, #24]	@ (8000e44 <main_lora_packet_receive+0x60>)
 8000e2c:	f001 fad1 	bl	80023d2 <HAL_GPIO_TogglePin>

	    // Set the flag to true regardless of the content
		ack_received = true; // Unlock the transmitter
 8000e30:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <main_lora_packet_receive+0x64>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
}
 8000e36:	bf00      	nop
 8000e38:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	08006a54 	.word	0x08006a54
 8000e44:	40020400 	.word	0x40020400
 8000e48:	20000000 	.word	0x20000000

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <Error_Handler+0x8>

08000e58 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e9c <MX_RTC_Init+0x44>)
 8000e5e:	4a10      	ldr	r2, [pc, #64]	@ (8000ea0 <MX_RTC_Init+0x48>)
 8000e60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	@ (8000e9c <MX_RTC_Init+0x44>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <MX_RTC_Init+0x44>)
 8000e6a:	227f      	movs	r2, #127	@ 0x7f
 8000e6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000e9c <MX_RTC_Init+0x44>)
 8000e70:	22ff      	movs	r2, #255	@ 0xff
 8000e72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e74:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <MX_RTC_Init+0x44>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <MX_RTC_Init+0x44>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e80:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <MX_RTC_Init+0x44>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_RTC_Init+0x44>)
 8000e88:	f002 fd0a 	bl	80038a0 <HAL_RTC_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000e92:	f7ff ffdb 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000d3c 	.word	0x20000d3c
 8000ea0:	40002800 	.word	0x40002800

08000ea4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b09a      	sub	sp, #104	@ 0x68
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	225c      	movs	r2, #92	@ 0x5c
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f004 fe51 	bl	8005b5c <memset>
  if(rtcHandle->Instance==RTC)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <HAL_RTC_MspInit+0x4c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d111      	bne.n	8000ee8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ec4:	2320      	movs	r3, #32
 8000ec6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fcec 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000ede:	f7ff ffb5 	bl	8000e4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ee2:	4b04      	ldr	r3, [pc, #16]	@ (8000ef4 <HAL_RTC_MspInit+0x50>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3768      	adds	r7, #104	@ 0x68
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40002800 	.word	0x40002800
 8000ef4:	42470e3c 	.word	0x42470e3c

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	4a0f      	ldr	r2, [pc, #60]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_MspInit+0x4c>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <NMI_Handler+0x4>

08000f50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9e:	f000 fb13 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <DMA1_Stream5_IRQHandler+0x10>)
 8000fae:	f000 fdf9 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000df0 	.word	0x20000df0

08000fbc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DMA1_Stream6_IRQHandler+0x10>)
 8000fc2:	f000 fdef 	bl	8001ba4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000e50 	.word	0x20000e50

08000fd0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <USART2_IRQHandler+0x10>)
 8000fd6:	f002 ff57 	bl	8003e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000d60 	.word	0x20000d60

08000fe4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e00a      	b.n	800100c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff6:	f3af 8000 	nop.w
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	b2ca      	uxtb	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbf0      	blt.n	8000ff6 <_read+0x12>
  }

  return len;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_close>:
  }
  return len;
}

int _close(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001046:	605a      	str	r2, [r3, #4]
  return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <_isatty>:

int _isatty(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001090:	4a14      	ldr	r2, [pc, #80]	@ (80010e4 <_sbrk+0x5c>)
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <_sbrk+0x60>)
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800109c:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <_sbrk+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d102      	bne.n	80010aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <_sbrk+0x64>)
 80010a6:	4a12      	ldr	r2, [pc, #72]	@ (80010f0 <_sbrk+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010aa:	4b10      	ldr	r3, [pc, #64]	@ (80010ec <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d207      	bcs.n	80010c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010b8:	f004 fd9e 	bl	8005bf8 <__errno>
 80010bc:	4603      	mov	r3, r0
 80010be:	220c      	movs	r2, #12
 80010c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	e009      	b.n	80010dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <_sbrk+0x64>)
 80010d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010da:	68fb      	ldr	r3, [r7, #12]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20020000 	.word	0x20020000
 80010e8:	00000400 	.word	0x00000400
 80010ec:	20000d5c 	.word	0x20000d5c
 80010f0:	200014e8 	.word	0x200014e8

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <SystemInit+0x20>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fe:	4a05      	ldr	r2, [pc, #20]	@ (8001114 <SystemInit+0x20>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <MX_USART2_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_USART2_UART_Init+0x4c>)
 8001150:	f002 fd74 	bl	8003c3c <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800115a:	f7ff fe77 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000d60 	.word	0x20000d60
 8001168:	40004400 	.word	0x40004400

0800116c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001170:	4b11      	ldr	r3, [pc, #68]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 8001172:	4a12      	ldr	r2, [pc, #72]	@ (80011bc <MX_USART3_UART_Init+0x50>)
 8001174:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 8001178:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800117c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800117e:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001184:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001190:	4b09      	ldr	r3, [pc, #36]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 8001192:	220c      	movs	r2, #12
 8001194:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001196:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	@ (80011b8 <MX_USART3_UART_Init+0x4c>)
 80011a4:	f002 fd4a 	bl	8003c3c <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011ae:	f7ff fe4d 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000da8 	.word	0x20000da8
 80011bc:	40004800 	.word	0x40004800

080011c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	@ 0x30
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a65      	ldr	r2, [pc, #404]	@ (8001374 <HAL_UART_MspInit+0x1b4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	f040 8091 	bne.w	8001306 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	4b63      	ldr	r3, [pc, #396]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	4a62      	ldr	r2, [pc, #392]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 80011ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f4:	4b60      	ldr	r3, [pc, #384]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fc:	61bb      	str	r3, [r7, #24]
 80011fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	4b5c      	ldr	r3, [pc, #368]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 8001206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001208:	4a5b      	ldr	r2, [pc, #364]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001210:	4b59      	ldr	r3, [pc, #356]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800121c:	2360      	movs	r3, #96	@ 0x60
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	2303      	movs	r3, #3
 800122a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800122c:	2307      	movs	r3, #7
 800122e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4851      	ldr	r0, [pc, #324]	@ (800137c <HAL_UART_MspInit+0x1bc>)
 8001238:	f000 ff1e 	bl	8002078 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800123c:	4b50      	ldr	r3, [pc, #320]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 800123e:	4a51      	ldr	r2, [pc, #324]	@ (8001384 <HAL_UART_MspInit+0x1c4>)
 8001240:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001242:	4b4f      	ldr	r3, [pc, #316]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001244:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001248:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800124a:	4b4d      	ldr	r3, [pc, #308]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001250:	4b4b      	ldr	r3, [pc, #300]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001256:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001258:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800125c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800125e:	4b48      	ldr	r3, [pc, #288]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001264:	4b46      	ldr	r3, [pc, #280]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800126a:	4b45      	ldr	r3, [pc, #276]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001270:	4b43      	ldr	r3, [pc, #268]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001276:	4b42      	ldr	r3, [pc, #264]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800127c:	4840      	ldr	r0, [pc, #256]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 800127e:	f000 faf9 	bl	8001874 <HAL_DMA_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001288:	f7ff fde0 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a3c      	ldr	r2, [pc, #240]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001290:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001292:	4a3b      	ldr	r2, [pc, #236]	@ (8001380 <HAL_UART_MspInit+0x1c0>)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001298:	4b3b      	ldr	r3, [pc, #236]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 800129a:	4a3c      	ldr	r2, [pc, #240]	@ (800138c <HAL_UART_MspInit+0x1cc>)
 800129c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800129e:	4b3a      	ldr	r3, [pc, #232]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80012a4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012a6:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012a8:	2240      	movs	r2, #64	@ 0x40
 80012aa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ac:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b2:	4b35      	ldr	r3, [pc, #212]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012b8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ba:	4b33      	ldr	r3, [pc, #204]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c0:	4b31      	ldr	r3, [pc, #196]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80012c6:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80012d8:	482b      	ldr	r0, [pc, #172]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012da:	f000 facb 	bl	8001874 <HAL_DMA_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80012e4:	f7ff fdb2 	bl	8000e4c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a27      	ldr	r2, [pc, #156]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80012ee:	4a26      	ldr	r2, [pc, #152]	@ (8001388 <HAL_UART_MspInit+0x1c8>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2026      	movs	r0, #38	@ 0x26
 80012fa:	f000 fa84 	bl	8001806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012fe:	2026      	movs	r0, #38	@ 0x26
 8001300:	f000 fa9d 	bl	800183e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001304:	e031      	b.n	800136a <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART3)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <HAL_UART_MspInit+0x1d0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d12c      	bne.n	800136a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	4b18      	ldr	r3, [pc, #96]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	4a17      	ldr	r2, [pc, #92]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 800131a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800131e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001320:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b11      	ldr	r3, [pc, #68]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001334:	4a10      	ldr	r2, [pc, #64]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	6313      	str	r3, [r2, #48]	@ 0x30
 800133c:	4b0e      	ldr	r3, [pc, #56]	@ (8001378 <HAL_UART_MspInit+0x1b8>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001348:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800135a:	2307      	movs	r3, #7
 800135c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4805      	ldr	r0, [pc, #20]	@ (800137c <HAL_UART_MspInit+0x1bc>)
 8001366:	f000 fe87 	bl	8002078 <HAL_GPIO_Init>
}
 800136a:	bf00      	nop
 800136c:	3730      	adds	r7, #48	@ 0x30
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40004400 	.word	0x40004400
 8001378:	40023800 	.word	0x40023800
 800137c:	40020c00 	.word	0x40020c00
 8001380:	20000df0 	.word	0x20000df0
 8001384:	40026088 	.word	0x40026088
 8001388:	20000e50 	.word	0x20000e50
 800138c:	400260a0 	.word	0x400260a0
 8001390:	40004800 	.word	0x40004800

08001394 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800139e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a2:	2206      	movs	r2, #6
 80013a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a8:	2202      	movs	r2, #2
 80013aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b4:	2202      	movs	r2, #2
 80013b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013c4:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	@ (80013ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d8:	f001 f815 	bl	8002406 <HAL_PCD_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013e2:	f7ff fd33 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000eb0 	.word	0x20000eb0

080013f0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0a0      	sub	sp, #128	@ 0x80
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	225c      	movs	r2, #92	@ 0x5c
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f004 fba3 	bl	8005b5c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800141e:	d14e      	bne.n	80014be <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001420:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001424:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001426:	2300      	movs	r3, #0
 8001428:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f001 fa3e 	bl	80028b0 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800143a:	f7ff fd07 	bl	8000e4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <HAL_PCD_MspInit+0xd8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a20      	ldr	r2, [pc, #128]	@ (80014c8 <HAL_PCD_MspInit+0xd8>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b1e      	ldr	r3, [pc, #120]	@ (80014c8 <HAL_PCD_MspInit+0xd8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800145a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800145e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800146c:	230a      	movs	r3, #10
 800146e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001474:	4619      	mov	r1, r3
 8001476:	4815      	ldr	r0, [pc, #84]	@ (80014cc <HAL_PCD_MspInit+0xdc>)
 8001478:	f000 fdfe 	bl	8002078 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800147c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001480:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001482:	2300      	movs	r3, #0
 8001484:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800148e:	4619      	mov	r1, r3
 8001490:	480e      	ldr	r0, [pc, #56]	@ (80014cc <HAL_PCD_MspInit+0xdc>)
 8001492:	f000 fdf1 	bl	8002078 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001496:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <HAL_PCD_MspInit+0xd8>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800149a:	4a0b      	ldr	r2, [pc, #44]	@ (80014c8 <HAL_PCD_MspInit+0xd8>)
 800149c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014a0:	6353      	str	r3, [r2, #52]	@ 0x34
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_PCD_MspInit+0xd8>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a07      	ldr	r2, [pc, #28]	@ (80014c8 <HAL_PCD_MspInit+0xd8>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <HAL_PCD_MspInit+0xd8>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3780      	adds	r7, #128	@ 0x80
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020000 	.word	0x40020000

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001508 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014d4:	f7ff fe0e 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	@ (8001510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	@ (800151c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f004 fb81 	bl	8005c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff fb3f 	bl	8000b84 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001514:	08006ae8 	.word	0x08006ae8
  ldr r2, =_sbss
 8001518:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800151c:	200014e4 	.word	0x200014e4

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <HAL_Init+0x40>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_Init+0x40>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800153e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_Init+0x40>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f94f 	bl	80017f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	2000      	movs	r0, #0
 8001554:	f000 f808 	bl	8001568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fcce 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001570:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <HAL_InitTick+0x54>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <HAL_InitTick+0x58>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800157e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001582:	fbb2 f3f3 	udiv	r3, r2, r3
 8001586:	4618      	mov	r0, r3
 8001588:	f000 f967 	bl	800185a <HAL_SYSTICK_Config>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e00e      	b.n	80015b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b0f      	cmp	r3, #15
 800159a:	d80a      	bhi.n	80015b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800159c:	2200      	movs	r2, #0
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f000 f92f 	bl	8001806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a8:	4a06      	ldr	r2, [pc, #24]	@ (80015c4 <HAL_InitTick+0x5c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e000      	b.n	80015b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000004 	.word	0x20000004
 80015c0:	2000000c 	.word	0x2000000c
 80015c4:	20000008 	.word	0x20000008

080015c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <HAL_IncTick+0x20>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <HAL_IncTick+0x24>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4413      	add	r3, r2
 80015d8:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <HAL_IncTick+0x24>)
 80015da:	6013      	str	r3, [r2, #0]
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	20001394 	.word	0x20001394

080015f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_GetTick+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20001394 	.word	0x20001394

08001608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff ffee 	bl	80015f0 <HAL_GetTick>
 8001614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001620:	d005      	beq.n	800162e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <HAL_Delay+0x44>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800162e:	bf00      	nop
 8001630:	f7ff ffde 	bl	80015f0 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	429a      	cmp	r2, r3
 800163e:	d8f7      	bhi.n	8001630 <HAL_Delay+0x28>
  {
  }
}
 8001640:	bf00      	nop
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000000c 	.word	0x2000000c

08001650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001660:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800166c:	4013      	ands	r3, r2
 800166e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800167c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001682:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <__NVIC_SetPriorityGrouping+0x44>)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	60d3      	str	r3, [r2, #12]
}
 8001688:	bf00      	nop
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800169c:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <__NVIC_GetPriorityGrouping+0x18>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	f003 0307 	and.w	r3, r3, #7
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	db0b      	blt.n	80016de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	f003 021f 	and.w	r2, r3, #31
 80016cc:	4907      	ldr	r1, [pc, #28]	@ (80016ec <__NVIC_EnableIRQ+0x38>)
 80016ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	2001      	movs	r0, #1
 80016d6:	fa00 f202 	lsl.w	r2, r0, r2
 80016da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000e100 	.word	0xe000e100

080016f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001700:	2b00      	cmp	r3, #0
 8001702:	db0a      	blt.n	800171a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	b2da      	uxtb	r2, r3
 8001708:	490c      	ldr	r1, [pc, #48]	@ (800173c <__NVIC_SetPriority+0x4c>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	0112      	lsls	r2, r2, #4
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	440b      	add	r3, r1
 8001714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001718:	e00a      	b.n	8001730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	4908      	ldr	r1, [pc, #32]	@ (8001740 <__NVIC_SetPriority+0x50>)
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	3b04      	subs	r3, #4
 8001728:	0112      	lsls	r2, r2, #4
 800172a:	b2d2      	uxtb	r2, r2
 800172c:	440b      	add	r3, r1
 800172e:	761a      	strb	r2, [r3, #24]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001744:	b480      	push	{r7}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f1c3 0307 	rsb	r3, r3, #7
 800175e:	2b04      	cmp	r3, #4
 8001760:	bf28      	it	cs
 8001762:	2304      	movcs	r3, #4
 8001764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3304      	adds	r3, #4
 800176a:	2b06      	cmp	r3, #6
 800176c:	d902      	bls.n	8001774 <NVIC_EncodePriority+0x30>
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3b03      	subs	r3, #3
 8001772:	e000      	b.n	8001776 <NVIC_EncodePriority+0x32>
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001778:	f04f 32ff 	mov.w	r2, #4294967295
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	401a      	ands	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa01 f303 	lsl.w	r3, r1, r3
 8001796:	43d9      	mvns	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800179c:	4313      	orrs	r3, r2
         );
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3724      	adds	r7, #36	@ 0x24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017bc:	d301      	bcc.n	80017c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017be:	2301      	movs	r3, #1
 80017c0:	e00f      	b.n	80017e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c2:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <SysTick_Config+0x40>)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ca:	210f      	movs	r1, #15
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f7ff ff8e 	bl	80016f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <SysTick_Config+0x40>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <SysTick_Config+0x40>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff ff29 	bl	8001650 <__NVIC_SetPriorityGrouping>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001806:	b580      	push	{r7, lr}
 8001808:	b086      	sub	sp, #24
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	607a      	str	r2, [r7, #4]
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001818:	f7ff ff3e 	bl	8001698 <__NVIC_GetPriorityGrouping>
 800181c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	f7ff ff8e 	bl	8001744 <NVIC_EncodePriority>
 8001828:	4602      	mov	r2, r0
 800182a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff5d 	bl	80016f0 <__NVIC_SetPriority>
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff31 	bl	80016b4 <__NVIC_EnableIRQ>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffa2 	bl	80017ac <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff feb6 	bl	80015f0 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e099      	b.n	80019c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2202      	movs	r2, #2
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 0201 	bic.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018b0:	e00f      	b.n	80018d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018b2:	f7ff fe9d 	bl	80015f0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b05      	cmp	r3, #5
 80018be:	d908      	bls.n	80018d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2220      	movs	r2, #32
 80018c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e078      	b.n	80019c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e8      	bne.n	80018b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018e8:	697a      	ldr	r2, [r7, #20]
 80018ea:	4b38      	ldr	r3, [pc, #224]	@ (80019cc <HAL_DMA_Init+0x158>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001916:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4313      	orrs	r3, r2
 8001922:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	2b04      	cmp	r3, #4
 800192a:	d107      	bne.n	800193c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001934:	4313      	orrs	r3, r2
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4313      	orrs	r3, r2
 800193a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f023 0307 	bic.w	r3, r3, #7
 8001952:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	4313      	orrs	r3, r2
 800195c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001962:	2b04      	cmp	r3, #4
 8001964:	d117      	bne.n	8001996 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	4313      	orrs	r3, r2
 800196e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00e      	beq.n	8001996 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f000 fb01 	bl	8001f80 <DMA_CheckFifoParam>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2240      	movs	r2, #64	@ 0x40
 8001988:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001992:	2301      	movs	r3, #1
 8001994:	e016      	b.n	80019c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f000 fab8 	bl	8001f14 <DMA_CalcBaseAndBitshift>
 80019a4:	4603      	mov	r3, r0
 80019a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ac:	223f      	movs	r2, #63	@ 0x3f
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	f010803f 	.word	0xf010803f

080019d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_DMA_Start_IT+0x26>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e040      	b.n	8001a78 <HAL_DMA_Start_IT+0xa8>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d12f      	bne.n	8001a6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68b9      	ldr	r1, [r7, #8]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fa4a 	bl	8001eb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a28:	223f      	movs	r2, #63	@ 0x3f
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0216 	orr.w	r2, r2, #22
 8001a3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d007      	beq.n	8001a58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0208 	orr.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e005      	b.n	8001a76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a72:	2302      	movs	r3, #2
 8001a74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a8e:	f7ff fdaf 	bl	80015f0 <HAL_GetTick>
 8001a92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d008      	beq.n	8001ab2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2280      	movs	r2, #128	@ 0x80
 8001aa4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e052      	b.n	8001b58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0216 	bic.w	r2, r2, #22
 8001ac0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d103      	bne.n	8001ae2 <HAL_DMA_Abort+0x62>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0208 	bic.w	r2, r2, #8
 8001af0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0201 	bic.w	r2, r2, #1
 8001b00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b02:	e013      	b.n	8001b2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b04:	f7ff fd74 	bl	80015f0 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d90c      	bls.n	8001b2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2220      	movs	r2, #32
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e015      	b.n	8001b58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e4      	bne.n	8001b04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3e:	223f      	movs	r2, #63	@ 0x3f
 8001b40:	409a      	lsls	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d004      	beq.n	8001b7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2280      	movs	r2, #128	@ 0x80
 8001b78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00c      	b.n	8001b98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2205      	movs	r2, #5
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bb0:	4b8e      	ldr	r3, [pc, #568]	@ (8001dec <HAL_DMA_IRQHandler+0x248>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a8e      	ldr	r2, [pc, #568]	@ (8001df0 <HAL_DMA_IRQHandler+0x24c>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	0a9b      	lsrs	r3, r3, #10
 8001bbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bce:	2208      	movs	r2, #8
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d01a      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d013      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0204 	bic.w	r2, r2, #4
 8001bf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d012      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c32:	2201      	movs	r2, #1
 8001c34:	409a      	lsls	r2, r3
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	f043 0202 	orr.w	r2, r3, #2
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d012      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00b      	beq.n	8001c7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c68:	2204      	movs	r2, #4
 8001c6a:	409a      	lsls	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c80:	2210      	movs	r2, #16
 8001c82:	409a      	lsls	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d043      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d03c      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c9e:	2210      	movs	r2, #16
 8001ca0:	409a      	lsls	r2, r3
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d018      	beq.n	8001ce6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d108      	bne.n	8001cd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d024      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
 8001cd2:	e01f      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01b      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	4798      	blx	r3
 8001ce4:	e016      	b.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d107      	bne.n	8001d04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0208 	bic.w	r2, r2, #8
 8001d02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d18:	2220      	movs	r2, #32
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 808f 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8087 	beq.w	8001e44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d136      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 0216 	bic.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x1da>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d92:	223f      	movs	r2, #63	@ 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d07e      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
        }
        return;
 8001dba:	e079      	b.n	8001eb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d01d      	beq.n	8001e06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d031      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	4798      	blx	r3
 8001de8:	e02c      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
 8001dea:	bf00      	nop
 8001dec:	20000004 	.word	0x20000004
 8001df0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d023      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
 8001e04:	e01e      	b.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10f      	bne.n	8001e34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0210 	bic.w	r2, r2, #16
 8001e22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d032      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d022      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d307      	bcc.n	8001e8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f2      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x2cc>
 8001e8a:	e000      	b.n	8001e8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	4798      	blx	r3
 8001eae:	e000      	b.n	8001eb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001eb0:	bf00      	nop
    }
  }
}
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b40      	cmp	r3, #64	@ 0x40
 8001ee4:	d108      	bne.n	8001ef8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ef6:	e007      	b.n	8001f08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3b10      	subs	r3, #16
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <DMA_CalcBaseAndBitshift+0x64>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f2e:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <DMA_CalcBaseAndBitshift+0x68>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4413      	add	r3, r2
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d909      	bls.n	8001f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f4a:	f023 0303 	bic.w	r3, r3, #3
 8001f4e:	1d1a      	adds	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f54:	e007      	b.n	8001f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f5e:	f023 0303 	bic.w	r3, r3, #3
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	aaaaaaab 	.word	0xaaaaaaab
 8001f7c:	08006a9c 	.word	0x08006a9c

08001f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11f      	bne.n	8001fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d856      	bhi.n	800204e <DMA_CheckFifoParam+0xce>
 8001fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fa8 <DMA_CheckFifoParam+0x28>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08001fb9 	.word	0x08001fb9
 8001fac:	08001fcb 	.word	0x08001fcb
 8001fb0:	08001fb9 	.word	0x08001fb9
 8001fb4:	0800204f 	.word	0x0800204f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d046      	beq.n	8002052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc8:	e043      	b.n	8002052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fd2:	d140      	bne.n	8002056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd8:	e03d      	b.n	8002056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001fe2:	d121      	bne.n	8002028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d837      	bhi.n	800205a <DMA_CheckFifoParam+0xda>
 8001fea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <DMA_CheckFifoParam+0x70>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002001 	.word	0x08002001
 8001ff4:	08002007 	.word	0x08002007
 8001ff8:	08002001 	.word	0x08002001
 8001ffc:	08002019 	.word	0x08002019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
      break;
 8002004:	e030      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800200a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d025      	beq.n	800205e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002016:	e022      	b.n	800205e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002020:	d11f      	bne.n	8002062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002026:	e01c      	b.n	8002062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d903      	bls.n	8002036 <DMA_CheckFifoParam+0xb6>
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b03      	cmp	r3, #3
 8002032:	d003      	beq.n	800203c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002034:	e018      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	73fb      	strb	r3, [r7, #15]
      break;
 800203a:	e015      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002040:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      break;
 800204c:	e00b      	b.n	8002066 <DMA_CheckFifoParam+0xe6>
      break;
 800204e:	bf00      	nop
 8002050:	e00a      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002052:	bf00      	nop
 8002054:	e008      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002056:	bf00      	nop
 8002058:	e006      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 800205a:	bf00      	nop
 800205c:	e004      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 800205e:	bf00      	nop
 8002060:	e002      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;   
 8002062:	bf00      	nop
 8002064:	e000      	b.n	8002068 <DMA_CheckFifoParam+0xe8>
      break;
 8002066:	bf00      	nop
    }
  } 
  
  return status; 
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	b480      	push	{r7}
 800207a:	b089      	sub	sp, #36	@ 0x24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	e165      	b.n	8002360 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002094:	2201      	movs	r2, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4013      	ands	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	f040 8154 	bne.w	800235a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d130      	bne.n	800212c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 0201 	and.w	r2, r3, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	2b03      	cmp	r3, #3
 8002136:	d017      	beq.n	8002168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d123      	bne.n	80021bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	08da      	lsrs	r2, r3, #3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3208      	adds	r2, #8
 800217c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4013      	ands	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	08da      	lsrs	r2, r3, #3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3208      	adds	r2, #8
 80021b6:	69b9      	ldr	r1, [r7, #24]
 80021b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80ae 	beq.w	800235a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b5d      	ldr	r3, [pc, #372]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002206:	4a5c      	ldr	r2, [pc, #368]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800220c:	6453      	str	r3, [r2, #68]	@ 0x44
 800220e:	4b5a      	ldr	r3, [pc, #360]	@ (8002378 <HAL_GPIO_Init+0x300>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800221a:	4a58      	ldr	r2, [pc, #352]	@ (800237c <HAL_GPIO_Init+0x304>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	220f      	movs	r2, #15
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4f      	ldr	r2, [pc, #316]	@ (8002380 <HAL_GPIO_Init+0x308>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d025      	beq.n	8002292 <HAL_GPIO_Init+0x21a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4e      	ldr	r2, [pc, #312]	@ (8002384 <HAL_GPIO_Init+0x30c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d01f      	beq.n	800228e <HAL_GPIO_Init+0x216>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4d      	ldr	r2, [pc, #308]	@ (8002388 <HAL_GPIO_Init+0x310>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d019      	beq.n	800228a <HAL_GPIO_Init+0x212>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4c      	ldr	r2, [pc, #304]	@ (800238c <HAL_GPIO_Init+0x314>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0x20e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4b      	ldr	r2, [pc, #300]	@ (8002390 <HAL_GPIO_Init+0x318>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00d      	beq.n	8002282 <HAL_GPIO_Init+0x20a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4a      	ldr	r2, [pc, #296]	@ (8002394 <HAL_GPIO_Init+0x31c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <HAL_GPIO_Init+0x206>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a49      	ldr	r2, [pc, #292]	@ (8002398 <HAL_GPIO_Init+0x320>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_GPIO_Init+0x202>
 8002276:	2306      	movs	r3, #6
 8002278:	e00c      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 800227a:	2307      	movs	r3, #7
 800227c:	e00a      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 800227e:	2305      	movs	r3, #5
 8002280:	e008      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 8002282:	2304      	movs	r3, #4
 8002284:	e006      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 8002286:	2303      	movs	r3, #3
 8002288:	e004      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 800228a:	2302      	movs	r3, #2
 800228c:	e002      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x21c>
 8002292:	2300      	movs	r3, #0
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	f002 0203 	and.w	r2, r2, #3
 800229a:	0092      	lsls	r2, r2, #2
 800229c:	4093      	lsls	r3, r2
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022a4:	4935      	ldr	r1, [pc, #212]	@ (800237c <HAL_GPIO_Init+0x304>)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	3302      	adds	r3, #2
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022b2:	4b3a      	ldr	r3, [pc, #232]	@ (800239c <HAL_GPIO_Init+0x324>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022d6:	4a31      	ldr	r2, [pc, #196]	@ (800239c <HAL_GPIO_Init+0x324>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022dc:	4b2f      	ldr	r3, [pc, #188]	@ (800239c <HAL_GPIO_Init+0x324>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002300:	4a26      	ldr	r2, [pc, #152]	@ (800239c <HAL_GPIO_Init+0x324>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002306:	4b25      	ldr	r3, [pc, #148]	@ (800239c <HAL_GPIO_Init+0x324>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232a:	4a1c      	ldr	r2, [pc, #112]	@ (800239c <HAL_GPIO_Init+0x324>)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002330:	4b1a      	ldr	r3, [pc, #104]	@ (800239c <HAL_GPIO_Init+0x324>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002354:	4a11      	ldr	r2, [pc, #68]	@ (800239c <HAL_GPIO_Init+0x324>)
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	3301      	adds	r3, #1
 800235e:	61fb      	str	r3, [r7, #28]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b0f      	cmp	r3, #15
 8002364:	f67f ae96 	bls.w	8002094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002368:	bf00      	nop
 800236a:	bf00      	nop
 800236c:	3724      	adds	r7, #36	@ 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40023800 	.word	0x40023800
 800237c:	40013800 	.word	0x40013800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020800 	.word	0x40020800
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40021000 	.word	0x40021000
 8002394:	40021400 	.word	0x40021400
 8002398:	40021800 	.word	0x40021800
 800239c:	40013c00 	.word	0x40013c00

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	041a      	lsls	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	619a      	str	r2, [r3, #24]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	460b      	mov	r3, r1
 80023dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023e4:	887a      	ldrh	r2, [r7, #2]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	041a      	lsls	r2, r3, #16
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	400b      	ands	r3, r1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b086      	sub	sp, #24
 800240a:	af02      	add	r7, sp, #8
 800240c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e108      	b.n	800262a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe ffdc 	bl	80013f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2203      	movs	r2, #3
 800243c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002446:	d102      	bne.n	800244e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fe84 	bl	8005160 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7c1a      	ldrb	r2, [r3, #16]
 8002460:	f88d 2000 	strb.w	r2, [sp]
 8002464:	3304      	adds	r3, #4
 8002466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002468:	f002 fe16 	bl	8005098 <USB_CoreInit>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0d5      	b.n	800262a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f002 fe7c 	bl	8005182 <USB_SetCurrentMode>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0c6      	b.n	800262a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e04a      	b.n	8002538 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3315      	adds	r3, #21
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3314      	adds	r3, #20
 80024c6:	7bfa      	ldrb	r2, [r7, #15]
 80024c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	b298      	uxth	r0, r3
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	332e      	adds	r3, #46	@ 0x2e
 80024de:	4602      	mov	r2, r0
 80024e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	3318      	adds	r3, #24
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	331c      	adds	r3, #28
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	3320      	adds	r3, #32
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	3324      	adds	r3, #36	@ 0x24
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	3301      	adds	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	429a      	cmp	r2, r3
 8002540:	d3af      	bcc.n	80024a2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
 8002546:	e044      	b.n	80025d2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4413      	add	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	00db      	lsls	r3, r3, #3
 8002566:	4413      	add	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025cc:	7bfb      	ldrb	r3, [r7, #15]
 80025ce:	3301      	adds	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	791b      	ldrb	r3, [r3, #4]
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d3b5      	bcc.n	8002548 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	7c1a      	ldrb	r2, [r3, #16]
 80025e4:	f88d 2000 	strb.w	r2, [sp]
 80025e8:	3304      	adds	r3, #4
 80025ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ec:	f002 fe16 	bl	800521c <USB_DevInit>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e013      	b.n	800262a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	7b1b      	ldrb	r3, [r3, #12]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d102      	bne.n	800261e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 f80a 	bl	8002632 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 ffd1 	bl	80055ca <USB_DevDisconnect>

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002632:	b480      	push	{r7}
 8002634:	b085      	sub	sp, #20
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002664:	f043 0303 	orr.w	r3, r3, #3
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0cc      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b68      	ldr	r3, [pc, #416]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d90c      	bls.n	80026b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b65      	ldr	r3, [pc, #404]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b63      	ldr	r3, [pc, #396]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0b8      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026d0:	4b59      	ldr	r3, [pc, #356]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4a58      	ldr	r2, [pc, #352]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80026da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026e8:	4b53      	ldr	r3, [pc, #332]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	4a52      	ldr	r2, [pc, #328]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80026f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f4:	4b50      	ldr	r3, [pc, #320]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	494d      	ldr	r1, [pc, #308]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	4313      	orrs	r3, r2
 8002704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d044      	beq.n	800279c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d107      	bne.n	800272a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b47      	ldr	r3, [pc, #284]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d119      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d003      	beq.n	800273a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002736:	2b03      	cmp	r3, #3
 8002738:	d107      	bne.n	800274a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	4b3f      	ldr	r3, [pc, #252]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e06f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e067      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800275a:	4b37      	ldr	r3, [pc, #220]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f023 0203 	bic.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4934      	ldr	r1, [pc, #208]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800276c:	f7fe ff40 	bl	80015f0 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe ff3c 	bl	80015f0 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e04f      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	4b2b      	ldr	r3, [pc, #172]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 020c 	and.w	r2, r3, #12
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	429a      	cmp	r2, r3
 800279a:	d1eb      	bne.n	8002774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279c:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d20c      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b22      	ldr	r3, [pc, #136]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e032      	b.n	800282a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027d0:	4b19      	ldr	r3, [pc, #100]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4916      	ldr	r1, [pc, #88]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ee:	4b12      	ldr	r3, [pc, #72]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	490e      	ldr	r1, [pc, #56]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002802:	f000 fb7f 	bl	8002f04 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b0b      	ldr	r3, [pc, #44]	@ (8002838 <HAL_RCC_ClockConfig+0x1bc>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490a      	ldr	r1, [pc, #40]	@ (800283c <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800281e:	4b09      	ldr	r3, [pc, #36]	@ (8002844 <HAL_RCC_ClockConfig+0x1c8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fe fea0 	bl	8001568 <HAL_InitTick>

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	40023c00 	.word	0x40023c00
 8002838:	40023800 	.word	0x40023800
 800283c:	08006a84 	.word	0x08006a84
 8002840:	20000004 	.word	0x20000004
 8002844:	20000008 	.word	0x20000008

08002848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_RCC_GetHCLKFreq+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000004 	.word	0x20000004

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002864:	f7ff fff0 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002868:	4602      	mov	r2, r0
 800286a:	4b05      	ldr	r3, [pc, #20]	@ (8002880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	0a9b      	lsrs	r3, r3, #10
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	4903      	ldr	r1, [pc, #12]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002876:	5ccb      	ldrb	r3, [r1, r3]
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40023800 	.word	0x40023800
 8002884:	08006a94 	.word	0x08006a94

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800288c:	f7ff ffdc 	bl	8002848 <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b05      	ldr	r3, [pc, #20]	@ (80028a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	0b5b      	lsrs	r3, r3, #13
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4903      	ldr	r1, [pc, #12]	@ (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40023800 	.word	0x40023800
 80028ac:	08006a94 	.word	0x08006a94

080028b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	@ 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d010      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80028e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ee:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f6:	496c      	ldr	r1, [pc, #432]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002906:	2301      	movs	r3, #1
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d010      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002916:	4b64      	ldr	r3, [pc, #400]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800291c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002924:	4960      	ldr	r1, [pc, #384]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d101      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002934:	2301      	movs	r3, #1
 8002936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d017      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002944:	4b58      	ldr	r3, [pc, #352]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800294a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4955      	ldr	r1, [pc, #340]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002962:	d101      	bne.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002964:	2301      	movs	r3, #1
 8002966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002970:	2301      	movs	r3, #1
 8002972:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d017      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002980:	4b49      	ldr	r3, [pc, #292]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002982:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002986:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800298e:	4946      	ldr	r1, [pc, #280]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299e:	d101      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80029a0:	2301      	movs	r3, #1
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80029ac:	2301      	movs	r3, #1
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 808a 	beq.w	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	4b39      	ldr	r3, [pc, #228]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	4a38      	ldr	r2, [pc, #224]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ce:	4b36      	ldr	r3, [pc, #216]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a33      	ldr	r2, [pc, #204]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029e6:	f7fe fe03 	bl	80015f0 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ee:	f7fe fdff 	bl	80015f0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e278      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002a00:	4b2a      	ldr	r3, [pc, #168]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a0c:	4b26      	ldr	r3, [pc, #152]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a14:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02f      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a24:	6a3a      	ldr	r2, [r7, #32]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d028      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a32:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a34:	4b1e      	ldr	r3, [pc, #120]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a36:	2201      	movs	r2, #1
 8002a38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a40:	4a19      	ldr	r2, [pc, #100]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a46:	4b18      	ldr	r3, [pc, #96]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d114      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a52:	f7fe fdcd 	bl	80015f0 <HAL_GetTick>
 8002a56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe fdc9 	bl	80015f0 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e240      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ee      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a88:	d114      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002a9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9e:	4902      	ldr	r1, [pc, #8]	@ (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]
 8002aa4:	e00c      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002aa6:	bf00      	nop
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40007000 	.word	0x40007000
 8002ab0:	42470e40 	.word	0x42470e40
 8002ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	4a49      	ldr	r2, [pc, #292]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002abe:	6093      	str	r3, [r2, #8]
 8002ac0:	4b47      	ldr	r3, [pc, #284]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ac2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002acc:	4944      	ldr	r1, [pc, #272]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002ae4:	4b3f      	ldr	r3, [pc, #252]	@ (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002ae6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002af4:	4b3a      	ldr	r3, [pc, #232]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002afa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b02:	4937      	ldr	r1, [pc, #220]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b16:	4b32      	ldr	r3, [pc, #200]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b24:	492e      	ldr	r1, [pc, #184]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d011      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b38:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b3e:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b46:	4926      	ldr	r1, [pc, #152]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b56:	d101      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b6e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	491a      	ldr	r1, [pc, #104]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d011      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002b8a:	4b15      	ldr	r3, [pc, #84]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b90:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b98:	4911      	ldr	r1, [pc, #68]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ba8:	d101      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002baa:	2301      	movs	r3, #1
 8002bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d005      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bbc:	f040 80ff 	bne.w	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002bc0:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002bc6:	f7fe fd13 	bl	80015f0 <HAL_GetTick>
 8002bca:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bcc:	e00e      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002bce:	f7fe fd0f 	bl	80015f0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d907      	bls.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e188      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	424711e0 	.word	0x424711e0
 8002be8:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bec:	4b7e      	ldr	r3, [pc, #504]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ea      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d009      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d028      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d124      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c20:	4b71      	ldr	r3, [pc, #452]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c32:	4b6d      	ldr	r3, [pc, #436]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c38:	0e1b      	lsrs	r3, r3, #24
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	019b      	lsls	r3, r3, #6
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	085b      	lsrs	r3, r3, #1
 8002c50:	3b01      	subs	r3, #1
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	431a      	orrs	r2, r3
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	071b      	lsls	r3, r3, #28
 8002c62:	4961      	ldr	r1, [pc, #388]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d035      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c94:	d130      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c96:	4b54      	ldr	r3, [pc, #336]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002caa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cae:	0f1b      	lsrs	r3, r3, #28
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	019b      	lsls	r3, r3, #6
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	041b      	lsls	r3, r3, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	071b      	lsls	r3, r3, #28
 8002cd8:	4943      	ldr	r1, [pc, #268]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ce0:	4b41      	ldr	r3, [pc, #260]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ce6:	f023 021f 	bic.w	r2, r3, #31
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	493d      	ldr	r1, [pc, #244]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d029      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d0c:	d124      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d0e:	4b36      	ldr	r3, [pc, #216]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d20:	4b31      	ldr	r3, [pc, #196]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d26:	0f1b      	lsrs	r3, r3, #28
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	019b      	lsls	r3, r3, #6
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	3b01      	subs	r3, #1
 8002d42:	041b      	lsls	r3, r3, #16
 8002d44:	431a      	orrs	r2, r3
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	061b      	lsls	r3, r3, #24
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	071b      	lsls	r3, r3, #28
 8002d50:	4925      	ldr	r1, [pc, #148]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d016      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	019b      	lsls	r3, r3, #6
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	3b01      	subs	r3, #1
 8002d78:	041b      	lsls	r3, r3, #16
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	071b      	lsls	r3, r3, #28
 8002d8a:	4917      	ldr	r1, [pc, #92]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d98:	f7fe fc2a 	bl	80015f0 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002da0:	f7fe fc26 	bl	80015f0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e09f      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	f040 8095 	bne.w	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dcc:	f7fe fc10 	bl	80015f0 <HAL_GetTick>
 8002dd0:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dd2:	e00f      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002dd4:	f7fe fc0c 	bl	80015f0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d908      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e085      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800
 8002dec:	42470068 	.word	0x42470068
 8002df0:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002df4:	4b41      	ldr	r3, [pc, #260]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e00:	d0e8      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d02b      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d127      	bne.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002e2a:	4b34      	ldr	r3, [pc, #208]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	3301      	adds	r3, #1
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	431a      	orrs	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	4928      	ldr	r1, [pc, #160]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e60:	4b26      	ldr	r3, [pc, #152]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e66:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	4922      	ldr	r1, [pc, #136]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01d      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e8e:	d118      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e96:	0e1b      	lsrs	r3, r3, #24
 8002e98:	f003 030f 	and.w	r3, r3, #15
 8002e9c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	019b      	lsls	r3, r3, #6
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	041b      	lsls	r3, r3, #16
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	061b      	lsls	r3, r3, #24
 8002eba:	4910      	ldr	r1, [pc, #64]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ec8:	f7fe fb92 	bl	80015f0 <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ed0:	f7fe fb8e 	bl	80015f0 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e007      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002eee:	d1ef      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3730      	adds	r7, #48	@ 0x30
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40023800 	.word	0x40023800
 8002f00:	42470070 	.word	0x42470070

08002f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b0ae      	sub	sp, #184	@ 0xb8
 8002f0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f2a:	4bcb      	ldr	r3, [pc, #812]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 030c 	and.w	r3, r3, #12
 8002f32:	2b0c      	cmp	r3, #12
 8002f34:	f200 8206 	bhi.w	8003344 <HAL_RCC_GetSysClockFreq+0x440>
 8002f38:	a201      	add	r2, pc, #4	@ (adr r2, 8002f40 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3e:	bf00      	nop
 8002f40:	08002f75 	.word	0x08002f75
 8002f44:	08003345 	.word	0x08003345
 8002f48:	08003345 	.word	0x08003345
 8002f4c:	08003345 	.word	0x08003345
 8002f50:	08002f7d 	.word	0x08002f7d
 8002f54:	08003345 	.word	0x08003345
 8002f58:	08003345 	.word	0x08003345
 8002f5c:	08003345 	.word	0x08003345
 8002f60:	08002f85 	.word	0x08002f85
 8002f64:	08003345 	.word	0x08003345
 8002f68:	08003345 	.word	0x08003345
 8002f6c:	08003345 	.word	0x08003345
 8002f70:	08003175 	.word	0x08003175
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f74:	4bb9      	ldr	r3, [pc, #740]	@ (800325c <HAL_RCC_GetSysClockFreq+0x358>)
 8002f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f7a:	e1e7      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f7c:	4bb8      	ldr	r3, [pc, #736]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f82:	e1e3      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f84:	4bb4      	ldr	r3, [pc, #720]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f90:	4bb1      	ldr	r3, [pc, #708]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d071      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9c:	4bae      	ldr	r3, [pc, #696]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002fa8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002fac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002fbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	462b      	mov	r3, r5
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0159      	lsls	r1, r3, #5
 8002fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd4:	0150      	lsls	r0, r2, #5
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4621      	mov	r1, r4
 8002fdc:	1a51      	subs	r1, r2, r1
 8002fde:	6439      	str	r1, [r7, #64]	@ 0x40
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	018b      	lsls	r3, r1, #6
 8002ff8:	4641      	mov	r1, r8
 8002ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffe:	4641      	mov	r1, r8
 8003000:	018a      	lsls	r2, r1, #6
 8003002:	4641      	mov	r1, r8
 8003004:	1a51      	subs	r1, r2, r1
 8003006:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003008:	4649      	mov	r1, r9
 800300a:	eb63 0301 	sbc.w	r3, r3, r1
 800300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800301c:	4649      	mov	r1, r9
 800301e:	00cb      	lsls	r3, r1, #3
 8003020:	4641      	mov	r1, r8
 8003022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003026:	4641      	mov	r1, r8
 8003028:	00ca      	lsls	r2, r1, #3
 800302a:	4610      	mov	r0, r2
 800302c:	4619      	mov	r1, r3
 800302e:	4603      	mov	r3, r0
 8003030:	4622      	mov	r2, r4
 8003032:	189b      	adds	r3, r3, r2
 8003034:	633b      	str	r3, [r7, #48]	@ 0x30
 8003036:	462b      	mov	r3, r5
 8003038:	460a      	mov	r2, r1
 800303a:	eb42 0303 	adc.w	r3, r2, r3
 800303e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800304c:	4629      	mov	r1, r5
 800304e:	024b      	lsls	r3, r1, #9
 8003050:	4621      	mov	r1, r4
 8003052:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003056:	4621      	mov	r1, r4
 8003058:	024a      	lsls	r2, r1, #9
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003062:	2200      	movs	r2, #0
 8003064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003068:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800306c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003070:	f7fd f926 	bl	80002c0 <__aeabi_uldivmod>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4613      	mov	r3, r2
 800307a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800307e:	e067      	b.n	8003150 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003080:	4b75      	ldr	r3, [pc, #468]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	2200      	movs	r2, #0
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800308c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003090:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003098:	67bb      	str	r3, [r7, #120]	@ 0x78
 800309a:	2300      	movs	r3, #0
 800309c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800309e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80030a2:	4622      	mov	r2, r4
 80030a4:	462b      	mov	r3, r5
 80030a6:	f04f 0000 	mov.w	r0, #0
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	0159      	lsls	r1, r3, #5
 80030b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b4:	0150      	lsls	r0, r2, #5
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4621      	mov	r1, r4
 80030bc:	1a51      	subs	r1, r2, r1
 80030be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80030c0:	4629      	mov	r1, r5
 80030c2:	eb63 0301 	sbc.w	r3, r3, r1
 80030c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80030d4:	4649      	mov	r1, r9
 80030d6:	018b      	lsls	r3, r1, #6
 80030d8:	4641      	mov	r1, r8
 80030da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030de:	4641      	mov	r1, r8
 80030e0:	018a      	lsls	r2, r1, #6
 80030e2:	4641      	mov	r1, r8
 80030e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80030e8:	4649      	mov	r1, r9
 80030ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003102:	4692      	mov	sl, r2
 8003104:	469b      	mov	fp, r3
 8003106:	4623      	mov	r3, r4
 8003108:	eb1a 0303 	adds.w	r3, sl, r3
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	462b      	mov	r3, r5
 8003110:	eb4b 0303 	adc.w	r3, fp, r3
 8003114:	627b      	str	r3, [r7, #36]	@ 0x24
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003122:	4629      	mov	r1, r5
 8003124:	028b      	lsls	r3, r1, #10
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312c:	4621      	mov	r1, r4
 800312e:	028a      	lsls	r2, r1, #10
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003138:	2200      	movs	r2, #0
 800313a:	673b      	str	r3, [r7, #112]	@ 0x70
 800313c:	677a      	str	r2, [r7, #116]	@ 0x74
 800313e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003142:	f7fd f8bd 	bl	80002c0 <__aeabi_uldivmod>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4613      	mov	r3, r2
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003150:	4b41      	ldr	r3, [pc, #260]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003172:	e0eb      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003174:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800317c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003180:	4b35      	ldr	r3, [pc, #212]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d06b      	beq.n	8003264 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318c:	4b32      	ldr	r3, [pc, #200]	@ (8003258 <HAL_RCC_GetSysClockFreq+0x354>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	099b      	lsrs	r3, r3, #6
 8003192:	2200      	movs	r2, #0
 8003194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003196:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003198:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800319a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319e:	663b      	str	r3, [r7, #96]	@ 0x60
 80031a0:	2300      	movs	r3, #0
 80031a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80031a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80031a8:	4622      	mov	r2, r4
 80031aa:	462b      	mov	r3, r5
 80031ac:	f04f 0000 	mov.w	r0, #0
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	0159      	lsls	r1, r3, #5
 80031b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ba:	0150      	lsls	r0, r2, #5
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4621      	mov	r1, r4
 80031c2:	1a51      	subs	r1, r2, r1
 80031c4:	61b9      	str	r1, [r7, #24]
 80031c6:	4629      	mov	r1, r5
 80031c8:	eb63 0301 	sbc.w	r3, r3, r1
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031da:	4659      	mov	r1, fp
 80031dc:	018b      	lsls	r3, r1, #6
 80031de:	4651      	mov	r1, sl
 80031e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e4:	4651      	mov	r1, sl
 80031e6:	018a      	lsls	r2, r1, #6
 80031e8:	4651      	mov	r1, sl
 80031ea:	ebb2 0801 	subs.w	r8, r2, r1
 80031ee:	4659      	mov	r1, fp
 80031f0:	eb63 0901 	sbc.w	r9, r3, r1
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003200:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003204:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003208:	4690      	mov	r8, r2
 800320a:	4699      	mov	r9, r3
 800320c:	4623      	mov	r3, r4
 800320e:	eb18 0303 	adds.w	r3, r8, r3
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	462b      	mov	r3, r5
 8003216:	eb49 0303 	adc.w	r3, r9, r3
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003228:	4629      	mov	r1, r5
 800322a:	024b      	lsls	r3, r1, #9
 800322c:	4621      	mov	r1, r4
 800322e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003232:	4621      	mov	r1, r4
 8003234:	024a      	lsls	r2, r1, #9
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800323e:	2200      	movs	r2, #0
 8003240:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003242:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003244:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003248:	f7fd f83a 	bl	80002c0 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003256:	e065      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x420>
 8003258:	40023800 	.word	0x40023800
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003264:	4b3d      	ldr	r3, [pc, #244]	@ (800335c <HAL_RCC_GetSysClockFreq+0x458>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	099b      	lsrs	r3, r3, #6
 800326a:	2200      	movs	r2, #0
 800326c:	4618      	mov	r0, r3
 800326e:	4611      	mov	r1, r2
 8003270:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003274:	653b      	str	r3, [r7, #80]	@ 0x50
 8003276:	2300      	movs	r3, #0
 8003278:	657b      	str	r3, [r7, #84]	@ 0x54
 800327a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800327e:	4642      	mov	r2, r8
 8003280:	464b      	mov	r3, r9
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	0159      	lsls	r1, r3, #5
 800328c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003290:	0150      	lsls	r0, r2, #5
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4641      	mov	r1, r8
 8003298:	1a51      	subs	r1, r2, r1
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	4649      	mov	r1, r9
 800329e:	eb63 0301 	sbc.w	r3, r3, r1
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	f04f 0300 	mov.w	r3, #0
 80032ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80032b0:	4659      	mov	r1, fp
 80032b2:	018b      	lsls	r3, r1, #6
 80032b4:	4651      	mov	r1, sl
 80032b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032ba:	4651      	mov	r1, sl
 80032bc:	018a      	lsls	r2, r1, #6
 80032be:	4651      	mov	r1, sl
 80032c0:	1a54      	subs	r4, r2, r1
 80032c2:	4659      	mov	r1, fp
 80032c4:	eb63 0501 	sbc.w	r5, r3, r1
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	00eb      	lsls	r3, r5, #3
 80032d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d6:	00e2      	lsls	r2, r4, #3
 80032d8:	4614      	mov	r4, r2
 80032da:	461d      	mov	r5, r3
 80032dc:	4643      	mov	r3, r8
 80032de:	18e3      	adds	r3, r4, r3
 80032e0:	603b      	str	r3, [r7, #0]
 80032e2:	464b      	mov	r3, r9
 80032e4:	eb45 0303 	adc.w	r3, r5, r3
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f6:	4629      	mov	r1, r5
 80032f8:	028b      	lsls	r3, r1, #10
 80032fa:	4621      	mov	r1, r4
 80032fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003300:	4621      	mov	r1, r4
 8003302:	028a      	lsls	r2, r1, #10
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800330c:	2200      	movs	r2, #0
 800330e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003310:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003312:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003316:	f7fc ffd3 	bl	80002c0 <__aeabi_uldivmod>
 800331a:	4602      	mov	r2, r0
 800331c:	460b      	mov	r3, r1
 800331e:	4613      	mov	r3, r2
 8003320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003324:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <HAL_RCC_GetSysClockFreq+0x458>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0f1b      	lsrs	r3, r3, #28
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003332:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003336:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003342:	e003      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800334a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003350:	4618      	mov	r0, r3
 8003352:	37b8      	adds	r7, #184	@ 0xb8
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800335a:	bf00      	nop
 800335c:	40023800 	.word	0x40023800
 8003360:	00f42400 	.word	0x00f42400

08003364 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e28d      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8083 	beq.w	800348a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003384:	4b94      	ldr	r3, [pc, #592]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b04      	cmp	r3, #4
 800338e:	d019      	beq.n	80033c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003390:	4b91      	ldr	r3, [pc, #580]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 030c 	and.w	r3, r3, #12
        || \
 8003398:	2b08      	cmp	r3, #8
 800339a:	d106      	bne.n	80033aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800339c:	4b8e      	ldr	r3, [pc, #568]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033a8:	d00c      	beq.n	80033c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b8b      	ldr	r3, [pc, #556]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80033b2:	2b0c      	cmp	r3, #12
 80033b4:	d112      	bne.n	80033dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b88      	ldr	r3, [pc, #544]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033c2:	d10b      	bne.n	80033dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	4b84      	ldr	r3, [pc, #528]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05b      	beq.n	8003488 <HAL_RCC_OscConfig+0x124>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d157      	bne.n	8003488 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e25a      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x90>
 80033e6:	4b7c      	ldr	r3, [pc, #496]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a7b      	ldr	r2, [pc, #492]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xcc>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0xb4>
 80033fe:	4b76      	ldr	r3, [pc, #472]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a75      	ldr	r2, [pc, #468]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b73      	ldr	r3, [pc, #460]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a72      	ldr	r2, [pc, #456]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xcc>
 8003418:	4b6f      	ldr	r3, [pc, #444]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6e      	ldr	r2, [pc, #440]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b6c      	ldr	r3, [pc, #432]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a6b      	ldr	r2, [pc, #428]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe f8da 	bl	80015f0 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe f8d6 	bl	80015f0 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e21f      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b61      	ldr	r3, [pc, #388]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xdc>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe f8c6 	bl	80015f0 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe f8c2 	bl	80015f0 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e20b      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347a:	4b57      	ldr	r3, [pc, #348]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x104>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d06f      	beq.n	8003576 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003496:	4b50      	ldr	r3, [pc, #320]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d017      	beq.n	80034d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034a2:	4b4d      	ldr	r3, [pc, #308]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d105      	bne.n	80034ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034ae:	4b4a      	ldr	r3, [pc, #296]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b47      	ldr	r3, [pc, #284]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d11c      	bne.n	8003500 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c6:	4b44      	ldr	r3, [pc, #272]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	4b41      	ldr	r3, [pc, #260]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x186>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1d3      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	4b3b      	ldr	r3, [pc, #236]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4937      	ldr	r1, [pc, #220]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	e03a      	b.n	8003576 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003508:	4b34      	ldr	r3, [pc, #208]	@ (80035dc <HAL_RCC_OscConfig+0x278>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fe f86f 	bl	80015f0 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003516:	f7fe f86b 	bl	80015f0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e1b4      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	4b2b      	ldr	r3, [pc, #172]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b28      	ldr	r3, [pc, #160]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4925      	ldr	r1, [pc, #148]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b24      	ldr	r3, [pc, #144]	@ (80035dc <HAL_RCC_OscConfig+0x278>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe f84e 	bl	80015f0 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003558:	f7fe f84a 	bl	80015f0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e193      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	4b1b      	ldr	r3, [pc, #108]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d036      	beq.n	80035f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358a:	4b15      	ldr	r3, [pc, #84]	@ (80035e0 <HAL_RCC_OscConfig+0x27c>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe f82e 	bl	80015f0 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fe f82a 	bl	80015f0 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e173      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <HAL_RCC_OscConfig+0x274>)
 80035ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x234>
 80035b6:	e01b      	b.n	80035f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b8:	4b09      	ldr	r3, [pc, #36]	@ (80035e0 <HAL_RCC_OscConfig+0x27c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035be:	f7fe f817 	bl	80015f0 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	e00e      	b.n	80035e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c6:	f7fe f813 	bl	80015f0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d907      	bls.n	80035e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e15c      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
 80035d8:	40023800 	.word	0x40023800
 80035dc:	42470000 	.word	0x42470000
 80035e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	4b8a      	ldr	r3, [pc, #552]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80035e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ea      	bne.n	80035c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8097 	beq.w	800372c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003602:	4b83      	ldr	r3, [pc, #524]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	4b7f      	ldr	r3, [pc, #508]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	4a7e      	ldr	r2, [pc, #504]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	@ 0x40
 800361e:	4b7c      	ldr	r3, [pc, #496]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	4b79      	ldr	r3, [pc, #484]	@ (8003814 <HAL_RCC_OscConfig+0x4b0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d118      	bne.n	800366c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363a:	4b76      	ldr	r3, [pc, #472]	@ (8003814 <HAL_RCC_OscConfig+0x4b0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a75      	ldr	r2, [pc, #468]	@ (8003814 <HAL_RCC_OscConfig+0x4b0>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003646:	f7fd ffd3 	bl	80015f0 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fd ffcf 	bl	80015f0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e118      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	4b6c      	ldr	r3, [pc, #432]	@ (8003814 <HAL_RCC_OscConfig+0x4b0>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x31e>
 8003674:	4b66      	ldr	r3, [pc, #408]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003678:	4a65      	ldr	r2, [pc, #404]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003680:	e01c      	b.n	80036bc <HAL_RCC_OscConfig+0x358>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x340>
 800368a:	4b61      	ldr	r3, [pc, #388]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368e:	4a60      	ldr	r2, [pc, #384]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	6713      	str	r3, [r2, #112]	@ 0x70
 8003696:	4b5e      	ldr	r3, [pc, #376]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369a:	4a5d      	ldr	r2, [pc, #372]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0x358>
 80036a4:	4b5a      	ldr	r3, [pc, #360]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a8:	4a59      	ldr	r2, [pc, #356]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b0:	4b57      	ldr	r3, [pc, #348]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b4:	4a56      	ldr	r2, [pc, #344]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80036b6:	f023 0304 	bic.w	r3, r3, #4
 80036ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fd ff94 	bl	80015f0 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fd ff90 	bl	80015f0 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e0d7      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e2:	4b4b      	ldr	r3, [pc, #300]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ee      	beq.n	80036cc <HAL_RCC_OscConfig+0x368>
 80036ee:	e014      	b.n	800371a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f0:	f7fd ff7e 	bl	80015f0 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fd ff7a 	bl	80015f0 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0c1      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370e:	4b40      	ldr	r3, [pc, #256]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ee      	bne.n	80036f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b3b      	ldr	r3, [pc, #236]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	4a3a      	ldr	r2, [pc, #232]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800372a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80ad 	beq.w	8003890 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003736:	4b36      	ldr	r3, [pc, #216]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b08      	cmp	r3, #8
 8003740:	d060      	beq.n	8003804 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d145      	bne.n	80037d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b33      	ldr	r3, [pc, #204]	@ (8003818 <HAL_RCC_OscConfig+0x4b4>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd ff4e 	bl	80015f0 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003758:	f7fd ff4a 	bl	80015f0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e093      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	4b29      	ldr	r3, [pc, #164]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	3b01      	subs	r3, #1
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	071b      	lsls	r3, r3, #28
 80037a2:	491b      	ldr	r1, [pc, #108]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x4b4>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fd ff1f 	bl	80015f0 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b6:	f7fd ff1b 	bl	80015f0 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e064      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c8:	4b11      	ldr	r3, [pc, #68]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x452>
 80037d4:	e05c      	b.n	8003890 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d6:	4b10      	ldr	r3, [pc, #64]	@ (8003818 <HAL_RCC_OscConfig+0x4b4>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fd ff08 	bl	80015f0 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd ff04 	bl	80015f0 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e04d      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	4b06      	ldr	r3, [pc, #24]	@ (8003810 <HAL_RCC_OscConfig+0x4ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x480>
 8003802:	e045      	b.n	8003890 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d107      	bne.n	800381c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e040      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
 8003810:	40023800 	.word	0x40023800
 8003814:	40007000 	.word	0x40007000
 8003818:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800381c:	4b1f      	ldr	r3, [pc, #124]	@ (800389c <HAL_RCC_OscConfig+0x538>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d030      	beq.n	800388c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d129      	bne.n	800388c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d122      	bne.n	800388c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800384c:	4013      	ands	r3, r2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003852:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003854:	4293      	cmp	r3, r2
 8003856:	d119      	bne.n	800388c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	3b01      	subs	r3, #1
 8003866:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d10f      	bne.n	800388c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003876:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d107      	bne.n	800388c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023800 	.word	0x40023800

080038a0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e073      	b.n	800399a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	7f5b      	ldrb	r3, [r3, #29]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d105      	bne.n	80038c8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd faee 	bl	8000ea4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d055      	beq.n	8003988 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	22ca      	movs	r2, #202	@ 0xca
 80038e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2253      	movs	r2, #83	@ 0x53
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f92b 	bl	8003b48 <RTC_EnterInitMode>
 80038f2:	4603      	mov	r3, r0
 80038f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d12c      	bne.n	8003956 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800390a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800390e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6899      	ldr	r1, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6919      	ldr	r1, [r3, #16]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	041a      	lsls	r2, r3, #16
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f932 	bl	8003bb6 <RTC_ExitInitMode>
 8003952:	4603      	mov	r3, r0
 8003954:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d110      	bne.n	800397e <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800396a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699a      	ldr	r2, [r3, #24]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	22ff      	movs	r2, #255	@ 0xff
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24
 8003986:	e001      	b.n	800398c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800398c:	7bfb      	ldrb	r3, [r7, #15]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d102      	bne.n	8003998 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b086      	sub	sp, #24
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80039d4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80039d8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	0c1b      	lsrs	r3, r3, #16
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	0d9b      	lsrs	r3, r3, #22
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11a      	bne.n	8003a54 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f8ec 	bl	8003c00 <RTC_Bcd2ToByte>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f8e3 	bl	8003c00 <RTC_Bcd2ToByte>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	789b      	ldrb	r3, [r3, #2]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 f8da 	bl	8003c00 <RTC_Bcd2ToByte>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	461a      	mov	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b086      	sub	sp, #24
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	60f8      	str	r0, [r7, #12]
 8003a66:	60b9      	str	r1, [r7, #8]
 8003a68:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a78:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	0b5b      	lsrs	r3, r3, #13
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d11a      	bne.n	8003af2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	78db      	ldrb	r3, [r3, #3]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f000 f89d 	bl	8003c00 <RTC_Bcd2ToByte>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f894 	bl	8003c00 <RTC_Bcd2ToByte>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	789b      	ldrb	r3, [r3, #2]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f88b 	bl	8003c00 <RTC_Bcd2ToByte>
 8003aea:	4603      	mov	r3, r0
 8003aec:	461a      	mov	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b44 <HAL_RTC_WaitForSynchro+0x48>)
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b10:	f7fd fd6e 	bl	80015f0 <HAL_GetTick>
 8003b14:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b16:	e009      	b.n	8003b2c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b18:	f7fd fd6a 	bl	80015f0 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b26:	d901      	bls.n	8003b2c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e007      	b.n	8003b3c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0ee      	beq.n	8003b18 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	00017f5f 	.word	0x00017f5f

08003b48 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d122      	bne.n	8003bac <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b74:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b76:	f7fd fd3b 	bl	80015f0 <HAL_GetTick>
 8003b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b7c:	e00c      	b.n	8003b98 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b7e:	f7fd fd37 	bl	80015f0 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b8c:	d904      	bls.n	8003b98 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2204      	movs	r2, #4
 8003b92:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <RTC_EnterInitMode+0x64>
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d1e8      	bne.n	8003b7e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bd0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10a      	bne.n	8003bf6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff8b 	bl	8003afc <HAL_RTC_WaitForSynchro>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d004      	beq.n	8003bf6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2204      	movs	r2, #4
 8003bf0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b2db      	uxtb	r3, r3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e042      	b.n	8003cd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7fd faac 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2224      	movs	r2, #36	@ 0x24
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 ff95 	bl	8004bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ca4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	@ 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d162      	bne.n	8003dbc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <HAL_UART_Transmit_DMA+0x26>
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e05b      	b.n	8003dbe <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2221      	movs	r2, #33	@ 0x21
 8003d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d2a:	4a27      	ldr	r2, [pc, #156]	@ (8003dc8 <HAL_UART_Transmit_DMA+0xec>)
 8003d2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d32:	4a26      	ldr	r2, [pc, #152]	@ (8003dcc <HAL_UART_Transmit_DMA+0xf0>)
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3a:	4a25      	ldr	r2, [pc, #148]	@ (8003dd0 <HAL_UART_Transmit_DMA+0xf4>)
 8003d3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d42:	2200      	movs	r2, #0
 8003d44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	88fb      	ldrh	r3, [r7, #6]
 8003d5e:	f7fd fe37 	bl	80019d0 <HAL_DMA_Start_IT>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2210      	movs	r2, #16
 8003d6c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e021      	b.n	8003dbe <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3314      	adds	r3, #20
 8003d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	617b      	str	r3, [r7, #20]
   return(result);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003da4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6a39      	ldr	r1, [r7, #32]
 8003daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8003db8:	2300      	movs	r3, #0
 8003dba:	e000      	b.n	8003dbe <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003dbc:	2302      	movs	r3, #2
  }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3730      	adds	r7, #48	@ 0x30
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	0800442d 	.word	0x0800442d
 8003dcc:	080044c7 	.word	0x080044c7
 8003dd0:	0800464b 	.word	0x0800464b

08003dd4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	@ 0x30
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d146      	bne.n	8003e7c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e03f      	b.n	8003e7e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fc65 	bl	80046e0 <UART_Start_Receive_DMA>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d125      	bne.n	8003e70 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	330c      	adds	r3, #12
 8003e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	617b      	str	r3, [r7, #20]
   return(result);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f043 0310 	orr.w	r3, r3, #16
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	330c      	adds	r3, #12
 8003e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6a39      	ldr	r1, [r7, #32]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003e6e:	e002      	b.n	8003e76 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003e76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e7a:	e000      	b.n	8003e7e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3730      	adds	r7, #48	@ 0x30
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10f      	bne.n	8003eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_UART_IRQHandler+0x66>
 8003eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 fda4 	bl	8004a34 <UART_Receive_IT>
      return;
 8003eec:	e273      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80de 	beq.w	80040b4 <HAL_UART_IRQHandler+0x22c>
 8003ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 80d1 	beq.w	80040b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00b      	beq.n	8003f36 <HAL_UART_IRQHandler+0xae>
 8003f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_UART_IRQHandler+0xd2>
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_UART_IRQHandler+0xf6>
 8003f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d011      	beq.n	8003fae <HAL_UART_IRQHandler+0x126>
 8003f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d105      	bne.n	8003fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f043 0208 	orr.w	r2, r3, #8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 820a 	beq.w	80043cc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fbc:	f003 0320 	and.w	r3, r3, #32
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d008      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x14e>
 8003fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fd2f 	bl	8004a34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b40      	cmp	r3, #64	@ 0x40
 8003fe2:	bf0c      	ite	eq
 8003fe4:	2301      	moveq	r3, #1
 8003fe6:	2300      	movne	r3, #0
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d103      	bne.n	8004002 <HAL_UART_IRQHandler+0x17a>
 8003ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d04f      	beq.n	80040a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fc3a 	bl	800487c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004012:	2b40      	cmp	r3, #64	@ 0x40
 8004014:	d141      	bne.n	800409a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3314      	adds	r3, #20
 800401c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004024:	e853 3f00 	ldrex	r3, [r3]
 8004028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800402c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	3314      	adds	r3, #20
 800403e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004042:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800404e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004052:	e841 2300 	strex	r3, r2, [r1]
 8004056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800405a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1d9      	bne.n	8004016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004066:	2b00      	cmp	r3, #0
 8004068:	d013      	beq.n	8004092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	4a8a      	ldr	r2, [pc, #552]	@ (8004298 <HAL_UART_IRQHandler+0x410>)
 8004070:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004076:	4618      	mov	r0, r3
 8004078:	f7fd fd72 	bl	8001b60 <HAL_DMA_Abort_IT>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d016      	beq.n	80040b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800408c:	4610      	mov	r0, r2
 800408e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	e00e      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9c0 	bl	8004418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004098:	e00a      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f9bc 	bl	8004418 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a0:	e006      	b.n	80040b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9b8 	bl	8004418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040ae:	e18d      	b.n	80043cc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b0:	bf00      	nop
    return;
 80040b2:	e18b      	b.n	80043cc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f040 8167 	bne.w	800438c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8160 	beq.w	800438c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80040cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f000 8159 	beq.w	800438c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fa:	2b40      	cmp	r3, #64	@ 0x40
 80040fc:	f040 80ce 	bne.w	800429c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800410c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a9 	beq.w	8004268 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800411a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800411e:	429a      	cmp	r2, r3
 8004120:	f080 80a2 	bcs.w	8004268 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800412a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004136:	f000 8088 	beq.w	800424a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	330c      	adds	r3, #12
 8004140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004166:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800416a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800417e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1d9      	bne.n	800413a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3314      	adds	r3, #20
 800418c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3314      	adds	r3, #20
 80041a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e1      	bne.n	8004186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3314      	adds	r3, #20
 80041c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3314      	adds	r3, #20
 80041e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041ee:	e841 2300 	strex	r3, r2, [r1]
 80041f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1e3      	bne.n	80041c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2220      	movs	r2, #32
 80041fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	330c      	adds	r3, #12
 800420e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004212:	e853 3f00 	ldrex	r3, [r3]
 8004216:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421a:	f023 0310 	bic.w	r3, r3, #16
 800421e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	330c      	adds	r3, #12
 8004228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800422c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800422e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004232:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800423a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e3      	bne.n	8004208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004244:	4618      	mov	r0, r3
 8004246:	f7fd fc1b 	bl	8001a80 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004258:	b29b      	uxth	r3, r3
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	b29b      	uxth	r3, r3
 800425e:	4619      	mov	r1, r3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fc fd8d 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004266:	e0b3      	b.n	80043d0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800426c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004270:	429a      	cmp	r2, r3
 8004272:	f040 80ad 	bne.w	80043d0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004280:	f040 80a6 	bne.w	80043d0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7fc fd75 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
      return;
 8004296:	e09b      	b.n	80043d0 <HAL_UART_IRQHandler+0x548>
 8004298:	08004943 	.word	0x08004943
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 808e 	beq.w	80043d4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80042b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8089 	beq.w	80043d4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042cc:	e853 3f00 	ldrex	r3, [r3]
 80042d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ee:	e841 2300 	strex	r3, r2, [r1]
 80042f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1e3      	bne.n	80042c2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3314      	adds	r3, #20
 8004300:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	623b      	str	r3, [r7, #32]
   return(result);
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f023 0301 	bic.w	r3, r3, #1
 8004310:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3314      	adds	r3, #20
 800431a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800431e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004320:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e3      	bne.n	80042fa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	330c      	adds	r3, #12
 8004346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	e853 3f00 	ldrex	r3, [r3]
 800434e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0310 	bic.w	r3, r3, #16
 8004356:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004364:	61fa      	str	r2, [r7, #28]
 8004366:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	69b9      	ldr	r1, [r7, #24]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	617b      	str	r3, [r7, #20]
   return(result);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e3      	bne.n	8004340 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2202      	movs	r2, #2
 800437c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800437e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fc fcfb 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800438a:	e023      	b.n	80043d4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800438c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004394:	2b00      	cmp	r3, #0
 8004396:	d009      	beq.n	80043ac <HAL_UART_IRQHandler+0x524>
 8004398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800439c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fadd 	bl	8004964 <UART_Transmit_IT>
    return;
 80043aa:	e014      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <HAL_UART_IRQHandler+0x54e>
 80043b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fb1d 	bl	8004a04 <UART_EndTransmit_IT>
    return;
 80043ca:	e004      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
    return;
 80043cc:	bf00      	nop
 80043ce:	e002      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <HAL_UART_IRQHandler+0x54e>
      return;
 80043d4:	bf00      	nop
  }
}
 80043d6:	37e8      	adds	r7, #232	@ 0xe8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b090      	sub	sp, #64	@ 0x40
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d137      	bne.n	80044b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800444a:	2200      	movs	r2, #0
 800444c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800444e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3314      	adds	r3, #20
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	e853 3f00 	ldrex	r3, [r3]
 800445c:	623b      	str	r3, [r7, #32]
   return(result);
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004464:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800446e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004472:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004476:	e841 2300 	strex	r3, r2, [r1]
 800447a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1e5      	bne.n	800444e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	330c      	adds	r3, #12
 8004488:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	e853 3f00 	ldrex	r3, [r3]
 8004490:	60fb      	str	r3, [r7, #12]
   return(result);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004498:	637b      	str	r3, [r7, #52]	@ 0x34
 800449a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a2:	61fa      	str	r2, [r7, #28]
 80044a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a6:	69b9      	ldr	r1, [r7, #24]
 80044a8:	69fa      	ldr	r2, [r7, #28]
 80044aa:	e841 2300 	strex	r3, r2, [r1]
 80044ae:	617b      	str	r3, [r7, #20]
   return(result);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e5      	bne.n	8004482 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044b6:	e002      	b.n	80044be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80044b8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80044ba:	f7fc fc49 	bl	8000d50 <HAL_UART_TxCpltCallback>
}
 80044be:	bf00      	nop
 80044c0:	3740      	adds	r7, #64	@ 0x40
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff ff81 	bl	80043dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044da:	bf00      	nop
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b09c      	sub	sp, #112	@ 0x70
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d172      	bne.n	80045e4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004500:	2200      	movs	r2, #0
 8004502:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800451a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800451c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004524:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004526:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800452a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3314      	adds	r3, #20
 8004556:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004558:	647a      	str	r2, [r7, #68]	@ 0x44
 800455a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800455e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e5      	bne.n	8004538 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	3314      	adds	r3, #20
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	623b      	str	r3, [r7, #32]
   return(result);
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004582:	663b      	str	r3, [r7, #96]	@ 0x60
 8004584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800458c:	633a      	str	r2, [r7, #48]	@ 0x30
 800458e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800459a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e5      	bne.n	800456c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d119      	bne.n	80045e4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	330c      	adds	r3, #12
 80045b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	e853 3f00 	ldrex	r3, [r3]
 80045be:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0310 	bic.w	r3, r3, #16
 80045c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	330c      	adds	r3, #12
 80045ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80045d0:	61fa      	str	r2, [r7, #28]
 80045d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	69b9      	ldr	r1, [r7, #24]
 80045d6:	69fa      	ldr	r2, [r7, #28]
 80045d8:	e841 2300 	strex	r3, r2, [r1]
 80045dc:	617b      	str	r3, [r7, #20]
   return(result);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1e5      	bne.n	80045b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045e6:	2200      	movs	r2, #0
 80045e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d106      	bne.n	8004600 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045f6:	4619      	mov	r1, r3
 80045f8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045fa:	f7fc fbc1 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045fe:	e002      	b.n	8004606 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004600:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004602:	f7ff fef5 	bl	80043f0 <HAL_UART_RxCpltCallback>
}
 8004606:	bf00      	nop
 8004608:	3770      	adds	r7, #112	@ 0x70
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004626:	2b01      	cmp	r3, #1
 8004628:	d108      	bne.n	800463c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800462e:	085b      	lsrs	r3, r3, #1
 8004630:	b29b      	uxth	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f7fc fba3 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800463a:	e002      	b.n	8004642 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f7ff fee1 	bl	8004404 <HAL_UART_RxHalfCpltCallback>
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800464a:	b580      	push	{r7, lr}
 800464c:	b084      	sub	sp, #16
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004666:	2b80      	cmp	r3, #128	@ 0x80
 8004668:	bf0c      	ite	eq
 800466a:	2301      	moveq	r3, #1
 800466c:	2300      	movne	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b21      	cmp	r3, #33	@ 0x21
 800467c:	d108      	bne.n	8004690 <UART_DMAError+0x46>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2200      	movs	r2, #0
 8004688:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800468a:	68b8      	ldr	r0, [r7, #8]
 800468c:	f000 f8ce 	bl	800482c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	bf0c      	ite	eq
 800469e:	2301      	moveq	r3, #1
 80046a0:	2300      	movne	r3, #0
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b22      	cmp	r3, #34	@ 0x22
 80046b0:	d108      	bne.n	80046c4 <UART_DMAError+0x7a>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2200      	movs	r2, #0
 80046bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80046be:	68b8      	ldr	r0, [r7, #8]
 80046c0:	f000 f8dc 	bl	800487c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c8:	f043 0210 	orr.w	r2, r3, #16
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046d0:	68b8      	ldr	r0, [r7, #8]
 80046d2:	f7ff fea1 	bl	8004418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b098      	sub	sp, #96	@ 0x60
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	88fa      	ldrh	r2, [r7, #6]
 80046f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2222      	movs	r2, #34	@ 0x22
 8004704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470c:	4a44      	ldr	r2, [pc, #272]	@ (8004820 <UART_Start_Receive_DMA+0x140>)
 800470e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	4a43      	ldr	r2, [pc, #268]	@ (8004824 <UART_Start_Receive_DMA+0x144>)
 8004716:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471c:	4a42      	ldr	r2, [pc, #264]	@ (8004828 <UART_Start_Receive_DMA+0x148>)
 800471e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004724:	2200      	movs	r2, #0
 8004726:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	f7fd f946 	bl	80019d0 <HAL_DMA_Start_IT>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2210      	movs	r2, #16
 800474e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2220      	movs	r2, #32
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e05d      	b.n	8004818 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d019      	beq.n	80047ae <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	330c      	adds	r3, #12
 8004780:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800478a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004790:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	330c      	adds	r3, #12
 8004798:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800479a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800479c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80047a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3314      	adds	r3, #20
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3314      	adds	r3, #20
 80047cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80047d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1e5      	bne.n	80047ae <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3314      	adds	r3, #20
 80047e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	617b      	str	r3, [r7, #20]
   return(result);
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3314      	adds	r3, #20
 8004800:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004802:	627a      	str	r2, [r7, #36]	@ 0x24
 8004804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6a39      	ldr	r1, [r7, #32]
 8004808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e5      	bne.n	80047e2 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3760      	adds	r7, #96	@ 0x60
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	080044e3 	.word	0x080044e3
 8004824:	0800460f 	.word	0x0800460f
 8004828:	0800464b 	.word	0x0800464b

0800482c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800482c:	b480      	push	{r7}
 800482e:	b089      	sub	sp, #36	@ 0x24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	330c      	adds	r3, #12
 800483a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	60bb      	str	r3, [r7, #8]
   return(result);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	330c      	adds	r3, #12
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	61ba      	str	r2, [r7, #24]
 8004856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6979      	ldr	r1, [r7, #20]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	613b      	str	r3, [r7, #16]
   return(result);
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004870:	bf00      	nop
 8004872:	3724      	adds	r7, #36	@ 0x24
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b095      	sub	sp, #84	@ 0x54
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800489a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80048a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e5      	bne.n	8004884 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3314      	adds	r3, #20
 80048be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	f023 0301 	bic.w	r3, r3, #1
 80048ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3314      	adds	r3, #20
 80048d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048e0:	e841 2300 	strex	r3, r2, [r1]
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1e5      	bne.n	80048b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d119      	bne.n	8004928 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	60bb      	str	r3, [r7, #8]
   return(result);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f023 0310 	bic.w	r3, r3, #16
 800490a:	647b      	str	r3, [r7, #68]	@ 0x44
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	330c      	adds	r3, #12
 8004912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004914:	61ba      	str	r2, [r7, #24]
 8004916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6979      	ldr	r1, [r7, #20]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	613b      	str	r3, [r7, #16]
   return(result);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e5      	bne.n	80048f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004936:	bf00      	nop
 8004938:	3754      	adds	r7, #84	@ 0x54
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f7ff fd5e 	bl	8004418 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b21      	cmp	r3, #33	@ 0x21
 8004976:	d13e      	bne.n	80049f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004980:	d114      	bne.n	80049ac <UART_Transmit_IT+0x48>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d110      	bne.n	80049ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a1b      	ldr	r3, [r3, #32]
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	621a      	str	r2, [r3, #32]
 80049aa:	e008      	b.n	80049be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	1c59      	adds	r1, r3, #1
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6211      	str	r1, [r2, #32]
 80049b6:	781a      	ldrb	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	4619      	mov	r1, r3
 80049cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10f      	bne.n	80049f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e000      	b.n	80049f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049f6:	2302      	movs	r3, #2
  }
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f7fc f993 	bl	8000d50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	@ 0x30
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b22      	cmp	r3, #34	@ 0x22
 8004a4e:	f040 80aa 	bne.w	8004ba6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5a:	d115      	bne.n	8004a88 <UART_Receive_IT+0x54>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d111      	bne.n	8004a88 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a86:	e024      	b.n	8004ad2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a96:	d007      	beq.n	8004aa8 <UART_Receive_IT+0x74>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <UART_Receive_IT+0x82>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e008      	b.n	8004ac8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ac6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4619      	mov	r1, r3
 8004ae0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d15d      	bne.n	8004ba2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0220 	bic.w	r2, r2, #32
 8004af4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2220      	movs	r2, #32
 8004b1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d135      	bne.n	8004b98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	613b      	str	r3, [r7, #16]
   return(result);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f023 0310 	bic.w	r3, r3, #16
 8004b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b52:	623a      	str	r2, [r7, #32]
 8004b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	69f9      	ldr	r1, [r7, #28]
 8004b58:	6a3a      	ldr	r2, [r7, #32]
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e5      	bne.n	8004b32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d10a      	bne.n	8004b8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f7fc f8f5 	bl	8000d80 <HAL_UARTEx_RxEventCallback>
 8004b96:	e002      	b.n	8004b9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff fc29 	bl	80043f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e002      	b.n	8004ba8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3730      	adds	r7, #48	@ 0x30
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb4:	b0c0      	sub	sp, #256	@ 0x100
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	68d9      	ldr	r1, [r3, #12]
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	ea40 0301 	orr.w	r3, r0, r1
 8004bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c08:	f021 010c 	bic.w	r1, r1, #12
 8004c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c16:	430b      	orrs	r3, r1
 8004c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2a:	6999      	ldr	r1, [r3, #24]
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	ea40 0301 	orr.w	r3, r0, r1
 8004c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8004e7c <UART_SetConfig+0x2cc>)
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d005      	beq.n	8004c50 <UART_SetConfig+0xa0>
 8004c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004e80 <UART_SetConfig+0x2d0>)
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d104      	bne.n	8004c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c50:	f7fd fe1a 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 8004c54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c58:	e003      	b.n	8004c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c5a:	f7fd fe01 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8004c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c6c:	f040 810c 	bne.w	8004e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c82:	4622      	mov	r2, r4
 8004c84:	462b      	mov	r3, r5
 8004c86:	1891      	adds	r1, r2, r2
 8004c88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c8a:	415b      	adcs	r3, r3
 8004c8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c92:	4621      	mov	r1, r4
 8004c94:	eb12 0801 	adds.w	r8, r2, r1
 8004c98:	4629      	mov	r1, r5
 8004c9a:	eb43 0901 	adc.w	r9, r3, r1
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cb2:	4690      	mov	r8, r2
 8004cb4:	4699      	mov	r9, r3
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	eb18 0303 	adds.w	r3, r8, r3
 8004cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cc0:	462b      	mov	r3, r5
 8004cc2:	eb49 0303 	adc.w	r3, r9, r3
 8004cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cde:	460b      	mov	r3, r1
 8004ce0:	18db      	adds	r3, r3, r3
 8004ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	eb42 0303 	adc.w	r3, r2, r3
 8004cea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004cf4:	f7fb fae4 	bl	80002c0 <__aeabi_uldivmod>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4b61      	ldr	r3, [pc, #388]	@ (8004e84 <UART_SetConfig+0x2d4>)
 8004cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	011c      	lsls	r4, r3, #4
 8004d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	464b      	mov	r3, r9
 8004d1c:	1891      	adds	r1, r2, r2
 8004d1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d20:	415b      	adcs	r3, r3
 8004d22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d28:	4641      	mov	r1, r8
 8004d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d2e:	4649      	mov	r1, r9
 8004d30:	eb43 0b01 	adc.w	fp, r3, r1
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d48:	4692      	mov	sl, r2
 8004d4a:	469b      	mov	fp, r3
 8004d4c:	4643      	mov	r3, r8
 8004d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d56:	464b      	mov	r3, r9
 8004d58:	eb4b 0303 	adc.w	r3, fp, r3
 8004d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d74:	460b      	mov	r3, r1
 8004d76:	18db      	adds	r3, r3, r3
 8004d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	eb42 0303 	adc.w	r3, r2, r3
 8004d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d8a:	f7fb fa99 	bl	80002c0 <__aeabi_uldivmod>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	4b3b      	ldr	r3, [pc, #236]	@ (8004e84 <UART_SetConfig+0x2d4>)
 8004d96:	fba3 2301 	umull	r2, r3, r3, r1
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2264      	movs	r2, #100	@ 0x64
 8004d9e:	fb02 f303 	mul.w	r3, r2, r3
 8004da2:	1acb      	subs	r3, r1, r3
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004daa:	4b36      	ldr	r3, [pc, #216]	@ (8004e84 <UART_SetConfig+0x2d4>)
 8004dac:	fba3 2302 	umull	r2, r3, r3, r2
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	005b      	lsls	r3, r3, #1
 8004db4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004db8:	441c      	add	r4, r3
 8004dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	1891      	adds	r1, r2, r2
 8004dd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004dd4:	415b      	adcs	r3, r3
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ddc:	4641      	mov	r1, r8
 8004dde:	1851      	adds	r1, r2, r1
 8004de0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004de2:	4649      	mov	r1, r9
 8004de4:	414b      	adcs	r3, r1
 8004de6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004df4:	4659      	mov	r1, fp
 8004df6:	00cb      	lsls	r3, r1, #3
 8004df8:	4651      	mov	r1, sl
 8004dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfe:	4651      	mov	r1, sl
 8004e00:	00ca      	lsls	r2, r1, #3
 8004e02:	4610      	mov	r0, r2
 8004e04:	4619      	mov	r1, r3
 8004e06:	4603      	mov	r3, r0
 8004e08:	4642      	mov	r2, r8
 8004e0a:	189b      	adds	r3, r3, r2
 8004e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e10:	464b      	mov	r3, r9
 8004e12:	460a      	mov	r2, r1
 8004e14:	eb42 0303 	adc.w	r3, r2, r3
 8004e18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e30:	460b      	mov	r3, r1
 8004e32:	18db      	adds	r3, r3, r3
 8004e34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e36:	4613      	mov	r3, r2
 8004e38:	eb42 0303 	adc.w	r3, r2, r3
 8004e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e46:	f7fb fa3b 	bl	80002c0 <__aeabi_uldivmod>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <UART_SetConfig+0x2d4>)
 8004e50:	fba3 1302 	umull	r1, r3, r3, r2
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	2164      	movs	r1, #100	@ 0x64
 8004e58:	fb01 f303 	mul.w	r3, r1, r3
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	3332      	adds	r3, #50	@ 0x32
 8004e62:	4a08      	ldr	r2, [pc, #32]	@ (8004e84 <UART_SetConfig+0x2d4>)
 8004e64:	fba2 2303 	umull	r2, r3, r2, r3
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	f003 0207 	and.w	r2, r3, #7
 8004e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4422      	add	r2, r4
 8004e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e78:	e106      	b.n	8005088 <UART_SetConfig+0x4d8>
 8004e7a:	bf00      	nop
 8004e7c:	40011000 	.word	0x40011000
 8004e80:	40011400 	.word	0x40011400
 8004e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e9a:	4642      	mov	r2, r8
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	1891      	adds	r1, r2, r2
 8004ea0:	6239      	str	r1, [r7, #32]
 8004ea2:	415b      	adcs	r3, r3
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eaa:	4641      	mov	r1, r8
 8004eac:	1854      	adds	r4, r2, r1
 8004eae:	4649      	mov	r1, r9
 8004eb0:	eb43 0501 	adc.w	r5, r3, r1
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	00eb      	lsls	r3, r5, #3
 8004ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ec2:	00e2      	lsls	r2, r4, #3
 8004ec4:	4614      	mov	r4, r2
 8004ec6:	461d      	mov	r5, r3
 8004ec8:	4643      	mov	r3, r8
 8004eca:	18e3      	adds	r3, r4, r3
 8004ecc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	eb45 0303 	adc.w	r3, r5, r3
 8004ed6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ee6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	f04f 0300 	mov.w	r3, #0
 8004ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	008b      	lsls	r3, r1, #2
 8004efa:	4621      	mov	r1, r4
 8004efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f00:	4621      	mov	r1, r4
 8004f02:	008a      	lsls	r2, r1, #2
 8004f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f08:	f7fb f9da 	bl	80002c0 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4b60      	ldr	r3, [pc, #384]	@ (8005094 <UART_SetConfig+0x4e4>)
 8004f12:	fba3 2302 	umull	r2, r3, r3, r2
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	011c      	lsls	r4, r3, #4
 8004f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	1891      	adds	r1, r2, r2
 8004f32:	61b9      	str	r1, [r7, #24]
 8004f34:	415b      	adcs	r3, r3
 8004f36:	61fb      	str	r3, [r7, #28]
 8004f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f3c:	4641      	mov	r1, r8
 8004f3e:	1851      	adds	r1, r2, r1
 8004f40:	6139      	str	r1, [r7, #16]
 8004f42:	4649      	mov	r1, r9
 8004f44:	414b      	adcs	r3, r1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	f04f 0300 	mov.w	r3, #0
 8004f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f54:	4659      	mov	r1, fp
 8004f56:	00cb      	lsls	r3, r1, #3
 8004f58:	4651      	mov	r1, sl
 8004f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5e:	4651      	mov	r1, sl
 8004f60:	00ca      	lsls	r2, r1, #3
 8004f62:	4610      	mov	r0, r2
 8004f64:	4619      	mov	r1, r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	4642      	mov	r2, r8
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f70:	464b      	mov	r3, r9
 8004f72:	460a      	mov	r2, r1
 8004f74:	eb42 0303 	adc.w	r3, r2, r3
 8004f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f94:	4649      	mov	r1, r9
 8004f96:	008b      	lsls	r3, r1, #2
 8004f98:	4641      	mov	r1, r8
 8004f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f9e:	4641      	mov	r1, r8
 8004fa0:	008a      	lsls	r2, r1, #2
 8004fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fa6:	f7fb f98b 	bl	80002c0 <__aeabi_uldivmod>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4b38      	ldr	r3, [pc, #224]	@ (8005094 <UART_SetConfig+0x4e4>)
 8004fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2264      	movs	r2, #100	@ 0x64
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
 8004fbe:	1acb      	subs	r3, r1, r3
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	3332      	adds	r3, #50	@ 0x32
 8004fc4:	4a33      	ldr	r2, [pc, #204]	@ (8005094 <UART_SetConfig+0x4e4>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fd0:	441c      	add	r4, r3
 8004fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fda:	677a      	str	r2, [r7, #116]	@ 0x74
 8004fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	1891      	adds	r1, r2, r2
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	415b      	adcs	r3, r3
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	1851      	adds	r1, r2, r1
 8004ff4:	6039      	str	r1, [r7, #0]
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	414b      	adcs	r3, r1
 8004ffa:	607b      	str	r3, [r7, #4]
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005008:	4659      	mov	r1, fp
 800500a:	00cb      	lsls	r3, r1, #3
 800500c:	4651      	mov	r1, sl
 800500e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005012:	4651      	mov	r1, sl
 8005014:	00ca      	lsls	r2, r1, #3
 8005016:	4610      	mov	r0, r2
 8005018:	4619      	mov	r1, r3
 800501a:	4603      	mov	r3, r0
 800501c:	4642      	mov	r2, r8
 800501e:	189b      	adds	r3, r3, r2
 8005020:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005022:	464b      	mov	r3, r9
 8005024:	460a      	mov	r2, r1
 8005026:	eb42 0303 	adc.w	r3, r2, r3
 800502a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	663b      	str	r3, [r7, #96]	@ 0x60
 8005036:	667a      	str	r2, [r7, #100]	@ 0x64
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005044:	4649      	mov	r1, r9
 8005046:	008b      	lsls	r3, r1, #2
 8005048:	4641      	mov	r1, r8
 800504a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800504e:	4641      	mov	r1, r8
 8005050:	008a      	lsls	r2, r1, #2
 8005052:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005056:	f7fb f933 	bl	80002c0 <__aeabi_uldivmod>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <UART_SetConfig+0x4e4>)
 8005060:	fba3 1302 	umull	r1, r3, r3, r2
 8005064:	095b      	lsrs	r3, r3, #5
 8005066:	2164      	movs	r1, #100	@ 0x64
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	3332      	adds	r3, #50	@ 0x32
 8005072:	4a08      	ldr	r2, [pc, #32]	@ (8005094 <UART_SetConfig+0x4e4>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	f003 020f 	and.w	r2, r3, #15
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4422      	add	r2, r4
 8005086:	609a      	str	r2, [r3, #8]
}
 8005088:	bf00      	nop
 800508a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800508e:	46bd      	mov	sp, r7
 8005090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005094:	51eb851f 	.word	0x51eb851f

08005098 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005098:	b084      	sub	sp, #16
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	f107 001c 	add.w	r0, r7, #28
 80050a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d123      	bne.n	80050fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80050c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d105      	bne.n	80050ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fa9a 	bl	8005628 <USB_CoreReset>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]
 80050f8:	e01b      	b.n	8005132 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa8e 	bl	8005628 <USB_CoreReset>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005110:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005114:	2b00      	cmp	r3, #0
 8005116:	d106      	bne.n	8005126 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	@ 0x38
 8005124:	e005      	b.n	8005132 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005132:	7fbb      	ldrb	r3, [r7, #30]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d10b      	bne.n	8005150 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f043 0206 	orr.w	r2, r3, #6
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f043 0220 	orr.w	r2, r3, #32
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr

08005160 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f023 0201 	bic.w	r2, r3, #1
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d115      	bne.n	80051d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051b0:	200a      	movs	r0, #10
 80051b2:	f7fc fa29 	bl	8001608 <HAL_Delay>
      ms += 10U;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	330a      	adds	r3, #10
 80051ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 fa25 	bl	800560c <USB_GetMode>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d01e      	beq.n	8005206 <USB_SetCurrentMode+0x84>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80051cc:	d9f0      	bls.n	80051b0 <USB_SetCurrentMode+0x2e>
 80051ce:	e01a      	b.n	8005206 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d115      	bne.n	8005202 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051e2:	200a      	movs	r0, #10
 80051e4:	f7fc fa10 	bl	8001608 <HAL_Delay>
      ms += 10U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	330a      	adds	r3, #10
 80051ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa0c 	bl	800560c <USB_GetMode>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <USB_SetCurrentMode+0x84>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80051fe:	d9f0      	bls.n	80051e2 <USB_SetCurrentMode+0x60>
 8005200:	e001      	b.n	8005206 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e005      	b.n	8005212 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2bc8      	cmp	r3, #200	@ 0xc8
 800520a:	d101      	bne.n	8005210 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e000      	b.n	8005212 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800521c:	b084      	sub	sp, #16
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800522a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e009      	b.n	8005250 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3340      	adds	r3, #64	@ 0x40
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	2200      	movs	r2, #0
 8005248:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	3301      	adds	r3, #1
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0e      	cmp	r3, #14
 8005254:	d9f2      	bls.n	800523c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005256:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800525a:	2b00      	cmp	r3, #0
 800525c:	d11c      	bne.n	8005298 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005276:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e005      	b.n	80052a4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052aa:	461a      	mov	r2, r3
 80052ac:	2300      	movs	r3, #0
 80052ae:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052b0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d10d      	bne.n	80052d4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052c0:	2100      	movs	r1, #0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f968 	bl	8005598 <USB_SetDevSpeed>
 80052c8:	e008      	b.n	80052dc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052ca:	2101      	movs	r1, #1
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f963 	bl	8005598 <USB_SetDevSpeed>
 80052d2:	e003      	b.n	80052dc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80052d4:	2103      	movs	r1, #3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f95e 	bl	8005598 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80052dc:	2110      	movs	r1, #16
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8fa 	bl	80054d8 <USB_FlushTxFifo>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f924 	bl	800553c <USB_FlushRxFifo>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005304:	461a      	mov	r2, r3
 8005306:	2300      	movs	r3, #0
 8005308:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800531c:	461a      	mov	r2, r3
 800531e:	2300      	movs	r3, #0
 8005320:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	e043      	b.n	80053b0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800533a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800533e:	d118      	bne.n	8005372 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005352:	461a      	mov	r2, r3
 8005354:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e013      	b.n	8005384 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005368:	461a      	mov	r2, r3
 800536a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	e008      	b.n	8005384 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	461a      	mov	r2, r3
 8005380:	2300      	movs	r3, #0
 8005382:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	015a      	lsls	r2, r3, #5
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005390:	461a      	mov	r2, r3
 8005392:	2300      	movs	r3, #0
 8005394:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a2:	461a      	mov	r2, r3
 80053a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3301      	adds	r3, #1
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053b4:	461a      	mov	r2, r3
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d3b5      	bcc.n	8005328 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e043      	b.n	800544a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053d8:	d118      	bne.n	800540c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ec:	461a      	mov	r2, r3
 80053ee:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	e013      	b.n	800541e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005402:	461a      	mov	r2, r3
 8005404:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	e008      	b.n	800541e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	2300      	movs	r3, #0
 800541c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542a:	461a      	mov	r2, r3
 800542c:	2300      	movs	r3, #0
 800542e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800543c:	461a      	mov	r2, r3
 800543e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005442:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	3301      	adds	r3, #1
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800544e:	461a      	mov	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4293      	cmp	r3, r2
 8005454:	d3b5      	bcc.n	80053c2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	68fa      	ldr	r2, [r7, #12]
 8005460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005468:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005476:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005478:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	f043 0210 	orr.w	r2, r3, #16
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	4b10      	ldr	r3, [pc, #64]	@ (80054d4 <USB_DevInit+0x2b8>)
 8005492:	4313      	orrs	r3, r2
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005498:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f043 0208 	orr.w	r2, r3, #8
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054ac:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d107      	bne.n	80054c4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054bc:	f043 0304 	orr.w	r3, r3, #4
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054d0:	b004      	add	sp, #16
 80054d2:	4770      	bx	lr
 80054d4:	803c3800 	.word	0x803c3800

080054d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054f2:	d901      	bls.n	80054f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e01b      	b.n	8005530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	daf2      	bge.n	80054e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	019b      	lsls	r3, r3, #6
 8005508:	f043 0220 	orr.w	r2, r3, #32
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	3301      	adds	r3, #1
 8005514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800551c:	d901      	bls.n	8005522 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e006      	b.n	8005530 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0320 	and.w	r3, r3, #32
 800552a:	2b20      	cmp	r3, #32
 800552c:	d0f0      	beq.n	8005510 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3714      	adds	r7, #20
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3301      	adds	r3, #1
 800554c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005554:	d901      	bls.n	800555a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e018      	b.n	800558c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	daf2      	bge.n	8005548 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005562:	2300      	movs	r3, #0
 8005564:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2210      	movs	r2, #16
 800556a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005578:	d901      	bls.n	800557e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e006      	b.n	800558c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b10      	cmp	r3, #16
 8005588:	d0f0      	beq.n	800556c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055b8:	4313      	orrs	r3, r2
 80055ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055e4:	f023 0303 	bic.w	r3, r3, #3
 80055e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055f8:	f043 0302 	orr.w	r3, r3, #2
 80055fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0301 	and.w	r3, r3, #1
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3301      	adds	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005640:	d901      	bls.n	8005646 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e022      	b.n	800568c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	daf2      	bge.n	8005634 <USB_CoreReset+0xc>

  count = 10U;
 800564e:	230a      	movs	r3, #10
 8005650:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005652:	e002      	b.n	800565a <USB_CoreReset+0x32>
  {
    count--;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b01      	subs	r3, #1
 8005658:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f9      	bne.n	8005654 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	f043 0201 	orr.w	r2, r3, #1
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	3301      	adds	r3, #1
 8005670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005678:	d901      	bls.n	800567e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e006      	b.n	800568c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b01      	cmp	r3, #1
 8005688:	d0f0      	beq.n	800566c <USB_CoreReset+0x44>

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <std>:
 8005698:	2300      	movs	r3, #0
 800569a:	b510      	push	{r4, lr}
 800569c:	4604      	mov	r4, r0
 800569e:	e9c0 3300 	strd	r3, r3, [r0]
 80056a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056a6:	6083      	str	r3, [r0, #8]
 80056a8:	8181      	strh	r1, [r0, #12]
 80056aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80056ac:	81c2      	strh	r2, [r0, #14]
 80056ae:	6183      	str	r3, [r0, #24]
 80056b0:	4619      	mov	r1, r3
 80056b2:	2208      	movs	r2, #8
 80056b4:	305c      	adds	r0, #92	@ 0x5c
 80056b6:	f000 fa51 	bl	8005b5c <memset>
 80056ba:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <std+0x58>)
 80056bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80056be:	4b0d      	ldr	r3, [pc, #52]	@ (80056f4 <std+0x5c>)
 80056c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056c2:	4b0d      	ldr	r3, [pc, #52]	@ (80056f8 <std+0x60>)
 80056c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <std+0x64>)
 80056c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80056ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005700 <std+0x68>)
 80056cc:	6224      	str	r4, [r4, #32]
 80056ce:	429c      	cmp	r4, r3
 80056d0:	d006      	beq.n	80056e0 <std+0x48>
 80056d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056d6:	4294      	cmp	r4, r2
 80056d8:	d002      	beq.n	80056e0 <std+0x48>
 80056da:	33d0      	adds	r3, #208	@ 0xd0
 80056dc:	429c      	cmp	r4, r3
 80056de:	d105      	bne.n	80056ec <std+0x54>
 80056e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e8:	f000 bab0 	b.w	8005c4c <__retarget_lock_init_recursive>
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	bf00      	nop
 80056f0:	080059ad 	.word	0x080059ad
 80056f4:	080059cf 	.word	0x080059cf
 80056f8:	08005a07 	.word	0x08005a07
 80056fc:	08005a2b 	.word	0x08005a2b
 8005700:	20001398 	.word	0x20001398

08005704 <stdio_exit_handler>:
 8005704:	4a02      	ldr	r2, [pc, #8]	@ (8005710 <stdio_exit_handler+0xc>)
 8005706:	4903      	ldr	r1, [pc, #12]	@ (8005714 <stdio_exit_handler+0x10>)
 8005708:	4803      	ldr	r0, [pc, #12]	@ (8005718 <stdio_exit_handler+0x14>)
 800570a:	f000 b869 	b.w	80057e0 <_fwalk_sglue>
 800570e:	bf00      	nop
 8005710:	20000010 	.word	0x20000010
 8005714:	080067b5 	.word	0x080067b5
 8005718:	20000020 	.word	0x20000020

0800571c <cleanup_stdio>:
 800571c:	6841      	ldr	r1, [r0, #4]
 800571e:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <cleanup_stdio+0x34>)
 8005720:	4299      	cmp	r1, r3
 8005722:	b510      	push	{r4, lr}
 8005724:	4604      	mov	r4, r0
 8005726:	d001      	beq.n	800572c <cleanup_stdio+0x10>
 8005728:	f001 f844 	bl	80067b4 <_fflush_r>
 800572c:	68a1      	ldr	r1, [r4, #8]
 800572e:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <cleanup_stdio+0x38>)
 8005730:	4299      	cmp	r1, r3
 8005732:	d002      	beq.n	800573a <cleanup_stdio+0x1e>
 8005734:	4620      	mov	r0, r4
 8005736:	f001 f83d 	bl	80067b4 <_fflush_r>
 800573a:	68e1      	ldr	r1, [r4, #12]
 800573c:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <cleanup_stdio+0x3c>)
 800573e:	4299      	cmp	r1, r3
 8005740:	d004      	beq.n	800574c <cleanup_stdio+0x30>
 8005742:	4620      	mov	r0, r4
 8005744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005748:	f001 b834 	b.w	80067b4 <_fflush_r>
 800574c:	bd10      	pop	{r4, pc}
 800574e:	bf00      	nop
 8005750:	20001398 	.word	0x20001398
 8005754:	20001400 	.word	0x20001400
 8005758:	20001468 	.word	0x20001468

0800575c <global_stdio_init.part.0>:
 800575c:	b510      	push	{r4, lr}
 800575e:	4b0b      	ldr	r3, [pc, #44]	@ (800578c <global_stdio_init.part.0+0x30>)
 8005760:	4c0b      	ldr	r4, [pc, #44]	@ (8005790 <global_stdio_init.part.0+0x34>)
 8005762:	4a0c      	ldr	r2, [pc, #48]	@ (8005794 <global_stdio_init.part.0+0x38>)
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	4620      	mov	r0, r4
 8005768:	2200      	movs	r2, #0
 800576a:	2104      	movs	r1, #4
 800576c:	f7ff ff94 	bl	8005698 <std>
 8005770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005774:	2201      	movs	r2, #1
 8005776:	2109      	movs	r1, #9
 8005778:	f7ff ff8e 	bl	8005698 <std>
 800577c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005780:	2202      	movs	r2, #2
 8005782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005786:	2112      	movs	r1, #18
 8005788:	f7ff bf86 	b.w	8005698 <std>
 800578c:	200014d0 	.word	0x200014d0
 8005790:	20001398 	.word	0x20001398
 8005794:	08005705 	.word	0x08005705

08005798 <__sfp_lock_acquire>:
 8005798:	4801      	ldr	r0, [pc, #4]	@ (80057a0 <__sfp_lock_acquire+0x8>)
 800579a:	f000 ba58 	b.w	8005c4e <__retarget_lock_acquire_recursive>
 800579e:	bf00      	nop
 80057a0:	200014d9 	.word	0x200014d9

080057a4 <__sfp_lock_release>:
 80057a4:	4801      	ldr	r0, [pc, #4]	@ (80057ac <__sfp_lock_release+0x8>)
 80057a6:	f000 ba53 	b.w	8005c50 <__retarget_lock_release_recursive>
 80057aa:	bf00      	nop
 80057ac:	200014d9 	.word	0x200014d9

080057b0 <__sinit>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	4604      	mov	r4, r0
 80057b4:	f7ff fff0 	bl	8005798 <__sfp_lock_acquire>
 80057b8:	6a23      	ldr	r3, [r4, #32]
 80057ba:	b11b      	cbz	r3, 80057c4 <__sinit+0x14>
 80057bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c0:	f7ff bff0 	b.w	80057a4 <__sfp_lock_release>
 80057c4:	4b04      	ldr	r3, [pc, #16]	@ (80057d8 <__sinit+0x28>)
 80057c6:	6223      	str	r3, [r4, #32]
 80057c8:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <__sinit+0x2c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f5      	bne.n	80057bc <__sinit+0xc>
 80057d0:	f7ff ffc4 	bl	800575c <global_stdio_init.part.0>
 80057d4:	e7f2      	b.n	80057bc <__sinit+0xc>
 80057d6:	bf00      	nop
 80057d8:	0800571d 	.word	0x0800571d
 80057dc:	200014d0 	.word	0x200014d0

080057e0 <_fwalk_sglue>:
 80057e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057e4:	4607      	mov	r7, r0
 80057e6:	4688      	mov	r8, r1
 80057e8:	4614      	mov	r4, r2
 80057ea:	2600      	movs	r6, #0
 80057ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057f0:	f1b9 0901 	subs.w	r9, r9, #1
 80057f4:	d505      	bpl.n	8005802 <_fwalk_sglue+0x22>
 80057f6:	6824      	ldr	r4, [r4, #0]
 80057f8:	2c00      	cmp	r4, #0
 80057fa:	d1f7      	bne.n	80057ec <_fwalk_sglue+0xc>
 80057fc:	4630      	mov	r0, r6
 80057fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005802:	89ab      	ldrh	r3, [r5, #12]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d907      	bls.n	8005818 <_fwalk_sglue+0x38>
 8005808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800580c:	3301      	adds	r3, #1
 800580e:	d003      	beq.n	8005818 <_fwalk_sglue+0x38>
 8005810:	4629      	mov	r1, r5
 8005812:	4638      	mov	r0, r7
 8005814:	47c0      	blx	r8
 8005816:	4306      	orrs	r6, r0
 8005818:	3568      	adds	r5, #104	@ 0x68
 800581a:	e7e9      	b.n	80057f0 <_fwalk_sglue+0x10>

0800581c <iprintf>:
 800581c:	b40f      	push	{r0, r1, r2, r3}
 800581e:	b507      	push	{r0, r1, r2, lr}
 8005820:	4906      	ldr	r1, [pc, #24]	@ (800583c <iprintf+0x20>)
 8005822:	ab04      	add	r3, sp, #16
 8005824:	6808      	ldr	r0, [r1, #0]
 8005826:	f853 2b04 	ldr.w	r2, [r3], #4
 800582a:	6881      	ldr	r1, [r0, #8]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	f000 fc99 	bl	8006164 <_vfiprintf_r>
 8005832:	b003      	add	sp, #12
 8005834:	f85d eb04 	ldr.w	lr, [sp], #4
 8005838:	b004      	add	sp, #16
 800583a:	4770      	bx	lr
 800583c:	2000001c 	.word	0x2000001c

08005840 <_puts_r>:
 8005840:	6a03      	ldr	r3, [r0, #32]
 8005842:	b570      	push	{r4, r5, r6, lr}
 8005844:	6884      	ldr	r4, [r0, #8]
 8005846:	4605      	mov	r5, r0
 8005848:	460e      	mov	r6, r1
 800584a:	b90b      	cbnz	r3, 8005850 <_puts_r+0x10>
 800584c:	f7ff ffb0 	bl	80057b0 <__sinit>
 8005850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005852:	07db      	lsls	r3, r3, #31
 8005854:	d405      	bmi.n	8005862 <_puts_r+0x22>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	0598      	lsls	r0, r3, #22
 800585a:	d402      	bmi.n	8005862 <_puts_r+0x22>
 800585c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800585e:	f000 f9f6 	bl	8005c4e <__retarget_lock_acquire_recursive>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	0719      	lsls	r1, r3, #28
 8005866:	d502      	bpl.n	800586e <_puts_r+0x2e>
 8005868:	6923      	ldr	r3, [r4, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d135      	bne.n	80058da <_puts_r+0x9a>
 800586e:	4621      	mov	r1, r4
 8005870:	4628      	mov	r0, r5
 8005872:	f000 f91d 	bl	8005ab0 <__swsetup_r>
 8005876:	b380      	cbz	r0, 80058da <_puts_r+0x9a>
 8005878:	f04f 35ff 	mov.w	r5, #4294967295
 800587c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800587e:	07da      	lsls	r2, r3, #31
 8005880:	d405      	bmi.n	800588e <_puts_r+0x4e>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	059b      	lsls	r3, r3, #22
 8005886:	d402      	bmi.n	800588e <_puts_r+0x4e>
 8005888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800588a:	f000 f9e1 	bl	8005c50 <__retarget_lock_release_recursive>
 800588e:	4628      	mov	r0, r5
 8005890:	bd70      	pop	{r4, r5, r6, pc}
 8005892:	2b00      	cmp	r3, #0
 8005894:	da04      	bge.n	80058a0 <_puts_r+0x60>
 8005896:	69a2      	ldr	r2, [r4, #24]
 8005898:	429a      	cmp	r2, r3
 800589a:	dc17      	bgt.n	80058cc <_puts_r+0x8c>
 800589c:	290a      	cmp	r1, #10
 800589e:	d015      	beq.n	80058cc <_puts_r+0x8c>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	6022      	str	r2, [r4, #0]
 80058a6:	7019      	strb	r1, [r3, #0]
 80058a8:	68a3      	ldr	r3, [r4, #8]
 80058aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80058ae:	3b01      	subs	r3, #1
 80058b0:	60a3      	str	r3, [r4, #8]
 80058b2:	2900      	cmp	r1, #0
 80058b4:	d1ed      	bne.n	8005892 <_puts_r+0x52>
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da11      	bge.n	80058de <_puts_r+0x9e>
 80058ba:	4622      	mov	r2, r4
 80058bc:	210a      	movs	r1, #10
 80058be:	4628      	mov	r0, r5
 80058c0:	f000 f8b7 	bl	8005a32 <__swbuf_r>
 80058c4:	3001      	adds	r0, #1
 80058c6:	d0d7      	beq.n	8005878 <_puts_r+0x38>
 80058c8:	250a      	movs	r5, #10
 80058ca:	e7d7      	b.n	800587c <_puts_r+0x3c>
 80058cc:	4622      	mov	r2, r4
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 f8af 	bl	8005a32 <__swbuf_r>
 80058d4:	3001      	adds	r0, #1
 80058d6:	d1e7      	bne.n	80058a8 <_puts_r+0x68>
 80058d8:	e7ce      	b.n	8005878 <_puts_r+0x38>
 80058da:	3e01      	subs	r6, #1
 80058dc:	e7e4      	b.n	80058a8 <_puts_r+0x68>
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	6022      	str	r2, [r4, #0]
 80058e4:	220a      	movs	r2, #10
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	e7ee      	b.n	80058c8 <_puts_r+0x88>
	...

080058ec <puts>:
 80058ec:	4b02      	ldr	r3, [pc, #8]	@ (80058f8 <puts+0xc>)
 80058ee:	4601      	mov	r1, r0
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	f7ff bfa5 	b.w	8005840 <_puts_r>
 80058f6:	bf00      	nop
 80058f8:	2000001c 	.word	0x2000001c

080058fc <sniprintf>:
 80058fc:	b40c      	push	{r2, r3}
 80058fe:	b530      	push	{r4, r5, lr}
 8005900:	4b18      	ldr	r3, [pc, #96]	@ (8005964 <sniprintf+0x68>)
 8005902:	1e0c      	subs	r4, r1, #0
 8005904:	681d      	ldr	r5, [r3, #0]
 8005906:	b09d      	sub	sp, #116	@ 0x74
 8005908:	da08      	bge.n	800591c <sniprintf+0x20>
 800590a:	238b      	movs	r3, #139	@ 0x8b
 800590c:	602b      	str	r3, [r5, #0]
 800590e:	f04f 30ff 	mov.w	r0, #4294967295
 8005912:	b01d      	add	sp, #116	@ 0x74
 8005914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005918:	b002      	add	sp, #8
 800591a:	4770      	bx	lr
 800591c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005920:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005924:	f04f 0300 	mov.w	r3, #0
 8005928:	931b      	str	r3, [sp, #108]	@ 0x6c
 800592a:	bf14      	ite	ne
 800592c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005930:	4623      	moveq	r3, r4
 8005932:	9304      	str	r3, [sp, #16]
 8005934:	9307      	str	r3, [sp, #28]
 8005936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800593a:	9002      	str	r0, [sp, #8]
 800593c:	9006      	str	r0, [sp, #24]
 800593e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005942:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005944:	ab21      	add	r3, sp, #132	@ 0x84
 8005946:	a902      	add	r1, sp, #8
 8005948:	4628      	mov	r0, r5
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	f000 fae4 	bl	8005f18 <_svfiprintf_r>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	bfbc      	itt	lt
 8005954:	238b      	movlt	r3, #139	@ 0x8b
 8005956:	602b      	strlt	r3, [r5, #0]
 8005958:	2c00      	cmp	r4, #0
 800595a:	d0da      	beq.n	8005912 <sniprintf+0x16>
 800595c:	9b02      	ldr	r3, [sp, #8]
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
 8005962:	e7d6      	b.n	8005912 <sniprintf+0x16>
 8005964:	2000001c 	.word	0x2000001c

08005968 <siprintf>:
 8005968:	b40e      	push	{r1, r2, r3}
 800596a:	b510      	push	{r4, lr}
 800596c:	b09d      	sub	sp, #116	@ 0x74
 800596e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005970:	9002      	str	r0, [sp, #8]
 8005972:	9006      	str	r0, [sp, #24]
 8005974:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005978:	480a      	ldr	r0, [pc, #40]	@ (80059a4 <siprintf+0x3c>)
 800597a:	9107      	str	r1, [sp, #28]
 800597c:	9104      	str	r1, [sp, #16]
 800597e:	490a      	ldr	r1, [pc, #40]	@ (80059a8 <siprintf+0x40>)
 8005980:	f853 2b04 	ldr.w	r2, [r3], #4
 8005984:	9105      	str	r1, [sp, #20]
 8005986:	2400      	movs	r4, #0
 8005988:	a902      	add	r1, sp, #8
 800598a:	6800      	ldr	r0, [r0, #0]
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005990:	f000 fac2 	bl	8005f18 <_svfiprintf_r>
 8005994:	9b02      	ldr	r3, [sp, #8]
 8005996:	701c      	strb	r4, [r3, #0]
 8005998:	b01d      	add	sp, #116	@ 0x74
 800599a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800599e:	b003      	add	sp, #12
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000001c 	.word	0x2000001c
 80059a8:	ffff0208 	.word	0xffff0208

080059ac <__sread>:
 80059ac:	b510      	push	{r4, lr}
 80059ae:	460c      	mov	r4, r1
 80059b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b4:	f000 f8fc 	bl	8005bb0 <_read_r>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	bfab      	itete	ge
 80059bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059be:	89a3      	ldrhlt	r3, [r4, #12]
 80059c0:	181b      	addge	r3, r3, r0
 80059c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059c6:	bfac      	ite	ge
 80059c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ca:	81a3      	strhlt	r3, [r4, #12]
 80059cc:	bd10      	pop	{r4, pc}

080059ce <__swrite>:
 80059ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d2:	461f      	mov	r7, r3
 80059d4:	898b      	ldrh	r3, [r1, #12]
 80059d6:	05db      	lsls	r3, r3, #23
 80059d8:	4605      	mov	r5, r0
 80059da:	460c      	mov	r4, r1
 80059dc:	4616      	mov	r6, r2
 80059de:	d505      	bpl.n	80059ec <__swrite+0x1e>
 80059e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e4:	2302      	movs	r3, #2
 80059e6:	2200      	movs	r2, #0
 80059e8:	f000 f8d0 	bl	8005b8c <_lseek_r>
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	4632      	mov	r2, r6
 80059fa:	463b      	mov	r3, r7
 80059fc:	4628      	mov	r0, r5
 80059fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a02:	f000 b8e7 	b.w	8005bd4 <_write_r>

08005a06 <__sseek>:
 8005a06:	b510      	push	{r4, lr}
 8005a08:	460c      	mov	r4, r1
 8005a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a0e:	f000 f8bd 	bl	8005b8c <_lseek_r>
 8005a12:	1c43      	adds	r3, r0, #1
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	bf15      	itete	ne
 8005a18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a22:	81a3      	strheq	r3, [r4, #12]
 8005a24:	bf18      	it	ne
 8005a26:	81a3      	strhne	r3, [r4, #12]
 8005a28:	bd10      	pop	{r4, pc}

08005a2a <__sclose>:
 8005a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a2e:	f000 b89d 	b.w	8005b6c <_close_r>

08005a32 <__swbuf_r>:
 8005a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a34:	460e      	mov	r6, r1
 8005a36:	4614      	mov	r4, r2
 8005a38:	4605      	mov	r5, r0
 8005a3a:	b118      	cbz	r0, 8005a44 <__swbuf_r+0x12>
 8005a3c:	6a03      	ldr	r3, [r0, #32]
 8005a3e:	b90b      	cbnz	r3, 8005a44 <__swbuf_r+0x12>
 8005a40:	f7ff feb6 	bl	80057b0 <__sinit>
 8005a44:	69a3      	ldr	r3, [r4, #24]
 8005a46:	60a3      	str	r3, [r4, #8]
 8005a48:	89a3      	ldrh	r3, [r4, #12]
 8005a4a:	071a      	lsls	r2, r3, #28
 8005a4c:	d501      	bpl.n	8005a52 <__swbuf_r+0x20>
 8005a4e:	6923      	ldr	r3, [r4, #16]
 8005a50:	b943      	cbnz	r3, 8005a64 <__swbuf_r+0x32>
 8005a52:	4621      	mov	r1, r4
 8005a54:	4628      	mov	r0, r5
 8005a56:	f000 f82b 	bl	8005ab0 <__swsetup_r>
 8005a5a:	b118      	cbz	r0, 8005a64 <__swbuf_r+0x32>
 8005a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8005a60:	4638      	mov	r0, r7
 8005a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	6922      	ldr	r2, [r4, #16]
 8005a68:	1a98      	subs	r0, r3, r2
 8005a6a:	6963      	ldr	r3, [r4, #20]
 8005a6c:	b2f6      	uxtb	r6, r6
 8005a6e:	4283      	cmp	r3, r0
 8005a70:	4637      	mov	r7, r6
 8005a72:	dc05      	bgt.n	8005a80 <__swbuf_r+0x4e>
 8005a74:	4621      	mov	r1, r4
 8005a76:	4628      	mov	r0, r5
 8005a78:	f000 fe9c 	bl	80067b4 <_fflush_r>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d1ed      	bne.n	8005a5c <__swbuf_r+0x2a>
 8005a80:	68a3      	ldr	r3, [r4, #8]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	60a3      	str	r3, [r4, #8]
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	1c5a      	adds	r2, r3, #1
 8005a8a:	6022      	str	r2, [r4, #0]
 8005a8c:	701e      	strb	r6, [r3, #0]
 8005a8e:	6962      	ldr	r2, [r4, #20]
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d004      	beq.n	8005aa0 <__swbuf_r+0x6e>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	07db      	lsls	r3, r3, #31
 8005a9a:	d5e1      	bpl.n	8005a60 <__swbuf_r+0x2e>
 8005a9c:	2e0a      	cmp	r6, #10
 8005a9e:	d1df      	bne.n	8005a60 <__swbuf_r+0x2e>
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	f000 fe86 	bl	80067b4 <_fflush_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d0d9      	beq.n	8005a60 <__swbuf_r+0x2e>
 8005aac:	e7d6      	b.n	8005a5c <__swbuf_r+0x2a>
	...

08005ab0 <__swsetup_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4b29      	ldr	r3, [pc, #164]	@ (8005b58 <__swsetup_r+0xa8>)
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	6818      	ldr	r0, [r3, #0]
 8005ab8:	460c      	mov	r4, r1
 8005aba:	b118      	cbz	r0, 8005ac4 <__swsetup_r+0x14>
 8005abc:	6a03      	ldr	r3, [r0, #32]
 8005abe:	b90b      	cbnz	r3, 8005ac4 <__swsetup_r+0x14>
 8005ac0:	f7ff fe76 	bl	80057b0 <__sinit>
 8005ac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ac8:	0719      	lsls	r1, r3, #28
 8005aca:	d422      	bmi.n	8005b12 <__swsetup_r+0x62>
 8005acc:	06da      	lsls	r2, r3, #27
 8005ace:	d407      	bmi.n	8005ae0 <__swsetup_r+0x30>
 8005ad0:	2209      	movs	r2, #9
 8005ad2:	602a      	str	r2, [r5, #0]
 8005ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ad8:	81a3      	strh	r3, [r4, #12]
 8005ada:	f04f 30ff 	mov.w	r0, #4294967295
 8005ade:	e033      	b.n	8005b48 <__swsetup_r+0x98>
 8005ae0:	0758      	lsls	r0, r3, #29
 8005ae2:	d512      	bpl.n	8005b0a <__swsetup_r+0x5a>
 8005ae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ae6:	b141      	cbz	r1, 8005afa <__swsetup_r+0x4a>
 8005ae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005aec:	4299      	cmp	r1, r3
 8005aee:	d002      	beq.n	8005af6 <__swsetup_r+0x46>
 8005af0:	4628      	mov	r0, r5
 8005af2:	f000 f8bd 	bl	8005c70 <_free_r>
 8005af6:	2300      	movs	r3, #0
 8005af8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005b00:	81a3      	strh	r3, [r4, #12]
 8005b02:	2300      	movs	r3, #0
 8005b04:	6063      	str	r3, [r4, #4]
 8005b06:	6923      	ldr	r3, [r4, #16]
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	f043 0308 	orr.w	r3, r3, #8
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	6923      	ldr	r3, [r4, #16]
 8005b14:	b94b      	cbnz	r3, 8005b2a <__swsetup_r+0x7a>
 8005b16:	89a3      	ldrh	r3, [r4, #12]
 8005b18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b20:	d003      	beq.n	8005b2a <__swsetup_r+0x7a>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	f000 fe93 	bl	8006850 <__smakebuf_r>
 8005b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b2e:	f013 0201 	ands.w	r2, r3, #1
 8005b32:	d00a      	beq.n	8005b4a <__swsetup_r+0x9a>
 8005b34:	2200      	movs	r2, #0
 8005b36:	60a2      	str	r2, [r4, #8]
 8005b38:	6962      	ldr	r2, [r4, #20]
 8005b3a:	4252      	negs	r2, r2
 8005b3c:	61a2      	str	r2, [r4, #24]
 8005b3e:	6922      	ldr	r2, [r4, #16]
 8005b40:	b942      	cbnz	r2, 8005b54 <__swsetup_r+0xa4>
 8005b42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b46:	d1c5      	bne.n	8005ad4 <__swsetup_r+0x24>
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
 8005b4a:	0799      	lsls	r1, r3, #30
 8005b4c:	bf58      	it	pl
 8005b4e:	6962      	ldrpl	r2, [r4, #20]
 8005b50:	60a2      	str	r2, [r4, #8]
 8005b52:	e7f4      	b.n	8005b3e <__swsetup_r+0x8e>
 8005b54:	2000      	movs	r0, #0
 8005b56:	e7f7      	b.n	8005b48 <__swsetup_r+0x98>
 8005b58:	2000001c 	.word	0x2000001c

08005b5c <memset>:
 8005b5c:	4402      	add	r2, r0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d100      	bne.n	8005b66 <memset+0xa>
 8005b64:	4770      	bx	lr
 8005b66:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6a:	e7f9      	b.n	8005b60 <memset+0x4>

08005b6c <_close_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	4d06      	ldr	r5, [pc, #24]	@ (8005b88 <_close_r+0x1c>)
 8005b70:	2300      	movs	r3, #0
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	f7fb fa51 	bl	800101e <_close>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_close_r+0x1a>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_close_r+0x1a>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	200014d4 	.word	0x200014d4

08005b8c <_lseek_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4d07      	ldr	r5, [pc, #28]	@ (8005bac <_lseek_r+0x20>)
 8005b90:	4604      	mov	r4, r0
 8005b92:	4608      	mov	r0, r1
 8005b94:	4611      	mov	r1, r2
 8005b96:	2200      	movs	r2, #0
 8005b98:	602a      	str	r2, [r5, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f7fb fa66 	bl	800106c <_lseek>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d102      	bne.n	8005baa <_lseek_r+0x1e>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	b103      	cbz	r3, 8005baa <_lseek_r+0x1e>
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	200014d4 	.word	0x200014d4

08005bb0 <_read_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	4d07      	ldr	r5, [pc, #28]	@ (8005bd0 <_read_r+0x20>)
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	4608      	mov	r0, r1
 8005bb8:	4611      	mov	r1, r2
 8005bba:	2200      	movs	r2, #0
 8005bbc:	602a      	str	r2, [r5, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	f7fb fa10 	bl	8000fe4 <_read>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d102      	bne.n	8005bce <_read_r+0x1e>
 8005bc8:	682b      	ldr	r3, [r5, #0]
 8005bca:	b103      	cbz	r3, 8005bce <_read_r+0x1e>
 8005bcc:	6023      	str	r3, [r4, #0]
 8005bce:	bd38      	pop	{r3, r4, r5, pc}
 8005bd0:	200014d4 	.word	0x200014d4

08005bd4 <_write_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4d07      	ldr	r5, [pc, #28]	@ (8005bf4 <_write_r+0x20>)
 8005bd8:	4604      	mov	r4, r0
 8005bda:	4608      	mov	r0, r1
 8005bdc:	4611      	mov	r1, r2
 8005bde:	2200      	movs	r2, #0
 8005be0:	602a      	str	r2, [r5, #0]
 8005be2:	461a      	mov	r2, r3
 8005be4:	f7fa ff7c 	bl	8000ae0 <_write>
 8005be8:	1c43      	adds	r3, r0, #1
 8005bea:	d102      	bne.n	8005bf2 <_write_r+0x1e>
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	b103      	cbz	r3, 8005bf2 <_write_r+0x1e>
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	200014d4 	.word	0x200014d4

08005bf8 <__errno>:
 8005bf8:	4b01      	ldr	r3, [pc, #4]	@ (8005c00 <__errno+0x8>)
 8005bfa:	6818      	ldr	r0, [r3, #0]
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	2000001c 	.word	0x2000001c

08005c04 <__libc_init_array>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	4d0d      	ldr	r5, [pc, #52]	@ (8005c3c <__libc_init_array+0x38>)
 8005c08:	4c0d      	ldr	r4, [pc, #52]	@ (8005c40 <__libc_init_array+0x3c>)
 8005c0a:	1b64      	subs	r4, r4, r5
 8005c0c:	10a4      	asrs	r4, r4, #2
 8005c0e:	2600      	movs	r6, #0
 8005c10:	42a6      	cmp	r6, r4
 8005c12:	d109      	bne.n	8005c28 <__libc_init_array+0x24>
 8005c14:	4d0b      	ldr	r5, [pc, #44]	@ (8005c44 <__libc_init_array+0x40>)
 8005c16:	4c0c      	ldr	r4, [pc, #48]	@ (8005c48 <__libc_init_array+0x44>)
 8005c18:	f000 fed8 	bl	80069cc <_init>
 8005c1c:	1b64      	subs	r4, r4, r5
 8005c1e:	10a4      	asrs	r4, r4, #2
 8005c20:	2600      	movs	r6, #0
 8005c22:	42a6      	cmp	r6, r4
 8005c24:	d105      	bne.n	8005c32 <__libc_init_array+0x2e>
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c2c:	4798      	blx	r3
 8005c2e:	3601      	adds	r6, #1
 8005c30:	e7ee      	b.n	8005c10 <__libc_init_array+0xc>
 8005c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c36:	4798      	blx	r3
 8005c38:	3601      	adds	r6, #1
 8005c3a:	e7f2      	b.n	8005c22 <__libc_init_array+0x1e>
 8005c3c:	08006ae0 	.word	0x08006ae0
 8005c40:	08006ae0 	.word	0x08006ae0
 8005c44:	08006ae0 	.word	0x08006ae0
 8005c48:	08006ae4 	.word	0x08006ae4

08005c4c <__retarget_lock_init_recursive>:
 8005c4c:	4770      	bx	lr

08005c4e <__retarget_lock_acquire_recursive>:
 8005c4e:	4770      	bx	lr

08005c50 <__retarget_lock_release_recursive>:
 8005c50:	4770      	bx	lr

08005c52 <memcpy>:
 8005c52:	440a      	add	r2, r1
 8005c54:	4291      	cmp	r1, r2
 8005c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c5a:	d100      	bne.n	8005c5e <memcpy+0xc>
 8005c5c:	4770      	bx	lr
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c68:	4291      	cmp	r1, r2
 8005c6a:	d1f9      	bne.n	8005c60 <memcpy+0xe>
 8005c6c:	bd10      	pop	{r4, pc}
	...

08005c70 <_free_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4605      	mov	r5, r0
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d041      	beq.n	8005cfc <_free_r+0x8c>
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f0c      	subs	r4, r1, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfb8      	it	lt
 8005c82:	18e4      	addlt	r4, r4, r3
 8005c84:	f000 f8e0 	bl	8005e48 <__malloc_lock>
 8005c88:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <_free_r+0x90>)
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	b933      	cbnz	r3, 8005c9c <_free_r+0x2c>
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6014      	str	r4, [r2, #0]
 8005c92:	4628      	mov	r0, r5
 8005c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c98:	f000 b8dc 	b.w	8005e54 <__malloc_unlock>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d908      	bls.n	8005cb2 <_free_r+0x42>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	1821      	adds	r1, r4, r0
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	bf01      	itttt	eq
 8005ca8:	6819      	ldreq	r1, [r3, #0]
 8005caa:	685b      	ldreq	r3, [r3, #4]
 8005cac:	1809      	addeq	r1, r1, r0
 8005cae:	6021      	streq	r1, [r4, #0]
 8005cb0:	e7ed      	b.n	8005c8e <_free_r+0x1e>
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b10b      	cbz	r3, 8005cbc <_free_r+0x4c>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x42>
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	1850      	adds	r0, r2, r1
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x6c>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	1850      	adds	r0, r2, r1
 8005cca:	4283      	cmp	r3, r0
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	d1e0      	bne.n	8005c92 <_free_r+0x22>
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	6053      	str	r3, [r2, #4]
 8005cd6:	4408      	add	r0, r1
 8005cd8:	6010      	str	r0, [r2, #0]
 8005cda:	e7da      	b.n	8005c92 <_free_r+0x22>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x74>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	e7d6      	b.n	8005c92 <_free_r+0x22>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf04      	itt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	6063      	str	r3, [r4, #4]
 8005cf2:	bf04      	itt	eq
 8005cf4:	1809      	addeq	r1, r1, r0
 8005cf6:	6021      	streq	r1, [r4, #0]
 8005cf8:	6054      	str	r4, [r2, #4]
 8005cfa:	e7ca      	b.n	8005c92 <_free_r+0x22>
 8005cfc:	bd38      	pop	{r3, r4, r5, pc}
 8005cfe:	bf00      	nop
 8005d00:	200014e0 	.word	0x200014e0

08005d04 <sbrk_aligned>:
 8005d04:	b570      	push	{r4, r5, r6, lr}
 8005d06:	4e0f      	ldr	r6, [pc, #60]	@ (8005d44 <sbrk_aligned+0x40>)
 8005d08:	460c      	mov	r4, r1
 8005d0a:	6831      	ldr	r1, [r6, #0]
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	b911      	cbnz	r1, 8005d16 <sbrk_aligned+0x12>
 8005d10:	f000 fe16 	bl	8006940 <_sbrk_r>
 8005d14:	6030      	str	r0, [r6, #0]
 8005d16:	4621      	mov	r1, r4
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f000 fe11 	bl	8006940 <_sbrk_r>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	d103      	bne.n	8005d2a <sbrk_aligned+0x26>
 8005d22:	f04f 34ff 	mov.w	r4, #4294967295
 8005d26:	4620      	mov	r0, r4
 8005d28:	bd70      	pop	{r4, r5, r6, pc}
 8005d2a:	1cc4      	adds	r4, r0, #3
 8005d2c:	f024 0403 	bic.w	r4, r4, #3
 8005d30:	42a0      	cmp	r0, r4
 8005d32:	d0f8      	beq.n	8005d26 <sbrk_aligned+0x22>
 8005d34:	1a21      	subs	r1, r4, r0
 8005d36:	4628      	mov	r0, r5
 8005d38:	f000 fe02 	bl	8006940 <_sbrk_r>
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d1f2      	bne.n	8005d26 <sbrk_aligned+0x22>
 8005d40:	e7ef      	b.n	8005d22 <sbrk_aligned+0x1e>
 8005d42:	bf00      	nop
 8005d44:	200014dc 	.word	0x200014dc

08005d48 <_malloc_r>:
 8005d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d4c:	1ccd      	adds	r5, r1, #3
 8005d4e:	f025 0503 	bic.w	r5, r5, #3
 8005d52:	3508      	adds	r5, #8
 8005d54:	2d0c      	cmp	r5, #12
 8005d56:	bf38      	it	cc
 8005d58:	250c      	movcc	r5, #12
 8005d5a:	2d00      	cmp	r5, #0
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	db01      	blt.n	8005d64 <_malloc_r+0x1c>
 8005d60:	42a9      	cmp	r1, r5
 8005d62:	d904      	bls.n	8005d6e <_malloc_r+0x26>
 8005d64:	230c      	movs	r3, #12
 8005d66:	6033      	str	r3, [r6, #0]
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e44 <_malloc_r+0xfc>
 8005d72:	f000 f869 	bl	8005e48 <__malloc_lock>
 8005d76:	f8d8 3000 	ldr.w	r3, [r8]
 8005d7a:	461c      	mov	r4, r3
 8005d7c:	bb44      	cbnz	r4, 8005dd0 <_malloc_r+0x88>
 8005d7e:	4629      	mov	r1, r5
 8005d80:	4630      	mov	r0, r6
 8005d82:	f7ff ffbf 	bl	8005d04 <sbrk_aligned>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	4604      	mov	r4, r0
 8005d8a:	d158      	bne.n	8005e3e <_malloc_r+0xf6>
 8005d8c:	f8d8 4000 	ldr.w	r4, [r8]
 8005d90:	4627      	mov	r7, r4
 8005d92:	2f00      	cmp	r7, #0
 8005d94:	d143      	bne.n	8005e1e <_malloc_r+0xd6>
 8005d96:	2c00      	cmp	r4, #0
 8005d98:	d04b      	beq.n	8005e32 <_malloc_r+0xea>
 8005d9a:	6823      	ldr	r3, [r4, #0]
 8005d9c:	4639      	mov	r1, r7
 8005d9e:	4630      	mov	r0, r6
 8005da0:	eb04 0903 	add.w	r9, r4, r3
 8005da4:	f000 fdcc 	bl	8006940 <_sbrk_r>
 8005da8:	4581      	cmp	r9, r0
 8005daa:	d142      	bne.n	8005e32 <_malloc_r+0xea>
 8005dac:	6821      	ldr	r1, [r4, #0]
 8005dae:	1a6d      	subs	r5, r5, r1
 8005db0:	4629      	mov	r1, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	f7ff ffa6 	bl	8005d04 <sbrk_aligned>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d03a      	beq.n	8005e32 <_malloc_r+0xea>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	442b      	add	r3, r5
 8005dc0:	6023      	str	r3, [r4, #0]
 8005dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	bb62      	cbnz	r2, 8005e24 <_malloc_r+0xdc>
 8005dca:	f8c8 7000 	str.w	r7, [r8]
 8005dce:	e00f      	b.n	8005df0 <_malloc_r+0xa8>
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	1b52      	subs	r2, r2, r5
 8005dd4:	d420      	bmi.n	8005e18 <_malloc_r+0xd0>
 8005dd6:	2a0b      	cmp	r2, #11
 8005dd8:	d917      	bls.n	8005e0a <_malloc_r+0xc2>
 8005dda:	1961      	adds	r1, r4, r5
 8005ddc:	42a3      	cmp	r3, r4
 8005dde:	6025      	str	r5, [r4, #0]
 8005de0:	bf18      	it	ne
 8005de2:	6059      	strne	r1, [r3, #4]
 8005de4:	6863      	ldr	r3, [r4, #4]
 8005de6:	bf08      	it	eq
 8005de8:	f8c8 1000 	streq.w	r1, [r8]
 8005dec:	5162      	str	r2, [r4, r5]
 8005dee:	604b      	str	r3, [r1, #4]
 8005df0:	4630      	mov	r0, r6
 8005df2:	f000 f82f 	bl	8005e54 <__malloc_unlock>
 8005df6:	f104 000b 	add.w	r0, r4, #11
 8005dfa:	1d23      	adds	r3, r4, #4
 8005dfc:	f020 0007 	bic.w	r0, r0, #7
 8005e00:	1ac2      	subs	r2, r0, r3
 8005e02:	bf1c      	itt	ne
 8005e04:	1a1b      	subne	r3, r3, r0
 8005e06:	50a3      	strne	r3, [r4, r2]
 8005e08:	e7af      	b.n	8005d6a <_malloc_r+0x22>
 8005e0a:	6862      	ldr	r2, [r4, #4]
 8005e0c:	42a3      	cmp	r3, r4
 8005e0e:	bf0c      	ite	eq
 8005e10:	f8c8 2000 	streq.w	r2, [r8]
 8005e14:	605a      	strne	r2, [r3, #4]
 8005e16:	e7eb      	b.n	8005df0 <_malloc_r+0xa8>
 8005e18:	4623      	mov	r3, r4
 8005e1a:	6864      	ldr	r4, [r4, #4]
 8005e1c:	e7ae      	b.n	8005d7c <_malloc_r+0x34>
 8005e1e:	463c      	mov	r4, r7
 8005e20:	687f      	ldr	r7, [r7, #4]
 8005e22:	e7b6      	b.n	8005d92 <_malloc_r+0x4a>
 8005e24:	461a      	mov	r2, r3
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	d1fb      	bne.n	8005e24 <_malloc_r+0xdc>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6053      	str	r3, [r2, #4]
 8005e30:	e7de      	b.n	8005df0 <_malloc_r+0xa8>
 8005e32:	230c      	movs	r3, #12
 8005e34:	6033      	str	r3, [r6, #0]
 8005e36:	4630      	mov	r0, r6
 8005e38:	f000 f80c 	bl	8005e54 <__malloc_unlock>
 8005e3c:	e794      	b.n	8005d68 <_malloc_r+0x20>
 8005e3e:	6005      	str	r5, [r0, #0]
 8005e40:	e7d6      	b.n	8005df0 <_malloc_r+0xa8>
 8005e42:	bf00      	nop
 8005e44:	200014e0 	.word	0x200014e0

08005e48 <__malloc_lock>:
 8005e48:	4801      	ldr	r0, [pc, #4]	@ (8005e50 <__malloc_lock+0x8>)
 8005e4a:	f7ff bf00 	b.w	8005c4e <__retarget_lock_acquire_recursive>
 8005e4e:	bf00      	nop
 8005e50:	200014d8 	.word	0x200014d8

08005e54 <__malloc_unlock>:
 8005e54:	4801      	ldr	r0, [pc, #4]	@ (8005e5c <__malloc_unlock+0x8>)
 8005e56:	f7ff befb 	b.w	8005c50 <__retarget_lock_release_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	200014d8 	.word	0x200014d8

08005e60 <__ssputs_r>:
 8005e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	688e      	ldr	r6, [r1, #8]
 8005e66:	461f      	mov	r7, r3
 8005e68:	42be      	cmp	r6, r7
 8005e6a:	680b      	ldr	r3, [r1, #0]
 8005e6c:	4682      	mov	sl, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	4690      	mov	r8, r2
 8005e72:	d82d      	bhi.n	8005ed0 <__ssputs_r+0x70>
 8005e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e7c:	d026      	beq.n	8005ecc <__ssputs_r+0x6c>
 8005e7e:	6965      	ldr	r5, [r4, #20]
 8005e80:	6909      	ldr	r1, [r1, #16]
 8005e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e86:	eba3 0901 	sub.w	r9, r3, r1
 8005e8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e8e:	1c7b      	adds	r3, r7, #1
 8005e90:	444b      	add	r3, r9
 8005e92:	106d      	asrs	r5, r5, #1
 8005e94:	429d      	cmp	r5, r3
 8005e96:	bf38      	it	cc
 8005e98:	461d      	movcc	r5, r3
 8005e9a:	0553      	lsls	r3, r2, #21
 8005e9c:	d527      	bpl.n	8005eee <__ssputs_r+0x8e>
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7ff ff52 	bl	8005d48 <_malloc_r>
 8005ea4:	4606      	mov	r6, r0
 8005ea6:	b360      	cbz	r0, 8005f02 <__ssputs_r+0xa2>
 8005ea8:	6921      	ldr	r1, [r4, #16]
 8005eaa:	464a      	mov	r2, r9
 8005eac:	f7ff fed1 	bl	8005c52 <memcpy>
 8005eb0:	89a3      	ldrh	r3, [r4, #12]
 8005eb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	6126      	str	r6, [r4, #16]
 8005ebe:	6165      	str	r5, [r4, #20]
 8005ec0:	444e      	add	r6, r9
 8005ec2:	eba5 0509 	sub.w	r5, r5, r9
 8005ec6:	6026      	str	r6, [r4, #0]
 8005ec8:	60a5      	str	r5, [r4, #8]
 8005eca:	463e      	mov	r6, r7
 8005ecc:	42be      	cmp	r6, r7
 8005ece:	d900      	bls.n	8005ed2 <__ssputs_r+0x72>
 8005ed0:	463e      	mov	r6, r7
 8005ed2:	6820      	ldr	r0, [r4, #0]
 8005ed4:	4632      	mov	r2, r6
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	f000 fcf6 	bl	80068c8 <memmove>
 8005edc:	68a3      	ldr	r3, [r4, #8]
 8005ede:	1b9b      	subs	r3, r3, r6
 8005ee0:	60a3      	str	r3, [r4, #8]
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	4433      	add	r3, r6
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eee:	462a      	mov	r2, r5
 8005ef0:	f000 fd36 	bl	8006960 <_realloc_r>
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d1e0      	bne.n	8005ebc <__ssputs_r+0x5c>
 8005efa:	6921      	ldr	r1, [r4, #16]
 8005efc:	4650      	mov	r0, sl
 8005efe:	f7ff feb7 	bl	8005c70 <_free_r>
 8005f02:	230c      	movs	r3, #12
 8005f04:	f8ca 3000 	str.w	r3, [sl]
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f0e:	81a3      	strh	r3, [r4, #12]
 8005f10:	f04f 30ff 	mov.w	r0, #4294967295
 8005f14:	e7e9      	b.n	8005eea <__ssputs_r+0x8a>
	...

08005f18 <_svfiprintf_r>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	4698      	mov	r8, r3
 8005f1e:	898b      	ldrh	r3, [r1, #12]
 8005f20:	061b      	lsls	r3, r3, #24
 8005f22:	b09d      	sub	sp, #116	@ 0x74
 8005f24:	4607      	mov	r7, r0
 8005f26:	460d      	mov	r5, r1
 8005f28:	4614      	mov	r4, r2
 8005f2a:	d510      	bpl.n	8005f4e <_svfiprintf_r+0x36>
 8005f2c:	690b      	ldr	r3, [r1, #16]
 8005f2e:	b973      	cbnz	r3, 8005f4e <_svfiprintf_r+0x36>
 8005f30:	2140      	movs	r1, #64	@ 0x40
 8005f32:	f7ff ff09 	bl	8005d48 <_malloc_r>
 8005f36:	6028      	str	r0, [r5, #0]
 8005f38:	6128      	str	r0, [r5, #16]
 8005f3a:	b930      	cbnz	r0, 8005f4a <_svfiprintf_r+0x32>
 8005f3c:	230c      	movs	r3, #12
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	b01d      	add	sp, #116	@ 0x74
 8005f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f4a:	2340      	movs	r3, #64	@ 0x40
 8005f4c:	616b      	str	r3, [r5, #20]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f52:	2320      	movs	r3, #32
 8005f54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f5c:	2330      	movs	r3, #48	@ 0x30
 8005f5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80060fc <_svfiprintf_r+0x1e4>
 8005f62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f66:	f04f 0901 	mov.w	r9, #1
 8005f6a:	4623      	mov	r3, r4
 8005f6c:	469a      	mov	sl, r3
 8005f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f72:	b10a      	cbz	r2, 8005f78 <_svfiprintf_r+0x60>
 8005f74:	2a25      	cmp	r2, #37	@ 0x25
 8005f76:	d1f9      	bne.n	8005f6c <_svfiprintf_r+0x54>
 8005f78:	ebba 0b04 	subs.w	fp, sl, r4
 8005f7c:	d00b      	beq.n	8005f96 <_svfiprintf_r+0x7e>
 8005f7e:	465b      	mov	r3, fp
 8005f80:	4622      	mov	r2, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	4638      	mov	r0, r7
 8005f86:	f7ff ff6b 	bl	8005e60 <__ssputs_r>
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	f000 80a7 	beq.w	80060de <_svfiprintf_r+0x1c6>
 8005f90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f92:	445a      	add	r2, fp
 8005f94:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f96:	f89a 3000 	ldrb.w	r3, [sl]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f000 809f 	beq.w	80060de <_svfiprintf_r+0x1c6>
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005faa:	f10a 0a01 	add.w	sl, sl, #1
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	9307      	str	r3, [sp, #28]
 8005fb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fb8:	4654      	mov	r4, sl
 8005fba:	2205      	movs	r2, #5
 8005fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fc0:	484e      	ldr	r0, [pc, #312]	@ (80060fc <_svfiprintf_r+0x1e4>)
 8005fc2:	f7fa f92d 	bl	8000220 <memchr>
 8005fc6:	9a04      	ldr	r2, [sp, #16]
 8005fc8:	b9d8      	cbnz	r0, 8006002 <_svfiprintf_r+0xea>
 8005fca:	06d0      	lsls	r0, r2, #27
 8005fcc:	bf44      	itt	mi
 8005fce:	2320      	movmi	r3, #32
 8005fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fd4:	0711      	lsls	r1, r2, #28
 8005fd6:	bf44      	itt	mi
 8005fd8:	232b      	movmi	r3, #43	@ 0x2b
 8005fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005fde:	f89a 3000 	ldrb.w	r3, [sl]
 8005fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fe4:	d015      	beq.n	8006012 <_svfiprintf_r+0xfa>
 8005fe6:	9a07      	ldr	r2, [sp, #28]
 8005fe8:	4654      	mov	r4, sl
 8005fea:	2000      	movs	r0, #0
 8005fec:	f04f 0c0a 	mov.w	ip, #10
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ff6:	3b30      	subs	r3, #48	@ 0x30
 8005ff8:	2b09      	cmp	r3, #9
 8005ffa:	d94b      	bls.n	8006094 <_svfiprintf_r+0x17c>
 8005ffc:	b1b0      	cbz	r0, 800602c <_svfiprintf_r+0x114>
 8005ffe:	9207      	str	r2, [sp, #28]
 8006000:	e014      	b.n	800602c <_svfiprintf_r+0x114>
 8006002:	eba0 0308 	sub.w	r3, r0, r8
 8006006:	fa09 f303 	lsl.w	r3, r9, r3
 800600a:	4313      	orrs	r3, r2
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	46a2      	mov	sl, r4
 8006010:	e7d2      	b.n	8005fb8 <_svfiprintf_r+0xa0>
 8006012:	9b03      	ldr	r3, [sp, #12]
 8006014:	1d19      	adds	r1, r3, #4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	9103      	str	r1, [sp, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	bfbb      	ittet	lt
 800601e:	425b      	neglt	r3, r3
 8006020:	f042 0202 	orrlt.w	r2, r2, #2
 8006024:	9307      	strge	r3, [sp, #28]
 8006026:	9307      	strlt	r3, [sp, #28]
 8006028:	bfb8      	it	lt
 800602a:	9204      	strlt	r2, [sp, #16]
 800602c:	7823      	ldrb	r3, [r4, #0]
 800602e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006030:	d10a      	bne.n	8006048 <_svfiprintf_r+0x130>
 8006032:	7863      	ldrb	r3, [r4, #1]
 8006034:	2b2a      	cmp	r3, #42	@ 0x2a
 8006036:	d132      	bne.n	800609e <_svfiprintf_r+0x186>
 8006038:	9b03      	ldr	r3, [sp, #12]
 800603a:	1d1a      	adds	r2, r3, #4
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	9203      	str	r2, [sp, #12]
 8006040:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006044:	3402      	adds	r4, #2
 8006046:	9305      	str	r3, [sp, #20]
 8006048:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800610c <_svfiprintf_r+0x1f4>
 800604c:	7821      	ldrb	r1, [r4, #0]
 800604e:	2203      	movs	r2, #3
 8006050:	4650      	mov	r0, sl
 8006052:	f7fa f8e5 	bl	8000220 <memchr>
 8006056:	b138      	cbz	r0, 8006068 <_svfiprintf_r+0x150>
 8006058:	9b04      	ldr	r3, [sp, #16]
 800605a:	eba0 000a 	sub.w	r0, r0, sl
 800605e:	2240      	movs	r2, #64	@ 0x40
 8006060:	4082      	lsls	r2, r0
 8006062:	4313      	orrs	r3, r2
 8006064:	3401      	adds	r4, #1
 8006066:	9304      	str	r3, [sp, #16]
 8006068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800606c:	4824      	ldr	r0, [pc, #144]	@ (8006100 <_svfiprintf_r+0x1e8>)
 800606e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006072:	2206      	movs	r2, #6
 8006074:	f7fa f8d4 	bl	8000220 <memchr>
 8006078:	2800      	cmp	r0, #0
 800607a:	d036      	beq.n	80060ea <_svfiprintf_r+0x1d2>
 800607c:	4b21      	ldr	r3, [pc, #132]	@ (8006104 <_svfiprintf_r+0x1ec>)
 800607e:	bb1b      	cbnz	r3, 80060c8 <_svfiprintf_r+0x1b0>
 8006080:	9b03      	ldr	r3, [sp, #12]
 8006082:	3307      	adds	r3, #7
 8006084:	f023 0307 	bic.w	r3, r3, #7
 8006088:	3308      	adds	r3, #8
 800608a:	9303      	str	r3, [sp, #12]
 800608c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608e:	4433      	add	r3, r6
 8006090:	9309      	str	r3, [sp, #36]	@ 0x24
 8006092:	e76a      	b.n	8005f6a <_svfiprintf_r+0x52>
 8006094:	fb0c 3202 	mla	r2, ip, r2, r3
 8006098:	460c      	mov	r4, r1
 800609a:	2001      	movs	r0, #1
 800609c:	e7a8      	b.n	8005ff0 <_svfiprintf_r+0xd8>
 800609e:	2300      	movs	r3, #0
 80060a0:	3401      	adds	r4, #1
 80060a2:	9305      	str	r3, [sp, #20]
 80060a4:	4619      	mov	r1, r3
 80060a6:	f04f 0c0a 	mov.w	ip, #10
 80060aa:	4620      	mov	r0, r4
 80060ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060b0:	3a30      	subs	r2, #48	@ 0x30
 80060b2:	2a09      	cmp	r2, #9
 80060b4:	d903      	bls.n	80060be <_svfiprintf_r+0x1a6>
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0c6      	beq.n	8006048 <_svfiprintf_r+0x130>
 80060ba:	9105      	str	r1, [sp, #20]
 80060bc:	e7c4      	b.n	8006048 <_svfiprintf_r+0x130>
 80060be:	fb0c 2101 	mla	r1, ip, r1, r2
 80060c2:	4604      	mov	r4, r0
 80060c4:	2301      	movs	r3, #1
 80060c6:	e7f0      	b.n	80060aa <_svfiprintf_r+0x192>
 80060c8:	ab03      	add	r3, sp, #12
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	462a      	mov	r2, r5
 80060ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <_svfiprintf_r+0x1f0>)
 80060d0:	a904      	add	r1, sp, #16
 80060d2:	4638      	mov	r0, r7
 80060d4:	f3af 8000 	nop.w
 80060d8:	1c42      	adds	r2, r0, #1
 80060da:	4606      	mov	r6, r0
 80060dc:	d1d6      	bne.n	800608c <_svfiprintf_r+0x174>
 80060de:	89ab      	ldrh	r3, [r5, #12]
 80060e0:	065b      	lsls	r3, r3, #25
 80060e2:	f53f af2d 	bmi.w	8005f40 <_svfiprintf_r+0x28>
 80060e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060e8:	e72c      	b.n	8005f44 <_svfiprintf_r+0x2c>
 80060ea:	ab03      	add	r3, sp, #12
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	462a      	mov	r2, r5
 80060f0:	4b05      	ldr	r3, [pc, #20]	@ (8006108 <_svfiprintf_r+0x1f0>)
 80060f2:	a904      	add	r1, sp, #16
 80060f4:	4638      	mov	r0, r7
 80060f6:	f000 f9bb 	bl	8006470 <_printf_i>
 80060fa:	e7ed      	b.n	80060d8 <_svfiprintf_r+0x1c0>
 80060fc:	08006aa4 	.word	0x08006aa4
 8006100:	08006aae 	.word	0x08006aae
 8006104:	00000000 	.word	0x00000000
 8006108:	08005e61 	.word	0x08005e61
 800610c:	08006aaa 	.word	0x08006aaa

08006110 <__sfputc_r>:
 8006110:	6893      	ldr	r3, [r2, #8]
 8006112:	3b01      	subs	r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	b410      	push	{r4}
 8006118:	6093      	str	r3, [r2, #8]
 800611a:	da08      	bge.n	800612e <__sfputc_r+0x1e>
 800611c:	6994      	ldr	r4, [r2, #24]
 800611e:	42a3      	cmp	r3, r4
 8006120:	db01      	blt.n	8006126 <__sfputc_r+0x16>
 8006122:	290a      	cmp	r1, #10
 8006124:	d103      	bne.n	800612e <__sfputc_r+0x1e>
 8006126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800612a:	f7ff bc82 	b.w	8005a32 <__swbuf_r>
 800612e:	6813      	ldr	r3, [r2, #0]
 8006130:	1c58      	adds	r0, r3, #1
 8006132:	6010      	str	r0, [r2, #0]
 8006134:	7019      	strb	r1, [r3, #0]
 8006136:	4608      	mov	r0, r1
 8006138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800613c:	4770      	bx	lr

0800613e <__sfputs_r>:
 800613e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006140:	4606      	mov	r6, r0
 8006142:	460f      	mov	r7, r1
 8006144:	4614      	mov	r4, r2
 8006146:	18d5      	adds	r5, r2, r3
 8006148:	42ac      	cmp	r4, r5
 800614a:	d101      	bne.n	8006150 <__sfputs_r+0x12>
 800614c:	2000      	movs	r0, #0
 800614e:	e007      	b.n	8006160 <__sfputs_r+0x22>
 8006150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006154:	463a      	mov	r2, r7
 8006156:	4630      	mov	r0, r6
 8006158:	f7ff ffda 	bl	8006110 <__sfputc_r>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d1f3      	bne.n	8006148 <__sfputs_r+0xa>
 8006160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006164 <_vfiprintf_r>:
 8006164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006168:	460d      	mov	r5, r1
 800616a:	b09d      	sub	sp, #116	@ 0x74
 800616c:	4614      	mov	r4, r2
 800616e:	4698      	mov	r8, r3
 8006170:	4606      	mov	r6, r0
 8006172:	b118      	cbz	r0, 800617c <_vfiprintf_r+0x18>
 8006174:	6a03      	ldr	r3, [r0, #32]
 8006176:	b90b      	cbnz	r3, 800617c <_vfiprintf_r+0x18>
 8006178:	f7ff fb1a 	bl	80057b0 <__sinit>
 800617c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800617e:	07d9      	lsls	r1, r3, #31
 8006180:	d405      	bmi.n	800618e <_vfiprintf_r+0x2a>
 8006182:	89ab      	ldrh	r3, [r5, #12]
 8006184:	059a      	lsls	r2, r3, #22
 8006186:	d402      	bmi.n	800618e <_vfiprintf_r+0x2a>
 8006188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800618a:	f7ff fd60 	bl	8005c4e <__retarget_lock_acquire_recursive>
 800618e:	89ab      	ldrh	r3, [r5, #12]
 8006190:	071b      	lsls	r3, r3, #28
 8006192:	d501      	bpl.n	8006198 <_vfiprintf_r+0x34>
 8006194:	692b      	ldr	r3, [r5, #16]
 8006196:	b99b      	cbnz	r3, 80061c0 <_vfiprintf_r+0x5c>
 8006198:	4629      	mov	r1, r5
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff fc88 	bl	8005ab0 <__swsetup_r>
 80061a0:	b170      	cbz	r0, 80061c0 <_vfiprintf_r+0x5c>
 80061a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80061a4:	07dc      	lsls	r4, r3, #31
 80061a6:	d504      	bpl.n	80061b2 <_vfiprintf_r+0x4e>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	b01d      	add	sp, #116	@ 0x74
 80061ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b2:	89ab      	ldrh	r3, [r5, #12]
 80061b4:	0598      	lsls	r0, r3, #22
 80061b6:	d4f7      	bmi.n	80061a8 <_vfiprintf_r+0x44>
 80061b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061ba:	f7ff fd49 	bl	8005c50 <__retarget_lock_release_recursive>
 80061be:	e7f3      	b.n	80061a8 <_vfiprintf_r+0x44>
 80061c0:	2300      	movs	r3, #0
 80061c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061c4:	2320      	movs	r3, #32
 80061c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80061ce:	2330      	movs	r3, #48	@ 0x30
 80061d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006380 <_vfiprintf_r+0x21c>
 80061d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061d8:	f04f 0901 	mov.w	r9, #1
 80061dc:	4623      	mov	r3, r4
 80061de:	469a      	mov	sl, r3
 80061e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061e4:	b10a      	cbz	r2, 80061ea <_vfiprintf_r+0x86>
 80061e6:	2a25      	cmp	r2, #37	@ 0x25
 80061e8:	d1f9      	bne.n	80061de <_vfiprintf_r+0x7a>
 80061ea:	ebba 0b04 	subs.w	fp, sl, r4
 80061ee:	d00b      	beq.n	8006208 <_vfiprintf_r+0xa4>
 80061f0:	465b      	mov	r3, fp
 80061f2:	4622      	mov	r2, r4
 80061f4:	4629      	mov	r1, r5
 80061f6:	4630      	mov	r0, r6
 80061f8:	f7ff ffa1 	bl	800613e <__sfputs_r>
 80061fc:	3001      	adds	r0, #1
 80061fe:	f000 80a7 	beq.w	8006350 <_vfiprintf_r+0x1ec>
 8006202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006204:	445a      	add	r2, fp
 8006206:	9209      	str	r2, [sp, #36]	@ 0x24
 8006208:	f89a 3000 	ldrb.w	r3, [sl]
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 809f 	beq.w	8006350 <_vfiprintf_r+0x1ec>
 8006212:	2300      	movs	r3, #0
 8006214:	f04f 32ff 	mov.w	r2, #4294967295
 8006218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800621c:	f10a 0a01 	add.w	sl, sl, #1
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	9307      	str	r3, [sp, #28]
 8006224:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006228:	931a      	str	r3, [sp, #104]	@ 0x68
 800622a:	4654      	mov	r4, sl
 800622c:	2205      	movs	r2, #5
 800622e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006232:	4853      	ldr	r0, [pc, #332]	@ (8006380 <_vfiprintf_r+0x21c>)
 8006234:	f7f9 fff4 	bl	8000220 <memchr>
 8006238:	9a04      	ldr	r2, [sp, #16]
 800623a:	b9d8      	cbnz	r0, 8006274 <_vfiprintf_r+0x110>
 800623c:	06d1      	lsls	r1, r2, #27
 800623e:	bf44      	itt	mi
 8006240:	2320      	movmi	r3, #32
 8006242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006246:	0713      	lsls	r3, r2, #28
 8006248:	bf44      	itt	mi
 800624a:	232b      	movmi	r3, #43	@ 0x2b
 800624c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006250:	f89a 3000 	ldrb.w	r3, [sl]
 8006254:	2b2a      	cmp	r3, #42	@ 0x2a
 8006256:	d015      	beq.n	8006284 <_vfiprintf_r+0x120>
 8006258:	9a07      	ldr	r2, [sp, #28]
 800625a:	4654      	mov	r4, sl
 800625c:	2000      	movs	r0, #0
 800625e:	f04f 0c0a 	mov.w	ip, #10
 8006262:	4621      	mov	r1, r4
 8006264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006268:	3b30      	subs	r3, #48	@ 0x30
 800626a:	2b09      	cmp	r3, #9
 800626c:	d94b      	bls.n	8006306 <_vfiprintf_r+0x1a2>
 800626e:	b1b0      	cbz	r0, 800629e <_vfiprintf_r+0x13a>
 8006270:	9207      	str	r2, [sp, #28]
 8006272:	e014      	b.n	800629e <_vfiprintf_r+0x13a>
 8006274:	eba0 0308 	sub.w	r3, r0, r8
 8006278:	fa09 f303 	lsl.w	r3, r9, r3
 800627c:	4313      	orrs	r3, r2
 800627e:	9304      	str	r3, [sp, #16]
 8006280:	46a2      	mov	sl, r4
 8006282:	e7d2      	b.n	800622a <_vfiprintf_r+0xc6>
 8006284:	9b03      	ldr	r3, [sp, #12]
 8006286:	1d19      	adds	r1, r3, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	9103      	str	r1, [sp, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	bfbb      	ittet	lt
 8006290:	425b      	neglt	r3, r3
 8006292:	f042 0202 	orrlt.w	r2, r2, #2
 8006296:	9307      	strge	r3, [sp, #28]
 8006298:	9307      	strlt	r3, [sp, #28]
 800629a:	bfb8      	it	lt
 800629c:	9204      	strlt	r2, [sp, #16]
 800629e:	7823      	ldrb	r3, [r4, #0]
 80062a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80062a2:	d10a      	bne.n	80062ba <_vfiprintf_r+0x156>
 80062a4:	7863      	ldrb	r3, [r4, #1]
 80062a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80062a8:	d132      	bne.n	8006310 <_vfiprintf_r+0x1ac>
 80062aa:	9b03      	ldr	r3, [sp, #12]
 80062ac:	1d1a      	adds	r2, r3, #4
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	9203      	str	r2, [sp, #12]
 80062b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062b6:	3402      	adds	r4, #2
 80062b8:	9305      	str	r3, [sp, #20]
 80062ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006390 <_vfiprintf_r+0x22c>
 80062be:	7821      	ldrb	r1, [r4, #0]
 80062c0:	2203      	movs	r2, #3
 80062c2:	4650      	mov	r0, sl
 80062c4:	f7f9 ffac 	bl	8000220 <memchr>
 80062c8:	b138      	cbz	r0, 80062da <_vfiprintf_r+0x176>
 80062ca:	9b04      	ldr	r3, [sp, #16]
 80062cc:	eba0 000a 	sub.w	r0, r0, sl
 80062d0:	2240      	movs	r2, #64	@ 0x40
 80062d2:	4082      	lsls	r2, r0
 80062d4:	4313      	orrs	r3, r2
 80062d6:	3401      	adds	r4, #1
 80062d8:	9304      	str	r3, [sp, #16]
 80062da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062de:	4829      	ldr	r0, [pc, #164]	@ (8006384 <_vfiprintf_r+0x220>)
 80062e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062e4:	2206      	movs	r2, #6
 80062e6:	f7f9 ff9b 	bl	8000220 <memchr>
 80062ea:	2800      	cmp	r0, #0
 80062ec:	d03f      	beq.n	800636e <_vfiprintf_r+0x20a>
 80062ee:	4b26      	ldr	r3, [pc, #152]	@ (8006388 <_vfiprintf_r+0x224>)
 80062f0:	bb1b      	cbnz	r3, 800633a <_vfiprintf_r+0x1d6>
 80062f2:	9b03      	ldr	r3, [sp, #12]
 80062f4:	3307      	adds	r3, #7
 80062f6:	f023 0307 	bic.w	r3, r3, #7
 80062fa:	3308      	adds	r3, #8
 80062fc:	9303      	str	r3, [sp, #12]
 80062fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006300:	443b      	add	r3, r7
 8006302:	9309      	str	r3, [sp, #36]	@ 0x24
 8006304:	e76a      	b.n	80061dc <_vfiprintf_r+0x78>
 8006306:	fb0c 3202 	mla	r2, ip, r2, r3
 800630a:	460c      	mov	r4, r1
 800630c:	2001      	movs	r0, #1
 800630e:	e7a8      	b.n	8006262 <_vfiprintf_r+0xfe>
 8006310:	2300      	movs	r3, #0
 8006312:	3401      	adds	r4, #1
 8006314:	9305      	str	r3, [sp, #20]
 8006316:	4619      	mov	r1, r3
 8006318:	f04f 0c0a 	mov.w	ip, #10
 800631c:	4620      	mov	r0, r4
 800631e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006322:	3a30      	subs	r2, #48	@ 0x30
 8006324:	2a09      	cmp	r2, #9
 8006326:	d903      	bls.n	8006330 <_vfiprintf_r+0x1cc>
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0c6      	beq.n	80062ba <_vfiprintf_r+0x156>
 800632c:	9105      	str	r1, [sp, #20]
 800632e:	e7c4      	b.n	80062ba <_vfiprintf_r+0x156>
 8006330:	fb0c 2101 	mla	r1, ip, r1, r2
 8006334:	4604      	mov	r4, r0
 8006336:	2301      	movs	r3, #1
 8006338:	e7f0      	b.n	800631c <_vfiprintf_r+0x1b8>
 800633a:	ab03      	add	r3, sp, #12
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	462a      	mov	r2, r5
 8006340:	4b12      	ldr	r3, [pc, #72]	@ (800638c <_vfiprintf_r+0x228>)
 8006342:	a904      	add	r1, sp, #16
 8006344:	4630      	mov	r0, r6
 8006346:	f3af 8000 	nop.w
 800634a:	4607      	mov	r7, r0
 800634c:	1c78      	adds	r0, r7, #1
 800634e:	d1d6      	bne.n	80062fe <_vfiprintf_r+0x19a>
 8006350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006352:	07d9      	lsls	r1, r3, #31
 8006354:	d405      	bmi.n	8006362 <_vfiprintf_r+0x1fe>
 8006356:	89ab      	ldrh	r3, [r5, #12]
 8006358:	059a      	lsls	r2, r3, #22
 800635a:	d402      	bmi.n	8006362 <_vfiprintf_r+0x1fe>
 800635c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800635e:	f7ff fc77 	bl	8005c50 <__retarget_lock_release_recursive>
 8006362:	89ab      	ldrh	r3, [r5, #12]
 8006364:	065b      	lsls	r3, r3, #25
 8006366:	f53f af1f 	bmi.w	80061a8 <_vfiprintf_r+0x44>
 800636a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800636c:	e71e      	b.n	80061ac <_vfiprintf_r+0x48>
 800636e:	ab03      	add	r3, sp, #12
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	462a      	mov	r2, r5
 8006374:	4b05      	ldr	r3, [pc, #20]	@ (800638c <_vfiprintf_r+0x228>)
 8006376:	a904      	add	r1, sp, #16
 8006378:	4630      	mov	r0, r6
 800637a:	f000 f879 	bl	8006470 <_printf_i>
 800637e:	e7e4      	b.n	800634a <_vfiprintf_r+0x1e6>
 8006380:	08006aa4 	.word	0x08006aa4
 8006384:	08006aae 	.word	0x08006aae
 8006388:	00000000 	.word	0x00000000
 800638c:	0800613f 	.word	0x0800613f
 8006390:	08006aaa 	.word	0x08006aaa

08006394 <_printf_common>:
 8006394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006398:	4616      	mov	r6, r2
 800639a:	4698      	mov	r8, r3
 800639c:	688a      	ldr	r2, [r1, #8]
 800639e:	690b      	ldr	r3, [r1, #16]
 80063a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bfb8      	it	lt
 80063a8:	4613      	movlt	r3, r2
 80063aa:	6033      	str	r3, [r6, #0]
 80063ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063b0:	4607      	mov	r7, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	b10a      	cbz	r2, 80063ba <_printf_common+0x26>
 80063b6:	3301      	adds	r3, #1
 80063b8:	6033      	str	r3, [r6, #0]
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	0699      	lsls	r1, r3, #26
 80063be:	bf42      	ittt	mi
 80063c0:	6833      	ldrmi	r3, [r6, #0]
 80063c2:	3302      	addmi	r3, #2
 80063c4:	6033      	strmi	r3, [r6, #0]
 80063c6:	6825      	ldr	r5, [r4, #0]
 80063c8:	f015 0506 	ands.w	r5, r5, #6
 80063cc:	d106      	bne.n	80063dc <_printf_common+0x48>
 80063ce:	f104 0a19 	add.w	sl, r4, #25
 80063d2:	68e3      	ldr	r3, [r4, #12]
 80063d4:	6832      	ldr	r2, [r6, #0]
 80063d6:	1a9b      	subs	r3, r3, r2
 80063d8:	42ab      	cmp	r3, r5
 80063da:	dc26      	bgt.n	800642a <_printf_common+0x96>
 80063dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063e0:	6822      	ldr	r2, [r4, #0]
 80063e2:	3b00      	subs	r3, #0
 80063e4:	bf18      	it	ne
 80063e6:	2301      	movne	r3, #1
 80063e8:	0692      	lsls	r2, r2, #26
 80063ea:	d42b      	bmi.n	8006444 <_printf_common+0xb0>
 80063ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063f0:	4641      	mov	r1, r8
 80063f2:	4638      	mov	r0, r7
 80063f4:	47c8      	blx	r9
 80063f6:	3001      	adds	r0, #1
 80063f8:	d01e      	beq.n	8006438 <_printf_common+0xa4>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	6922      	ldr	r2, [r4, #16]
 80063fe:	f003 0306 	and.w	r3, r3, #6
 8006402:	2b04      	cmp	r3, #4
 8006404:	bf02      	ittt	eq
 8006406:	68e5      	ldreq	r5, [r4, #12]
 8006408:	6833      	ldreq	r3, [r6, #0]
 800640a:	1aed      	subeq	r5, r5, r3
 800640c:	68a3      	ldr	r3, [r4, #8]
 800640e:	bf0c      	ite	eq
 8006410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006414:	2500      	movne	r5, #0
 8006416:	4293      	cmp	r3, r2
 8006418:	bfc4      	itt	gt
 800641a:	1a9b      	subgt	r3, r3, r2
 800641c:	18ed      	addgt	r5, r5, r3
 800641e:	2600      	movs	r6, #0
 8006420:	341a      	adds	r4, #26
 8006422:	42b5      	cmp	r5, r6
 8006424:	d11a      	bne.n	800645c <_printf_common+0xc8>
 8006426:	2000      	movs	r0, #0
 8006428:	e008      	b.n	800643c <_printf_common+0xa8>
 800642a:	2301      	movs	r3, #1
 800642c:	4652      	mov	r2, sl
 800642e:	4641      	mov	r1, r8
 8006430:	4638      	mov	r0, r7
 8006432:	47c8      	blx	r9
 8006434:	3001      	adds	r0, #1
 8006436:	d103      	bne.n	8006440 <_printf_common+0xac>
 8006438:	f04f 30ff 	mov.w	r0, #4294967295
 800643c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006440:	3501      	adds	r5, #1
 8006442:	e7c6      	b.n	80063d2 <_printf_common+0x3e>
 8006444:	18e1      	adds	r1, r4, r3
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	2030      	movs	r0, #48	@ 0x30
 800644a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800644e:	4422      	add	r2, r4
 8006450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006458:	3302      	adds	r3, #2
 800645a:	e7c7      	b.n	80063ec <_printf_common+0x58>
 800645c:	2301      	movs	r3, #1
 800645e:	4622      	mov	r2, r4
 8006460:	4641      	mov	r1, r8
 8006462:	4638      	mov	r0, r7
 8006464:	47c8      	blx	r9
 8006466:	3001      	adds	r0, #1
 8006468:	d0e6      	beq.n	8006438 <_printf_common+0xa4>
 800646a:	3601      	adds	r6, #1
 800646c:	e7d9      	b.n	8006422 <_printf_common+0x8e>
	...

08006470 <_printf_i>:
 8006470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	7e0f      	ldrb	r7, [r1, #24]
 8006476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006478:	2f78      	cmp	r7, #120	@ 0x78
 800647a:	4691      	mov	r9, r2
 800647c:	4680      	mov	r8, r0
 800647e:	460c      	mov	r4, r1
 8006480:	469a      	mov	sl, r3
 8006482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006486:	d807      	bhi.n	8006498 <_printf_i+0x28>
 8006488:	2f62      	cmp	r7, #98	@ 0x62
 800648a:	d80a      	bhi.n	80064a2 <_printf_i+0x32>
 800648c:	2f00      	cmp	r7, #0
 800648e:	f000 80d1 	beq.w	8006634 <_printf_i+0x1c4>
 8006492:	2f58      	cmp	r7, #88	@ 0x58
 8006494:	f000 80b8 	beq.w	8006608 <_printf_i+0x198>
 8006498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800649c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064a0:	e03a      	b.n	8006518 <_printf_i+0xa8>
 80064a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064a6:	2b15      	cmp	r3, #21
 80064a8:	d8f6      	bhi.n	8006498 <_printf_i+0x28>
 80064aa:	a101      	add	r1, pc, #4	@ (adr r1, 80064b0 <_printf_i+0x40>)
 80064ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b0:	08006509 	.word	0x08006509
 80064b4:	0800651d 	.word	0x0800651d
 80064b8:	08006499 	.word	0x08006499
 80064bc:	08006499 	.word	0x08006499
 80064c0:	08006499 	.word	0x08006499
 80064c4:	08006499 	.word	0x08006499
 80064c8:	0800651d 	.word	0x0800651d
 80064cc:	08006499 	.word	0x08006499
 80064d0:	08006499 	.word	0x08006499
 80064d4:	08006499 	.word	0x08006499
 80064d8:	08006499 	.word	0x08006499
 80064dc:	0800661b 	.word	0x0800661b
 80064e0:	08006547 	.word	0x08006547
 80064e4:	080065d5 	.word	0x080065d5
 80064e8:	08006499 	.word	0x08006499
 80064ec:	08006499 	.word	0x08006499
 80064f0:	0800663d 	.word	0x0800663d
 80064f4:	08006499 	.word	0x08006499
 80064f8:	08006547 	.word	0x08006547
 80064fc:	08006499 	.word	0x08006499
 8006500:	08006499 	.word	0x08006499
 8006504:	080065dd 	.word	0x080065dd
 8006508:	6833      	ldr	r3, [r6, #0]
 800650a:	1d1a      	adds	r2, r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6032      	str	r2, [r6, #0]
 8006510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006518:	2301      	movs	r3, #1
 800651a:	e09c      	b.n	8006656 <_printf_i+0x1e6>
 800651c:	6833      	ldr	r3, [r6, #0]
 800651e:	6820      	ldr	r0, [r4, #0]
 8006520:	1d19      	adds	r1, r3, #4
 8006522:	6031      	str	r1, [r6, #0]
 8006524:	0606      	lsls	r6, r0, #24
 8006526:	d501      	bpl.n	800652c <_printf_i+0xbc>
 8006528:	681d      	ldr	r5, [r3, #0]
 800652a:	e003      	b.n	8006534 <_printf_i+0xc4>
 800652c:	0645      	lsls	r5, r0, #25
 800652e:	d5fb      	bpl.n	8006528 <_printf_i+0xb8>
 8006530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006534:	2d00      	cmp	r5, #0
 8006536:	da03      	bge.n	8006540 <_printf_i+0xd0>
 8006538:	232d      	movs	r3, #45	@ 0x2d
 800653a:	426d      	negs	r5, r5
 800653c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006540:	4858      	ldr	r0, [pc, #352]	@ (80066a4 <_printf_i+0x234>)
 8006542:	230a      	movs	r3, #10
 8006544:	e011      	b.n	800656a <_printf_i+0xfa>
 8006546:	6821      	ldr	r1, [r4, #0]
 8006548:	6833      	ldr	r3, [r6, #0]
 800654a:	0608      	lsls	r0, r1, #24
 800654c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006550:	d402      	bmi.n	8006558 <_printf_i+0xe8>
 8006552:	0649      	lsls	r1, r1, #25
 8006554:	bf48      	it	mi
 8006556:	b2ad      	uxthmi	r5, r5
 8006558:	2f6f      	cmp	r7, #111	@ 0x6f
 800655a:	4852      	ldr	r0, [pc, #328]	@ (80066a4 <_printf_i+0x234>)
 800655c:	6033      	str	r3, [r6, #0]
 800655e:	bf14      	ite	ne
 8006560:	230a      	movne	r3, #10
 8006562:	2308      	moveq	r3, #8
 8006564:	2100      	movs	r1, #0
 8006566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800656a:	6866      	ldr	r6, [r4, #4]
 800656c:	60a6      	str	r6, [r4, #8]
 800656e:	2e00      	cmp	r6, #0
 8006570:	db05      	blt.n	800657e <_printf_i+0x10e>
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	432e      	orrs	r6, r5
 8006576:	f021 0104 	bic.w	r1, r1, #4
 800657a:	6021      	str	r1, [r4, #0]
 800657c:	d04b      	beq.n	8006616 <_printf_i+0x1a6>
 800657e:	4616      	mov	r6, r2
 8006580:	fbb5 f1f3 	udiv	r1, r5, r3
 8006584:	fb03 5711 	mls	r7, r3, r1, r5
 8006588:	5dc7      	ldrb	r7, [r0, r7]
 800658a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800658e:	462f      	mov	r7, r5
 8006590:	42bb      	cmp	r3, r7
 8006592:	460d      	mov	r5, r1
 8006594:	d9f4      	bls.n	8006580 <_printf_i+0x110>
 8006596:	2b08      	cmp	r3, #8
 8006598:	d10b      	bne.n	80065b2 <_printf_i+0x142>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	07df      	lsls	r7, r3, #31
 800659e:	d508      	bpl.n	80065b2 <_printf_i+0x142>
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	6861      	ldr	r1, [r4, #4]
 80065a4:	4299      	cmp	r1, r3
 80065a6:	bfde      	ittt	le
 80065a8:	2330      	movle	r3, #48	@ 0x30
 80065aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065b2:	1b92      	subs	r2, r2, r6
 80065b4:	6122      	str	r2, [r4, #16]
 80065b6:	f8cd a000 	str.w	sl, [sp]
 80065ba:	464b      	mov	r3, r9
 80065bc:	aa03      	add	r2, sp, #12
 80065be:	4621      	mov	r1, r4
 80065c0:	4640      	mov	r0, r8
 80065c2:	f7ff fee7 	bl	8006394 <_printf_common>
 80065c6:	3001      	adds	r0, #1
 80065c8:	d14a      	bne.n	8006660 <_printf_i+0x1f0>
 80065ca:	f04f 30ff 	mov.w	r0, #4294967295
 80065ce:	b004      	add	sp, #16
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	f043 0320 	orr.w	r3, r3, #32
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	4832      	ldr	r0, [pc, #200]	@ (80066a8 <_printf_i+0x238>)
 80065de:	2778      	movs	r7, #120	@ 0x78
 80065e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	6831      	ldr	r1, [r6, #0]
 80065e8:	061f      	lsls	r7, r3, #24
 80065ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80065ee:	d402      	bmi.n	80065f6 <_printf_i+0x186>
 80065f0:	065f      	lsls	r7, r3, #25
 80065f2:	bf48      	it	mi
 80065f4:	b2ad      	uxthmi	r5, r5
 80065f6:	6031      	str	r1, [r6, #0]
 80065f8:	07d9      	lsls	r1, r3, #31
 80065fa:	bf44      	itt	mi
 80065fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006600:	6023      	strmi	r3, [r4, #0]
 8006602:	b11d      	cbz	r5, 800660c <_printf_i+0x19c>
 8006604:	2310      	movs	r3, #16
 8006606:	e7ad      	b.n	8006564 <_printf_i+0xf4>
 8006608:	4826      	ldr	r0, [pc, #152]	@ (80066a4 <_printf_i+0x234>)
 800660a:	e7e9      	b.n	80065e0 <_printf_i+0x170>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	f023 0320 	bic.w	r3, r3, #32
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	e7f6      	b.n	8006604 <_printf_i+0x194>
 8006616:	4616      	mov	r6, r2
 8006618:	e7bd      	b.n	8006596 <_printf_i+0x126>
 800661a:	6833      	ldr	r3, [r6, #0]
 800661c:	6825      	ldr	r5, [r4, #0]
 800661e:	6961      	ldr	r1, [r4, #20]
 8006620:	1d18      	adds	r0, r3, #4
 8006622:	6030      	str	r0, [r6, #0]
 8006624:	062e      	lsls	r6, r5, #24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	d501      	bpl.n	800662e <_printf_i+0x1be>
 800662a:	6019      	str	r1, [r3, #0]
 800662c:	e002      	b.n	8006634 <_printf_i+0x1c4>
 800662e:	0668      	lsls	r0, r5, #25
 8006630:	d5fb      	bpl.n	800662a <_printf_i+0x1ba>
 8006632:	8019      	strh	r1, [r3, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	6123      	str	r3, [r4, #16]
 8006638:	4616      	mov	r6, r2
 800663a:	e7bc      	b.n	80065b6 <_printf_i+0x146>
 800663c:	6833      	ldr	r3, [r6, #0]
 800663e:	1d1a      	adds	r2, r3, #4
 8006640:	6032      	str	r2, [r6, #0]
 8006642:	681e      	ldr	r6, [r3, #0]
 8006644:	6862      	ldr	r2, [r4, #4]
 8006646:	2100      	movs	r1, #0
 8006648:	4630      	mov	r0, r6
 800664a:	f7f9 fde9 	bl	8000220 <memchr>
 800664e:	b108      	cbz	r0, 8006654 <_printf_i+0x1e4>
 8006650:	1b80      	subs	r0, r0, r6
 8006652:	6060      	str	r0, [r4, #4]
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	2300      	movs	r3, #0
 800665a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665e:	e7aa      	b.n	80065b6 <_printf_i+0x146>
 8006660:	6923      	ldr	r3, [r4, #16]
 8006662:	4632      	mov	r2, r6
 8006664:	4649      	mov	r1, r9
 8006666:	4640      	mov	r0, r8
 8006668:	47d0      	blx	sl
 800666a:	3001      	adds	r0, #1
 800666c:	d0ad      	beq.n	80065ca <_printf_i+0x15a>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	079b      	lsls	r3, r3, #30
 8006672:	d413      	bmi.n	800669c <_printf_i+0x22c>
 8006674:	68e0      	ldr	r0, [r4, #12]
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	4298      	cmp	r0, r3
 800667a:	bfb8      	it	lt
 800667c:	4618      	movlt	r0, r3
 800667e:	e7a6      	b.n	80065ce <_printf_i+0x15e>
 8006680:	2301      	movs	r3, #1
 8006682:	4632      	mov	r2, r6
 8006684:	4649      	mov	r1, r9
 8006686:	4640      	mov	r0, r8
 8006688:	47d0      	blx	sl
 800668a:	3001      	adds	r0, #1
 800668c:	d09d      	beq.n	80065ca <_printf_i+0x15a>
 800668e:	3501      	adds	r5, #1
 8006690:	68e3      	ldr	r3, [r4, #12]
 8006692:	9903      	ldr	r1, [sp, #12]
 8006694:	1a5b      	subs	r3, r3, r1
 8006696:	42ab      	cmp	r3, r5
 8006698:	dcf2      	bgt.n	8006680 <_printf_i+0x210>
 800669a:	e7eb      	b.n	8006674 <_printf_i+0x204>
 800669c:	2500      	movs	r5, #0
 800669e:	f104 0619 	add.w	r6, r4, #25
 80066a2:	e7f5      	b.n	8006690 <_printf_i+0x220>
 80066a4:	08006ab5 	.word	0x08006ab5
 80066a8:	08006ac6 	.word	0x08006ac6

080066ac <__sflush_r>:
 80066ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b4:	0716      	lsls	r6, r2, #28
 80066b6:	4605      	mov	r5, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	d454      	bmi.n	8006766 <__sflush_r+0xba>
 80066bc:	684b      	ldr	r3, [r1, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	dc02      	bgt.n	80066c8 <__sflush_r+0x1c>
 80066c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dd48      	ble.n	800675a <__sflush_r+0xae>
 80066c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	d045      	beq.n	800675a <__sflush_r+0xae>
 80066ce:	2300      	movs	r3, #0
 80066d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80066d4:	682f      	ldr	r7, [r5, #0]
 80066d6:	6a21      	ldr	r1, [r4, #32]
 80066d8:	602b      	str	r3, [r5, #0]
 80066da:	d030      	beq.n	800673e <__sflush_r+0x92>
 80066dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	0759      	lsls	r1, r3, #29
 80066e2:	d505      	bpl.n	80066f0 <__sflush_r+0x44>
 80066e4:	6863      	ldr	r3, [r4, #4]
 80066e6:	1ad2      	subs	r2, r2, r3
 80066e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80066ea:	b10b      	cbz	r3, 80066f0 <__sflush_r+0x44>
 80066ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80066ee:	1ad2      	subs	r2, r2, r3
 80066f0:	2300      	movs	r3, #0
 80066f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066f4:	6a21      	ldr	r1, [r4, #32]
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b0      	blx	r6
 80066fa:	1c43      	adds	r3, r0, #1
 80066fc:	89a3      	ldrh	r3, [r4, #12]
 80066fe:	d106      	bne.n	800670e <__sflush_r+0x62>
 8006700:	6829      	ldr	r1, [r5, #0]
 8006702:	291d      	cmp	r1, #29
 8006704:	d82b      	bhi.n	800675e <__sflush_r+0xb2>
 8006706:	4a2a      	ldr	r2, [pc, #168]	@ (80067b0 <__sflush_r+0x104>)
 8006708:	40ca      	lsrs	r2, r1
 800670a:	07d6      	lsls	r6, r2, #31
 800670c:	d527      	bpl.n	800675e <__sflush_r+0xb2>
 800670e:	2200      	movs	r2, #0
 8006710:	6062      	str	r2, [r4, #4]
 8006712:	04d9      	lsls	r1, r3, #19
 8006714:	6922      	ldr	r2, [r4, #16]
 8006716:	6022      	str	r2, [r4, #0]
 8006718:	d504      	bpl.n	8006724 <__sflush_r+0x78>
 800671a:	1c42      	adds	r2, r0, #1
 800671c:	d101      	bne.n	8006722 <__sflush_r+0x76>
 800671e:	682b      	ldr	r3, [r5, #0]
 8006720:	b903      	cbnz	r3, 8006724 <__sflush_r+0x78>
 8006722:	6560      	str	r0, [r4, #84]	@ 0x54
 8006724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006726:	602f      	str	r7, [r5, #0]
 8006728:	b1b9      	cbz	r1, 800675a <__sflush_r+0xae>
 800672a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800672e:	4299      	cmp	r1, r3
 8006730:	d002      	beq.n	8006738 <__sflush_r+0x8c>
 8006732:	4628      	mov	r0, r5
 8006734:	f7ff fa9c 	bl	8005c70 <_free_r>
 8006738:	2300      	movs	r3, #0
 800673a:	6363      	str	r3, [r4, #52]	@ 0x34
 800673c:	e00d      	b.n	800675a <__sflush_r+0xae>
 800673e:	2301      	movs	r3, #1
 8006740:	4628      	mov	r0, r5
 8006742:	47b0      	blx	r6
 8006744:	4602      	mov	r2, r0
 8006746:	1c50      	adds	r0, r2, #1
 8006748:	d1c9      	bne.n	80066de <__sflush_r+0x32>
 800674a:	682b      	ldr	r3, [r5, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0c6      	beq.n	80066de <__sflush_r+0x32>
 8006750:	2b1d      	cmp	r3, #29
 8006752:	d001      	beq.n	8006758 <__sflush_r+0xac>
 8006754:	2b16      	cmp	r3, #22
 8006756:	d11e      	bne.n	8006796 <__sflush_r+0xea>
 8006758:	602f      	str	r7, [r5, #0]
 800675a:	2000      	movs	r0, #0
 800675c:	e022      	b.n	80067a4 <__sflush_r+0xf8>
 800675e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006762:	b21b      	sxth	r3, r3
 8006764:	e01b      	b.n	800679e <__sflush_r+0xf2>
 8006766:	690f      	ldr	r7, [r1, #16]
 8006768:	2f00      	cmp	r7, #0
 800676a:	d0f6      	beq.n	800675a <__sflush_r+0xae>
 800676c:	0793      	lsls	r3, r2, #30
 800676e:	680e      	ldr	r6, [r1, #0]
 8006770:	bf08      	it	eq
 8006772:	694b      	ldreq	r3, [r1, #20]
 8006774:	600f      	str	r7, [r1, #0]
 8006776:	bf18      	it	ne
 8006778:	2300      	movne	r3, #0
 800677a:	eba6 0807 	sub.w	r8, r6, r7
 800677e:	608b      	str	r3, [r1, #8]
 8006780:	f1b8 0f00 	cmp.w	r8, #0
 8006784:	dde9      	ble.n	800675a <__sflush_r+0xae>
 8006786:	6a21      	ldr	r1, [r4, #32]
 8006788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800678a:	4643      	mov	r3, r8
 800678c:	463a      	mov	r2, r7
 800678e:	4628      	mov	r0, r5
 8006790:	47b0      	blx	r6
 8006792:	2800      	cmp	r0, #0
 8006794:	dc08      	bgt.n	80067a8 <__sflush_r+0xfc>
 8006796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a8:	4407      	add	r7, r0
 80067aa:	eba8 0800 	sub.w	r8, r8, r0
 80067ae:	e7e7      	b.n	8006780 <__sflush_r+0xd4>
 80067b0:	20400001 	.word	0x20400001

080067b4 <_fflush_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	690b      	ldr	r3, [r1, #16]
 80067b8:	4605      	mov	r5, r0
 80067ba:	460c      	mov	r4, r1
 80067bc:	b913      	cbnz	r3, 80067c4 <_fflush_r+0x10>
 80067be:	2500      	movs	r5, #0
 80067c0:	4628      	mov	r0, r5
 80067c2:	bd38      	pop	{r3, r4, r5, pc}
 80067c4:	b118      	cbz	r0, 80067ce <_fflush_r+0x1a>
 80067c6:	6a03      	ldr	r3, [r0, #32]
 80067c8:	b90b      	cbnz	r3, 80067ce <_fflush_r+0x1a>
 80067ca:	f7fe fff1 	bl	80057b0 <__sinit>
 80067ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0f3      	beq.n	80067be <_fflush_r+0xa>
 80067d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80067d8:	07d0      	lsls	r0, r2, #31
 80067da:	d404      	bmi.n	80067e6 <_fflush_r+0x32>
 80067dc:	0599      	lsls	r1, r3, #22
 80067de:	d402      	bmi.n	80067e6 <_fflush_r+0x32>
 80067e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067e2:	f7ff fa34 	bl	8005c4e <__retarget_lock_acquire_recursive>
 80067e6:	4628      	mov	r0, r5
 80067e8:	4621      	mov	r1, r4
 80067ea:	f7ff ff5f 	bl	80066ac <__sflush_r>
 80067ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80067f0:	07da      	lsls	r2, r3, #31
 80067f2:	4605      	mov	r5, r0
 80067f4:	d4e4      	bmi.n	80067c0 <_fflush_r+0xc>
 80067f6:	89a3      	ldrh	r3, [r4, #12]
 80067f8:	059b      	lsls	r3, r3, #22
 80067fa:	d4e1      	bmi.n	80067c0 <_fflush_r+0xc>
 80067fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067fe:	f7ff fa27 	bl	8005c50 <__retarget_lock_release_recursive>
 8006802:	e7dd      	b.n	80067c0 <_fflush_r+0xc>

08006804 <__swhatbuf_r>:
 8006804:	b570      	push	{r4, r5, r6, lr}
 8006806:	460c      	mov	r4, r1
 8006808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800680c:	2900      	cmp	r1, #0
 800680e:	b096      	sub	sp, #88	@ 0x58
 8006810:	4615      	mov	r5, r2
 8006812:	461e      	mov	r6, r3
 8006814:	da0d      	bge.n	8006832 <__swhatbuf_r+0x2e>
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800681c:	f04f 0100 	mov.w	r1, #0
 8006820:	bf14      	ite	ne
 8006822:	2340      	movne	r3, #64	@ 0x40
 8006824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006828:	2000      	movs	r0, #0
 800682a:	6031      	str	r1, [r6, #0]
 800682c:	602b      	str	r3, [r5, #0]
 800682e:	b016      	add	sp, #88	@ 0x58
 8006830:	bd70      	pop	{r4, r5, r6, pc}
 8006832:	466a      	mov	r2, sp
 8006834:	f000 f862 	bl	80068fc <_fstat_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	dbec      	blt.n	8006816 <__swhatbuf_r+0x12>
 800683c:	9901      	ldr	r1, [sp, #4]
 800683e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006846:	4259      	negs	r1, r3
 8006848:	4159      	adcs	r1, r3
 800684a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800684e:	e7eb      	b.n	8006828 <__swhatbuf_r+0x24>

08006850 <__smakebuf_r>:
 8006850:	898b      	ldrh	r3, [r1, #12]
 8006852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006854:	079d      	lsls	r5, r3, #30
 8006856:	4606      	mov	r6, r0
 8006858:	460c      	mov	r4, r1
 800685a:	d507      	bpl.n	800686c <__smakebuf_r+0x1c>
 800685c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	2301      	movs	r3, #1
 8006866:	6163      	str	r3, [r4, #20]
 8006868:	b003      	add	sp, #12
 800686a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686c:	ab01      	add	r3, sp, #4
 800686e:	466a      	mov	r2, sp
 8006870:	f7ff ffc8 	bl	8006804 <__swhatbuf_r>
 8006874:	9f00      	ldr	r7, [sp, #0]
 8006876:	4605      	mov	r5, r0
 8006878:	4639      	mov	r1, r7
 800687a:	4630      	mov	r0, r6
 800687c:	f7ff fa64 	bl	8005d48 <_malloc_r>
 8006880:	b948      	cbnz	r0, 8006896 <__smakebuf_r+0x46>
 8006882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006886:	059a      	lsls	r2, r3, #22
 8006888:	d4ee      	bmi.n	8006868 <__smakebuf_r+0x18>
 800688a:	f023 0303 	bic.w	r3, r3, #3
 800688e:	f043 0302 	orr.w	r3, r3, #2
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	e7e2      	b.n	800685c <__smakebuf_r+0xc>
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	6020      	str	r0, [r4, #0]
 800689a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	9b01      	ldr	r3, [sp, #4]
 80068a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068a6:	b15b      	cbz	r3, 80068c0 <__smakebuf_r+0x70>
 80068a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068ac:	4630      	mov	r0, r6
 80068ae:	f000 f837 	bl	8006920 <_isatty_r>
 80068b2:	b128      	cbz	r0, 80068c0 <__smakebuf_r+0x70>
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	431d      	orrs	r5, r3
 80068c4:	81a5      	strh	r5, [r4, #12]
 80068c6:	e7cf      	b.n	8006868 <__smakebuf_r+0x18>

080068c8 <memmove>:
 80068c8:	4288      	cmp	r0, r1
 80068ca:	b510      	push	{r4, lr}
 80068cc:	eb01 0402 	add.w	r4, r1, r2
 80068d0:	d902      	bls.n	80068d8 <memmove+0x10>
 80068d2:	4284      	cmp	r4, r0
 80068d4:	4623      	mov	r3, r4
 80068d6:	d807      	bhi.n	80068e8 <memmove+0x20>
 80068d8:	1e43      	subs	r3, r0, #1
 80068da:	42a1      	cmp	r1, r4
 80068dc:	d008      	beq.n	80068f0 <memmove+0x28>
 80068de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068e6:	e7f8      	b.n	80068da <memmove+0x12>
 80068e8:	4402      	add	r2, r0
 80068ea:	4601      	mov	r1, r0
 80068ec:	428a      	cmp	r2, r1
 80068ee:	d100      	bne.n	80068f2 <memmove+0x2a>
 80068f0:	bd10      	pop	{r4, pc}
 80068f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068fa:	e7f7      	b.n	80068ec <memmove+0x24>

080068fc <_fstat_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d07      	ldr	r5, [pc, #28]	@ (800691c <_fstat_r+0x20>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	4611      	mov	r1, r2
 8006908:	602b      	str	r3, [r5, #0]
 800690a:	f7fa fb94 	bl	8001036 <_fstat>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d102      	bne.n	8006918 <_fstat_r+0x1c>
 8006912:	682b      	ldr	r3, [r5, #0]
 8006914:	b103      	cbz	r3, 8006918 <_fstat_r+0x1c>
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	200014d4 	.word	0x200014d4

08006920 <_isatty_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4d06      	ldr	r5, [pc, #24]	@ (800693c <_isatty_r+0x1c>)
 8006924:	2300      	movs	r3, #0
 8006926:	4604      	mov	r4, r0
 8006928:	4608      	mov	r0, r1
 800692a:	602b      	str	r3, [r5, #0]
 800692c:	f7fa fb93 	bl	8001056 <_isatty>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_isatty_r+0x1a>
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	b103      	cbz	r3, 800693a <_isatty_r+0x1a>
 8006938:	6023      	str	r3, [r4, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	200014d4 	.word	0x200014d4

08006940 <_sbrk_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4d06      	ldr	r5, [pc, #24]	@ (800695c <_sbrk_r+0x1c>)
 8006944:	2300      	movs	r3, #0
 8006946:	4604      	mov	r4, r0
 8006948:	4608      	mov	r0, r1
 800694a:	602b      	str	r3, [r5, #0]
 800694c:	f7fa fb9c 	bl	8001088 <_sbrk>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_sbrk_r+0x1a>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_sbrk_r+0x1a>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	200014d4 	.word	0x200014d4

08006960 <_realloc_r>:
 8006960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006964:	4607      	mov	r7, r0
 8006966:	4614      	mov	r4, r2
 8006968:	460d      	mov	r5, r1
 800696a:	b921      	cbnz	r1, 8006976 <_realloc_r+0x16>
 800696c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006970:	4611      	mov	r1, r2
 8006972:	f7ff b9e9 	b.w	8005d48 <_malloc_r>
 8006976:	b92a      	cbnz	r2, 8006984 <_realloc_r+0x24>
 8006978:	f7ff f97a 	bl	8005c70 <_free_r>
 800697c:	4625      	mov	r5, r4
 800697e:	4628      	mov	r0, r5
 8006980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006984:	f000 f81a 	bl	80069bc <_malloc_usable_size_r>
 8006988:	4284      	cmp	r4, r0
 800698a:	4606      	mov	r6, r0
 800698c:	d802      	bhi.n	8006994 <_realloc_r+0x34>
 800698e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006992:	d8f4      	bhi.n	800697e <_realloc_r+0x1e>
 8006994:	4621      	mov	r1, r4
 8006996:	4638      	mov	r0, r7
 8006998:	f7ff f9d6 	bl	8005d48 <_malloc_r>
 800699c:	4680      	mov	r8, r0
 800699e:	b908      	cbnz	r0, 80069a4 <_realloc_r+0x44>
 80069a0:	4645      	mov	r5, r8
 80069a2:	e7ec      	b.n	800697e <_realloc_r+0x1e>
 80069a4:	42b4      	cmp	r4, r6
 80069a6:	4622      	mov	r2, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	bf28      	it	cs
 80069ac:	4632      	movcs	r2, r6
 80069ae:	f7ff f950 	bl	8005c52 <memcpy>
 80069b2:	4629      	mov	r1, r5
 80069b4:	4638      	mov	r0, r7
 80069b6:	f7ff f95b 	bl	8005c70 <_free_r>
 80069ba:	e7f1      	b.n	80069a0 <_realloc_r+0x40>

080069bc <_malloc_usable_size_r>:
 80069bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c0:	1f18      	subs	r0, r3, #4
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bfbc      	itt	lt
 80069c6:	580b      	ldrlt	r3, [r1, r0]
 80069c8:	18c0      	addlt	r0, r0, r3
 80069ca:	4770      	bx	lr

080069cc <_init>:
 80069cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ce:	bf00      	nop
 80069d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d2:	bc08      	pop	{r3}
 80069d4:	469e      	mov	lr, r3
 80069d6:	4770      	bx	lr

080069d8 <_fini>:
 80069d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069da:	bf00      	nop
 80069dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069de:	bc08      	pop	{r3}
 80069e0:	469e      	mov	lr, r3
 80069e2:	4770      	bx	lr
