
E22-Tx_V0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08006990  08006990  00007990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a98  08006a98  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006a98  08006a98  00007a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aa0  08006aa0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aa0  08006aa0  00007aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006aa4  08006aa4  00007aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006aa8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001478  20000068  08006b10  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014e0  08006b10  000084e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001047a  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eae  00000000  00000000  00018512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0001b3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a48  00000000  00000000  0001c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002483f  00000000  00000000  0001cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134ff  00000000  00000000  000413ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d31d6  00000000  00000000  000548ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127ac4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000403c  00000000  00000000  00127b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012bb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006978 	.word	0x08006978

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006978 	.word	0x08006978

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <circ_buffer_enqueue>:
 * @param 	data	: 	Array of bytes to add to the buffer
 *
 * @param 	size 	:	Size of the data array
 */
void circ_buffer_enqueue(circ_buffer_t *cb, uint8_t* data, uint8_t size)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	4613      	mov	r3, r2
 80005f8:	71fb      	strb	r3, [r7, #7]
	if ((cb->end + 1) % BUFFER_SIZE == cb->start)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000600:	1c59      	adds	r1, r3, #1
 8000602:	4b1e      	ldr	r3, [pc, #120]	@ (800067c <circ_buffer_enqueue+0x90>)
 8000604:	fb83 2301 	smull	r2, r3, r3, r1
 8000608:	105a      	asrs	r2, r3, #1
 800060a:	17cb      	asrs	r3, r1, #31
 800060c:	1ad2      	subs	r2, r2, r3
 800060e:	4613      	mov	r3, r2
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	4413      	add	r3, r2
 8000614:	1aca      	subs	r2, r1, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 800061c:	429a      	cmp	r2, r3
 800061e:	d029      	beq.n	8000674 <circ_buffer_enqueue+0x88>
	{
		// Buffer is full, do not add new element
		return;
	}
	memcpy(cb->buffer[cb->end], data, size * sizeof(uint8_t));
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000626:	461a      	mov	r2, r3
 8000628:	23f5      	movs	r3, #245	@ 0xf5
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4413      	add	r3, r2
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	68b9      	ldr	r1, [r7, #8]
 8000636:	4618      	mov	r0, r3
 8000638:	f005 fae1 	bl	8005bfe <memcpy>
	cb->elementSizes[cb->end] = size;
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	4413      	add	r3, r2
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	f883 24cb 	strb.w	r2, [r3, #1227]	@ 0x4cb
	cb->end = (cb->end + 1) % BUFFER_SIZE;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <circ_buffer_enqueue+0x90>)
 8000658:	fb83 1302 	smull	r1, r3, r3, r2
 800065c:	1059      	asrs	r1, r3, #1
 800065e:	17d3      	asrs	r3, r2, #31
 8000660:	1ac9      	subs	r1, r1, r3
 8000662:	460b      	mov	r3, r1
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	440b      	add	r3, r1
 8000668:	1ad1      	subs	r1, r2, r3
 800066a:	b2ca      	uxtb	r2, r1
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f883 24ca 	strb.w	r2, [r3, #1226]	@ 0x4ca
 8000672:	e000      	b.n	8000676 <circ_buffer_enqueue+0x8a>
		return;
 8000674:	bf00      	nop
}
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	66666667 	.word	0x66666667

08000680 <circ_buffer_dequeue>:
 * @param 	size	:	Pointer to an integer to store the size of the returned array
 *
 * @return 	Pointer to the first element in the buffer
 */
uint8_t* circ_buffer_dequeue(circ_buffer_t *cb, uint8_t *size)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	uint8_t *element = cb->buffer[cb->start];
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 8000690:	461a      	mov	r2, r3
 8000692:	23f5      	movs	r3, #245	@ 0xf5
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
	if (size)
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d009      	beq.n	80006b8 <circ_buffer_dequeue+0x38>
	{
		*size = cb->elementSizes[cb->start];
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	f893 24cb 	ldrb.w	r2, [r3, #1227]	@ 0x4cb
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	701a      	strb	r2, [r3, #0]
	}
	cb->start = (cb->start + 1) % BUFFER_SIZE;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 80006be:	1c5a      	adds	r2, r3, #1
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <circ_buffer_dequeue+0x6c>)
 80006c2:	fb83 1302 	smull	r1, r3, r3, r2
 80006c6:	1059      	asrs	r1, r3, #1
 80006c8:	17d3      	asrs	r3, r2, #31
 80006ca:	1ac9      	subs	r1, r1, r3
 80006cc:	460b      	mov	r3, r1
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	440b      	add	r3, r1
 80006d2:	1ad1      	subs	r1, r2, r3
 80006d4:	b2ca      	uxtb	r2, r1
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f883 24c9 	strb.w	r2, [r3, #1225]	@ 0x4c9
	return element;
 80006dc:	68fb      	ldr	r3, [r7, #12]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	66666667 	.word	0x66666667

080006f0 <circ_buffer_getNextSize>:
 * @param 	cb		: 	Pointer to the circular buffer
 *
 * @return 	Number	: 	of arrays in the buffer
 */
uint8_t circ_buffer_getNextSize(circ_buffer_t *cb)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	if (cb->start == cb->end)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f893 24c9 	ldrb.w	r2, [r3, #1225]	@ 0x4c9
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	f893 34ca 	ldrb.w	r3, [r3, #1226]	@ 0x4ca
 8000704:	429a      	cmp	r2, r3
 8000706:	d101      	bne.n	800070c <circ_buffer_getNextSize+0x1c>
	{
		return 0;
 8000708:	2300      	movs	r3, #0
 800070a:	e007      	b.n	800071c <circ_buffer_getNextSize+0x2c>
	}
	else
	{
		return cb->elementSizes[cb->start];
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f893 34c9 	ldrb.w	r3, [r3, #1225]	@ 0x4c9
 8000712:	461a      	mov	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	f893 34cb 	ldrb.w	r3, [r3, #1227]	@ 0x4cb
	}
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <MX_DMA_Init+0x4c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	@ (8000774 <MX_DMA_Init+0x4c>)
 8000738:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <MX_DMA_Init+0x4c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800074a:	2200      	movs	r2, #0
 800074c:	2100      	movs	r1, #0
 800074e:	2010      	movs	r0, #16
 8000750:	f001 f82f 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000754:	2010      	movs	r0, #16
 8000756:	f001 f848 	bl	80017ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	2100      	movs	r1, #0
 800075e:	2011      	movs	r0, #17
 8000760:	f001 f827 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000764:	2011      	movs	r0, #17
 8000766:	f001 f840 	bl	80017ea <HAL_NVIC_EnableIRQ>

}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <e22_lora_init>:
					void* transmissionFunc,
					void* receptionFunc,
					void* receptionCallbackFunc,
					void* configModeFunc,
					void* TransceiverModeFunc)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]
	hE22.huart 						= huart;
 8000786:	4a15      	ldr	r2, [pc, #84]	@ (80007dc <e22_lora_init+0x64>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	6013      	str	r3, [r2, #0]
	hE22.loraTransmit 				= transmissionFunc;
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <e22_lora_init+0x64>)
 8000790:	6053      	str	r3, [r2, #4]
	hE22.loraStartReception 		= receptionFunc;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a11      	ldr	r2, [pc, #68]	@ (80007dc <e22_lora_init+0x64>)
 8000796:	6093      	str	r3, [r2, #8]
	hE22.loraReceive		 		= receptionCallbackFunc;
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	4a10      	ldr	r2, [pc, #64]	@ (80007dc <e22_lora_init+0x64>)
 800079c:	60d3      	str	r3, [r2, #12]
	hE22.loraConfigurationMode 		= configModeFunc;
 800079e:	69bb      	ldr	r3, [r7, #24]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <e22_lora_init+0x64>)
 80007a2:	6153      	str	r3, [r2, #20]
	hE22.loraTransceiverMode		= TransceiverModeFunc;
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <e22_lora_init+0x64>)
 80007a8:	6113      	str	r3, [r2, #16]

	//Assign DMA buffer pointers.
	hE22.pRxDmaBuffer = rxDmaBuffer;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <e22_lora_init+0x64>)
 80007ac:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <e22_lora_init+0x68>)
 80007ae:	f8c3 2ab0 	str.w	r2, [r3, #2736]	@ 0xab0
	hE22.pTxDmaBuffer = txDmaBuffer;
 80007b2:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <e22_lora_init+0x64>)
 80007b4:	4a0b      	ldr	r2, [pc, #44]	@ (80007e4 <e22_lora_init+0x6c>)
 80007b6:	f8c3 2ab4 	str.w	r2, [r3, #2740]	@ 0xab4
	//transceiver mode as default
	hE22.loraTransceiverMode();
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <e22_lora_init+0x64>)
 80007bc:	691b      	ldr	r3, [r3, #16]
 80007be:	4798      	blx	r3

	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <e22_lora_init+0x64>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	4a05      	ldr	r2, [pc, #20]	@ (80007dc <e22_lora_init+0x64>)
 80007c6:	6810      	ldr	r0, [r2, #0]
 80007c8:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <e22_lora_init+0x64>)
 80007ca:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	@ 0xab0
 80007ce:	22f0      	movs	r2, #240	@ 0xf0
 80007d0:	4798      	blx	r3
}
 80007d2:	bf00      	nop
 80007d4:	3710      	adds	r7, #16
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000084 	.word	0x20000084
 80007e0:	20000b3c 	.word	0x20000b3c
 80007e4:	20000c2c 	.word	0x20000c2c

080007e8 <e22_lora_transnit>:
 *
 * @param channel	:	RF channel to send data over
 *
 */
void e22_lora_transnit(uint8_t *pData, uint16_t size, uint16_t address, uint8_t channel)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	4608      	mov	r0, r1
 80007f2:	4611      	mov	r1, r2
 80007f4:	461a      	mov	r2, r3
 80007f6:	4603      	mov	r3, r0
 80007f8:	817b      	strh	r3, [r7, #10]
 80007fa:	460b      	mov	r3, r1
 80007fc:	813b      	strh	r3, [r7, #8]
 80007fe:	4613      	mov	r3, r2
 8000800:	71fb      	strb	r3, [r7, #7]
	const uint8_t overheadSize = 3;
 8000802:	2303      	movs	r3, #3
 8000804:	75fb      	strb	r3, [r7, #23]

	memset(&hE22.packet, 0, sizeof(e22_packet_t));
 8000806:	22f4      	movs	r2, #244	@ 0xf4
 8000808:	2100      	movs	r1, #0
 800080a:	4815      	ldr	r0, [pc, #84]	@ (8000860 <e22_lora_transnit+0x78>)
 800080c:	f005 f97c 	bl	8005b08 <memset>
	//Address 2 bytes swap
	hE22.packet.address = (address >> 8) | (address << 8);
 8000810:	893b      	ldrh	r3, [r7, #8]
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	b29b      	uxth	r3, r3
 8000816:	b21a      	sxth	r2, r3
 8000818:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	b21b      	sxth	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <e22_lora_transnit+0x7c>)
 8000828:	831a      	strh	r2, [r3, #24]

	hE22.packet.chanel = channel;
 800082a:	4a0e      	ldr	r2, [pc, #56]	@ (8000864 <e22_lora_transnit+0x7c>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	7693      	strb	r3, [r2, #26]

	hE22.txPortReady = true;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <e22_lora_transnit+0x7c>)
 8000832:	2201      	movs	r2, #1
 8000834:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

	memcpy(&hE22.packet.dataBuffer, pData, size);
 8000838:	897b      	ldrh	r3, [r7, #10]
 800083a:	461a      	mov	r2, r3
 800083c:	68f9      	ldr	r1, [r7, #12]
 800083e:	480a      	ldr	r0, [pc, #40]	@ (8000868 <e22_lora_transnit+0x80>)
 8000840:	f005 f9dd 	bl	8005bfe <memcpy>

	circ_buffer_enqueue(&hE22.txBuffer, (uint8_t*)&hE22.packet, size + overheadSize);
 8000844:	897b      	ldrh	r3, [r7, #10]
 8000846:	b2da      	uxtb	r2, r3
 8000848:	7dfb      	ldrb	r3, [r7, #23]
 800084a:	4413      	add	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	4903      	ldr	r1, [pc, #12]	@ (8000860 <e22_lora_transnit+0x78>)
 8000852:	4806      	ldr	r0, [pc, #24]	@ (800086c <e22_lora_transnit+0x84>)
 8000854:	f7ff feca 	bl	80005ec <circ_buffer_enqueue>
}
 8000858:	bf00      	nop
 800085a:	3718      	adds	r7, #24
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000009c 	.word	0x2000009c
 8000864:	20000084 	.word	0x20000084
 8000868:	2000009f 	.word	0x2000009f
 800086c:	20000192 	.word	0x20000192

08000870 <e22_lora_manager>:
 * 			This function manages the E22 LoRa module by checking for packets in the TX circular buffer, dequeuing them, and transmitting
 * 			them via the E22 module.
 *
 */
void e22_lora_manager(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint8_t packetSize = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	70fb      	strb	r3, [r7, #3]
	uint8_t* pPacket = NULL;
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
	//check for packet in TX circular buffer
	if(circ_buffer_getNextSize(&hE22.txBuffer))
 800087e:	481e      	ldr	r0, [pc, #120]	@ (80008f8 <e22_lora_manager+0x88>)
 8000880:	f7ff ff36 	bl	80006f0 <circ_buffer_getNextSize>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d01f      	beq.n	80008ca <e22_lora_manager+0x5a>
	{
//		uint8_t packetSize = 0;
//		uint8_t* pPacket = NULL;
		if(hE22.txPortReady)
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <e22_lora_manager+0x8c>)
 800088c:	f893 310d 	ldrb.w	r3, [r3, #269]	@ 0x10d
 8000890:	2b00      	cmp	r3, #0
 8000892:	d01a      	beq.n	80008ca <e22_lora_manager+0x5a>
		{
			hE22.txPortReady = false;
 8000894:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <e22_lora_manager+0x8c>)
 8000896:	2200      	movs	r2, #0
 8000898:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
			// Dequeue packet from circular buffer
			pPacket = circ_buffer_dequeue(&hE22.txBuffer, &packetSize);
 800089c:	1cfb      	adds	r3, r7, #3
 800089e:	4619      	mov	r1, r3
 80008a0:	4815      	ldr	r0, [pc, #84]	@ (80008f8 <e22_lora_manager+0x88>)
 80008a2:	f7ff feed 	bl	8000680 <circ_buffer_dequeue>
 80008a6:	6078      	str	r0, [r7, #4]
			// Copy packet to DMA buffer
			memcpy(hE22.pTxDmaBuffer ,pPacket, packetSize);
 80008a8:	4b14      	ldr	r3, [pc, #80]	@ (80008fc <e22_lora_manager+0x8c>)
 80008aa:	f8d3 3ab4 	ldr.w	r3, [r3, #2740]	@ 0xab4
 80008ae:	78fa      	ldrb	r2, [r7, #3]
 80008b0:	6879      	ldr	r1, [r7, #4]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f005 f9a3 	bl	8005bfe <memcpy>
			// Transmit packet via the E22 module
			hE22.loraTransmit(hE22.huart, hE22.pTxDmaBuffer, packetSize);
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <e22_lora_manager+0x8c>)
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <e22_lora_manager+0x8c>)
 80008be:	6810      	ldr	r0, [r2, #0]
 80008c0:	4a0e      	ldr	r2, [pc, #56]	@ (80008fc <e22_lora_manager+0x8c>)
 80008c2:	f8d2 1ab4 	ldr.w	r1, [r2, #2740]	@ 0xab4
 80008c6:	78fa      	ldrb	r2, [r7, #3]
 80008c8:	4798      	blx	r3
		}
	}
	//check for packet in RX circular buffer
	if(circ_buffer_getNextSize(&hE22.rxBuffer))
 80008ca:	480d      	ldr	r0, [pc, #52]	@ (8000900 <e22_lora_manager+0x90>)
 80008cc:	f7ff ff10 	bl	80006f0 <circ_buffer_getNextSize>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d00b      	beq.n	80008ee <e22_lora_manager+0x7e>
	{
		pPacket = circ_buffer_dequeue(&hE22.rxBuffer, &packetSize);
 80008d6:	1cfb      	adds	r3, r7, #3
 80008d8:	4619      	mov	r1, r3
 80008da:	4809      	ldr	r0, [pc, #36]	@ (8000900 <e22_lora_manager+0x90>)
 80008dc:	f7ff fed0 	bl	8000680 <circ_buffer_dequeue>
 80008e0:	6078      	str	r0, [r7, #4]
		hE22.loraReceive(pPacket, packetSize);
 80008e2:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <e22_lora_manager+0x8c>)
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	78fa      	ldrb	r2, [r7, #3]
 80008e8:	4611      	mov	r1, r2
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	4798      	blx	r3
	}
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000192 	.word	0x20000192
 80008fc:	20000084 	.word	0x20000084
 8000900:	20000662 	.word	0x20000662

08000904 <e22_lora_make_ready>:
/**
 * @brief 	Make transmission line status ready at TX complete callback
 *
 */
void e22_lora_make_ready(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
	hE22.txPortReady = true;
 8000908:	4b04      	ldr	r3, [pc, #16]	@ (800091c <e22_lora_make_ready+0x18>)
 800090a:	2201      	movs	r2, #1
 800090c:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000084 	.word	0x20000084

08000920 <e22_lora_reception_complete>:
/**
 * @brief 	this function should be called at the UART RX complete callback.
 *
 */
void e22_lora_reception_complete(uint8_t size)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	circ_buffer_enqueue(&hE22.rxBuffer, (uint8_t*)hE22.pRxDmaBuffer, size);
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <e22_lora_reception_complete+0x34>)
 800092c:	f8d3 3ab0 	ldr.w	r3, [r3, #2736]	@ 0xab0
 8000930:	79fa      	ldrb	r2, [r7, #7]
 8000932:	4619      	mov	r1, r3
 8000934:	4808      	ldr	r0, [pc, #32]	@ (8000958 <e22_lora_reception_complete+0x38>)
 8000936:	f7ff fe59 	bl	80005ec <circ_buffer_enqueue>
	//Activate UART reception again
	hE22.loraStartReception(hE22.huart, hE22.pRxDmaBuffer, MAX_DATA_PACKET_SIZE);
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <e22_lora_reception_complete+0x34>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <e22_lora_reception_complete+0x34>)
 8000940:	6810      	ldr	r0, [r2, #0]
 8000942:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <e22_lora_reception_complete+0x34>)
 8000944:	f8d2 1ab0 	ldr.w	r1, [r2, #2736]	@ 0xab0
 8000948:	22f0      	movs	r2, #240	@ 0xf0
 800094a:	4798      	blx	r3
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000084 	.word	0x20000084
 8000958:	20000662 	.word	0x20000662

0800095c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08c      	sub	sp, #48	@ 0x30
 8000960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
 8000976:	4b55      	ldr	r3, [pc, #340]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a54      	ldr	r2, [pc, #336]	@ (8000acc <MX_GPIO_Init+0x170>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b52      	ldr	r3, [pc, #328]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	61bb      	str	r3, [r7, #24]
 800098c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	4b4e      	ldr	r3, [pc, #312]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a4d      	ldr	r2, [pc, #308]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b4b      	ldr	r3, [pc, #300]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a6:	617b      	str	r3, [r7, #20]
 80009a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b47      	ldr	r3, [pc, #284]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a46      	ldr	r2, [pc, #280]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b44      	ldr	r3, [pc, #272]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b40      	ldr	r3, [pc, #256]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a3f      	ldr	r2, [pc, #252]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b3d      	ldr	r3, [pc, #244]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
 80009e6:	4b39      	ldr	r3, [pc, #228]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	4a38      	ldr	r2, [pc, #224]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f2:	4b36      	ldr	r3, [pc, #216]	@ (8000acc <MX_GPIO_Init+0x170>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b32      	ldr	r3, [pc, #200]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a31      	ldr	r2, [pc, #196]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000acc <MX_GPIO_Init+0x170>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a20:	482b      	ldr	r0, [pc, #172]	@ (8000ad0 <MX_GPIO_Init+0x174>)
 8000a22:	f001 fc93 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2140      	movs	r1, #64	@ 0x40
 8000a2a:	482a      	ldr	r0, [pc, #168]	@ (8000ad4 <MX_GPIO_Init+0x178>)
 8000a2c:	f001 fc8e 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 8000a30:	2200      	movs	r2, #0
 8000a32:	2118      	movs	r1, #24
 8000a34:	4828      	ldr	r0, [pc, #160]	@ (8000ad8 <MX_GPIO_Init+0x17c>)
 8000a36:	f001 fc89 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a40:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4822      	ldr	r0, [pc, #136]	@ (8000adc <MX_GPIO_Init+0x180>)
 8000a52:	f001 fae7 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a56:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4818      	ldr	r0, [pc, #96]	@ (8000ad0 <MX_GPIO_Init+0x174>)
 8000a70:	f001 fad8 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a74:	2340      	movs	r3, #64	@ 0x40
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <MX_GPIO_Init+0x178>)
 8000a8c:	f001 faca 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <MX_GPIO_Init+0x178>)
 8000aa4:	f001 fabe 	bl	8002024 <HAL_GPIO_Init>

  /*Configure GPIO pins : M0_Pin M1_Pin */
  GPIO_InitStruct.Pin = M0_Pin|M1_Pin;
 8000aa8:	2318      	movs	r3, #24
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_GPIO_Init+0x17c>)
 8000ac0:	f001 fab0 	bl	8002024 <HAL_GPIO_Init>

}
 8000ac4:	bf00      	nop
 8000ac6:	3730      	adds	r7, #48	@ 0x30
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40020800 	.word	0x40020800

08000ae0 <_write>:
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char *ptr, int len) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
	for (int idx = 0; idx < len; idx++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	e00f      	b.n	8000b12 <_write+0x32>
			while(!(USART3 -> SR & USART_SR_TXE));
 8000af2:	bf00      	nop
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <_write+0x48>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0f9      	beq.n	8000af4 <_write+0x14>
			USART3->DR = (uint8_t)ptr[idx];
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	4413      	add	r3, r2
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <_write+0x48>)
 8000b0a:	605a      	str	r2, [r3, #4]
	for (int idx = 0; idx < len; idx++) {
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
 8000b12:	697a      	ldr	r2, [r7, #20]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	dbeb      	blt.n	8000af2 <_write+0x12>
	}
	return len;
 8000b1a:	687b      	ldr	r3, [r7, #4]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	371c      	adds	r7, #28
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40004800 	.word	0x40004800

08000b2c <get_timestamp_string>:

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void get_timestamp_string(char *timestamp_str, uint32_t max_len)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  // Get current time and date from RTC
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000b36:	2200      	movs	r2, #0
 8000b38:	490e      	ldr	r1, [pc, #56]	@ (8000b74 <get_timestamp_string+0x48>)
 8000b3a:	480f      	ldr	r0, [pc, #60]	@ (8000b78 <get_timestamp_string+0x4c>)
 8000b3c:	f002 ff07 	bl	800394e <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This is necessary after HAL_RTC_GetTime
 8000b40:	2200      	movs	r2, #0
 8000b42:	490e      	ldr	r1, [pc, #56]	@ (8000b7c <get_timestamp_string+0x50>)
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <get_timestamp_string+0x4c>)
 8000b46:	f002 ff60 	bl	8003a0a <HAL_RTC_GetDate>

  // Format the timestamp string as "YYYY-MM-DD HH:MM:SS"
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <get_timestamp_string+0x48>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000b4e:	4619      	mov	r1, r3
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <get_timestamp_string+0x48>)
 8000b52:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000b54:	461a      	mov	r2, r3
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <get_timestamp_string+0x48>)
 8000b58:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	9200      	str	r2, [sp, #0]
 8000b5e:	460b      	mov	r3, r1
 8000b60:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <get_timestamp_string+0x54>)
 8000b62:	6839      	ldr	r1, [r7, #0]
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f004 fe9f 	bl	80058a8 <sniprintf>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000d1c 	.word	0x20000d1c
 8000b78:	20000d38 	.word	0x20000d38
 8000b7c:	20000d30 	.word	0x20000d30
 8000b80:	08006990 	.word	0x08006990

08000b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b096      	sub	sp, #88	@ 0x58
 8000b88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b8a:	f000 fca1 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8e:	f000 f865 	bl	8000c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b92:	f7ff fee3 	bl	800095c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b96:	f7ff fdc7 	bl	8000728 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b9a:	f000 fabd 	bl	8001118 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b9e:	f000 fbcf 	bl	8001340 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000ba2:	f000 fa8f 	bl	80010c4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000ba6:	f000 f92d 	bl	8000e04 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
//initialize
  printf("--- LoRa Transmitter Initialized ---\r\n");
 8000baa:	4822      	ldr	r0, [pc, #136]	@ (8000c34 <main+0xb0>)
 8000bac:	f004 fe74 	bl	8005898 <puts>

    // Initialize the E22 LoRa module driver
  e22_lora_init(&huart2,
 8000bb0:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <main+0xb4>)
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <main+0xb8>)
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <main+0xbc>)
 8000bba:	4a22      	ldr	r2, [pc, #136]	@ (8000c44 <main+0xc0>)
 8000bbc:	4922      	ldr	r1, [pc, #136]	@ (8000c48 <main+0xc4>)
 8000bbe:	4823      	ldr	r0, [pc, #140]	@ (8000c4c <main+0xc8>)
 8000bc0:	f7ff fdda 	bl	8000778 <e22_lora_init>
                  HAL_UART_Transmit_DMA,
                  HAL_UARTEx_ReceiveToIdle_DMA,
                  main_lora_packet_receive,
                  main_e22_configurationMode,
                  main_e22_transceiverMode);
  int tx_packet_count = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  e22_lora_manager();
 8000bc8:	f7ff fe52 	bl	8000870 <e22_lora_manager>
	  	 static uint32_t last_tx_time = 0;
	  	 	if(HAL_GetTick() - last_tx_time > 300)
 8000bcc:	f000 fce6 	bl	800159c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <main+0xcc>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000bdc:	d9f4      	bls.n	8000bc8 <main+0x44>
	  	 	{
	  	 		tx_packet_count++;
 8000bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000be0:	3301      	adds	r3, #1
 8000be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  	 		char timestamp[10];
	  			get_timestamp_string(timestamp, sizeof(timestamp));
 8000be4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000be8:	210a      	movs	r1, #10
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff9e 	bl	8000b2c <get_timestamp_string>
	  	 		char packet_to_send[60];
	  	 		sprintf(packet_to_send, "Hello from Transmitter! %d", tx_packet_count);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000bf4:	4917      	ldr	r1, [pc, #92]	@ (8000c54 <main+0xd0>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f004 fe8c 	bl	8005914 <siprintf>
	  	 		uint8_t packetSize = strlen(packet_to_send);
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fb06 	bl	8000210 <strlen>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	  	 		printf("Sending: \"%s %-8s\"\r\n", packet_to_send,timestamp);
 8000c0a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4811      	ldr	r0, [pc, #68]	@ (8000c58 <main+0xd4>)
 8000c14:	f004 fdd8 	bl	80057c8 <iprintf>
	  	 		e22_lora_transnit((uint8_t*)packet_to_send, packetSize, 0x01, 0x12);
 8000c18:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000c1c:	b299      	uxth	r1, r3
 8000c1e:	1d38      	adds	r0, r7, #4
 8000c20:	2312      	movs	r3, #18
 8000c22:	2201      	movs	r2, #1
 8000c24:	f7ff fde0 	bl	80007e8 <e22_lora_transnit>

	  	 		last_tx_time = HAL_GetTick();
 8000c28:	f000 fcb8 	bl	800159c <HAL_GetTick>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <main+0xcc>)
 8000c30:	6013      	str	r3, [r2, #0]
  {
 8000c32:	e7c9      	b.n	8000bc8 <main+0x44>
 8000c34:	080069a0 	.word	0x080069a0
 8000c38:	08000da1 	.word	0x08000da1
 8000c3c:	08000db9 	.word	0x08000db9
 8000c40:	08000dd9 	.word	0x08000dd9
 8000c44:	08003d81 	.word	0x08003d81
 8000c48:	08003c89 	.word	0x08003c89
 8000c4c:	20000d5c 	.word	0x20000d5c
 8000c50:	20000d34 	.word	0x20000d34
 8000c54:	080069c8 	.word	0x080069c8
 8000c58:	080069e4 	.word	0x080069e4

08000c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b094      	sub	sp, #80	@ 0x50
 8000c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c62:	f107 031c 	add.w	r3, r7, #28
 8000c66:	2234      	movs	r2, #52	@ 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 ff4c 	bl	8005b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	4b2b      	ldr	r3, [pc, #172]	@ (8000d34 <SystemClock_Config+0xd8>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a2a      	ldr	r2, [pc, #168]	@ (8000d34 <SystemClock_Config+0xd8>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b28      	ldr	r3, [pc, #160]	@ (8000d34 <SystemClock_Config+0xd8>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	4b25      	ldr	r3, [pc, #148]	@ (8000d38 <SystemClock_Config+0xdc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a24      	ldr	r2, [pc, #144]	@ (8000d38 <SystemClock_Config+0xdc>)
 8000ca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b22      	ldr	r3, [pc, #136]	@ (8000d38 <SystemClock_Config+0xdc>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000cb8:	2309      	movs	r3, #9
 8000cba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cbc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000cd8:	23a8      	movs	r3, #168	@ 0xa8
 8000cda:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fb0f 	bl	8003310 <HAL_RCC_OscConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000cf8:	f000 f87e 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d00:	2302      	movs	r3, #2
 8000d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d12:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	2105      	movs	r1, #5
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 fc84 	bl	8002628 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000d26:	f000 f867 	bl	8000df8 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	@ 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000

08000d3c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// This callback is fired when a UART transmission is complete.
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
    // Check if the callback is from the LoRa module's UART (USART2)
    if(huart->Instance == USART2)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a07      	ldr	r2, [pc, #28]	@ (8000d68 <HAL_UART_TxCpltCallback+0x2c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d108      	bne.n	8000d60 <HAL_UART_TxCpltCallback+0x24>
    {
        // Print confirmation to the serial monitor.
        printf("TX CONFIRMED: Packet Sent!\r\n");
 8000d4e:	4807      	ldr	r0, [pc, #28]	@ (8000d6c <HAL_UART_TxCpltCallback+0x30>)
 8000d50:	f004 fda2 	bl	8005898 <puts>
        // Toggle the green LED (LD2) for visual confirmation.
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d54:	2180      	movs	r1, #128	@ 0x80
 8000d56:	4806      	ldr	r0, [pc, #24]	@ (8000d70 <HAL_UART_TxCpltCallback+0x34>)
 8000d58:	f001 fb11 	bl	800237e <HAL_GPIO_TogglePin>
        // Signal the driver that the UART is ready for the next transmission.
        e22_lora_make_ready();
 8000d5c:	f7ff fdd2 	bl	8000904 <e22_lora_make_ready>
    }
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40004400 	.word	0x40004400
 8000d6c:	080069fc 	.word	0x080069fc
 8000d70:	40020400 	.word	0x40020400

08000d74 <HAL_UARTEx_RxEventCallback>:

/**
 * @brief This callback is fired when new data is received. Not actively used on the transmitter.
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == USART2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <HAL_UARTEx_RxEventCallback+0x28>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d104      	bne.n	8000d94 <HAL_UARTEx_RxEventCallback+0x20>
    {
        // Although we are a transmitter, the hardware still listens.
        // We must call this to re-arm the reception for the next idle event.
        e22_lora_reception_complete(Size); //
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fdc6 	bl	8000920 <e22_lora_reception_complete>
    }
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40004400 	.word	0x40004400

08000da0 <main_e22_transceiverMode>:

/**
 * @brief Sets the LoRa module to its default transparent transmission mode.
 */
static void main_e22_transceiverMode(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, M0_Pin|M1_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2118      	movs	r1, #24
 8000da8:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <main_e22_transceiverMode+0x14>)
 8000daa:	f001 facf 	bl	800234c <HAL_GPIO_WritePin>
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40020400 	.word	0x40020400

08000db8 <main_e22_configurationMode>:

/**
 * @brief Sets the LoRa module to configuration mode.
 */
static void main_e22_configurationMode(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, M0_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2108      	movs	r1, #8
 8000dc0:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <main_e22_configurationMode+0x1c>)
 8000dc2:	f001 fac3 	bl	800234c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M1_Pin, GPIO_PIN_SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	2110      	movs	r1, #16
 8000dca:	4802      	ldr	r0, [pc, #8]	@ (8000dd4 <main_e22_configurationMode+0x1c>)
 8000dcc:	f001 fabe 	bl	800234c <HAL_GPIO_WritePin>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40020400 	.word	0x40020400

08000dd8 <main_lora_packet_receive>:

/**
 * @brief Handles received packets. This is a stub on the transmitter.
 */
static void main_lora_packet_receive(uint8_t* dataPacket, uint8_t size)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	70fb      	strb	r3, [r7, #3]
	// This board is a dedicated transmitter, so this function should not be called.
    // We can add a debug print here to see if we accidentally receive something.
    printf("Unexpected packet received on transmitter.\r\n");
 8000de4:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <main_lora_packet_receive+0x1c>)
 8000de6:	f004 fd57 	bl	8005898 <puts>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	08006a18 	.word	0x08006a18

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <MX_RTC_Init+0x44>)
 8000e0a:	4a10      	ldr	r2, [pc, #64]	@ (8000e4c <MX_RTC_Init+0x48>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <MX_RTC_Init+0x44>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_RTC_Init+0x44>)
 8000e16:	227f      	movs	r2, #127	@ 0x7f
 8000e18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <MX_RTC_Init+0x44>)
 8000e1c:	22ff      	movs	r2, #255	@ 0xff
 8000e1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_RTC_Init+0x44>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e26:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <MX_RTC_Init+0x44>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <MX_RTC_Init+0x44>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_RTC_Init+0x44>)
 8000e34:	f002 fd0a 	bl	800384c <HAL_RTC_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000e3e:	f7ff ffdb 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000d38 	.word	0x20000d38
 8000e4c:	40002800 	.word	0x40002800

08000e50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09a      	sub	sp, #104	@ 0x68
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	225c      	movs	r2, #92	@ 0x5c
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 fe51 	bl	8005b08 <memset>
  if(rtcHandle->Instance==RTC)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <HAL_RTC_MspInit+0x4c>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d111      	bne.n	8000e94 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e70:	2320      	movs	r3, #32
 8000e72:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e78:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f001 fcec 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000e8a:	f7ff ffb5 	bl	8000df8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <HAL_RTC_MspInit+0x50>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e94:	bf00      	nop
 8000e96:	3768      	adds	r7, #104	@ 0x68
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40002800 	.word	0x40002800
 8000ea0:	42470e3c 	.word	0x42470e3c

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	4a08      	ldr	r2, [pc, #32]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_MspInit+0x4c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4a:	f000 fb13 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <DMA1_Stream5_IRQHandler+0x10>)
 8000f5a:	f000 fdf9 	bl	8001b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000dec 	.word	0x20000dec

08000f68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <DMA1_Stream6_IRQHandler+0x10>)
 8000f6e:	f000 fdef 	bl	8001b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000e4c 	.word	0x20000e4c

08000f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <USART2_IRQHandler+0x10>)
 8000f82:	f002 ff57 	bl	8003e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000d5c 	.word	0x20000d5c

08000f90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e00a      	b.n	8000fb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fa2:	f3af 8000 	nop.w
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf0      	blt.n	8000fa2 <_read+0x12>
  }

  return len;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_close>:
  }
  return len;
}

int _close(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ff2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_isatty>:

int _isatty(int file)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <_sbrk+0x5c>)
 800103e:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <_sbrk+0x60>)
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <_sbrk+0x64>)
 8001052:	4a12      	ldr	r2, [pc, #72]	@ (800109c <_sbrk+0x68>)
 8001054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	429a      	cmp	r2, r3
 8001062:	d207      	bcs.n	8001074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001064:	f004 fd9e 	bl	8005ba4 <__errno>
 8001068:	4603      	mov	r3, r0
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
 8001072:	e009      	b.n	8001088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a05      	ldr	r2, [pc, #20]	@ (8001098 <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20020000 	.word	0x20020000
 8001094:	00000400 	.word	0x00000400
 8001098:	20000d58 	.word	0x20000d58
 800109c:	200014e0 	.word	0x200014e0

080010a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <MX_USART2_UART_Init+0x50>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	@ (8001110 <MX_USART2_UART_Init+0x4c>)
 80010fc:	f002 fd74 	bl	8003be8 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001106:	f7ff fe77 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000d5c 	.word	0x20000d5c
 8001114:	40004400 	.word	0x40004400

08001118 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 800111e:	4a12      	ldr	r2, [pc, #72]	@ (8001168 <MX_USART3_UART_Init+0x50>)
 8001120:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 8001124:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001128:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <MX_USART3_UART_Init+0x4c>)
 8001150:	f002 fd4a 	bl	8003be8 <HAL_UART_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800115a:	f7ff fe4d 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000da4 	.word	0x20000da4
 8001168:	40004800 	.word	0x40004800

0800116c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08c      	sub	sp, #48	@ 0x30
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a65      	ldr	r2, [pc, #404]	@ (8001320 <HAL_UART_MspInit+0x1b4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	f040 8091 	bne.w	80012b2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
 8001194:	4b63      	ldr	r3, [pc, #396]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	4a62      	ldr	r2, [pc, #392]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 800119a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119e:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a0:	4b60      	ldr	r3, [pc, #384]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	4b5c      	ldr	r3, [pc, #368]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80011b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b4:	4a5b      	ldr	r2, [pc, #364]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80011bc:	4b59      	ldr	r3, [pc, #356]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011c8:	2360      	movs	r3, #96	@ 0x60
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d8:	2307      	movs	r3, #7
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011dc:	f107 031c 	add.w	r3, r7, #28
 80011e0:	4619      	mov	r1, r3
 80011e2:	4851      	ldr	r0, [pc, #324]	@ (8001328 <HAL_UART_MspInit+0x1bc>)
 80011e4:	f000 ff1e 	bl	8002024 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80011e8:	4b50      	ldr	r3, [pc, #320]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 80011ea:	4a51      	ldr	r2, [pc, #324]	@ (8001330 <HAL_UART_MspInit+0x1c4>)
 80011ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80011ee:	4b4f      	ldr	r3, [pc, #316]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 80011f0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f6:	4b4d      	ldr	r3, [pc, #308]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b4b      	ldr	r3, [pc, #300]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 8001204:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001208:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120a:	4b48      	ldr	r3, [pc, #288]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001210:	4b46      	ldr	r3, [pc, #280]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001216:	4b45      	ldr	r3, [pc, #276]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800121c:	4b43      	ldr	r3, [pc, #268]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001222:	4b42      	ldr	r3, [pc, #264]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 8001224:	2200      	movs	r2, #0
 8001226:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001228:	4840      	ldr	r0, [pc, #256]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 800122a:	f000 faf9 	bl	8001820 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001234:	f7ff fde0 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3c      	ldr	r2, [pc, #240]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 800123c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800123e:	4a3b      	ldr	r2, [pc, #236]	@ (800132c <HAL_UART_MspInit+0x1c0>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001244:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 8001246:	4a3c      	ldr	r2, [pc, #240]	@ (8001338 <HAL_UART_MspInit+0x1cc>)
 8001248:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800124a:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 800124c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001250:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001252:	4b38      	ldr	r3, [pc, #224]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 8001254:	2240      	movs	r2, #64	@ 0x40
 8001256:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001258:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800125e:	4b35      	ldr	r3, [pc, #212]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 8001260:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001264:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001266:	4b33      	ldr	r3, [pc, #204]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126c:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001272:	4b30      	ldr	r3, [pc, #192]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001278:	4b2e      	ldr	r3, [pc, #184]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800127e:	4b2d      	ldr	r3, [pc, #180]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001284:	482b      	ldr	r0, [pc, #172]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 8001286:	f000 facb 	bl	8001820 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001290:	f7ff fdb2 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a27      	ldr	r2, [pc, #156]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 8001298:	639a      	str	r2, [r3, #56]	@ 0x38
 800129a:	4a26      	ldr	r2, [pc, #152]	@ (8001334 <HAL_UART_MspInit+0x1c8>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2026      	movs	r0, #38	@ 0x26
 80012a6:	f000 fa84 	bl	80017b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012aa:	2026      	movs	r0, #38	@ 0x26
 80012ac:	f000 fa9d 	bl	80017ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012b0:	e031      	b.n	8001316 <HAL_UART_MspInit+0x1aa>
  else if(uartHandle->Instance==USART3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a21      	ldr	r2, [pc, #132]	@ (800133c <HAL_UART_MspInit+0x1d0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d12c      	bne.n	8001316 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	4a17      	ldr	r2, [pc, #92]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80012c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80012cc:	4b15      	ldr	r3, [pc, #84]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e0:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80012e2:	f043 0308 	orr.w	r3, r3, #8
 80012e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <HAL_UART_MspInit+0x1b8>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ec:	f003 0308 	and.w	r3, r3, #8
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001306:	2307      	movs	r3, #7
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <HAL_UART_MspInit+0x1bc>)
 8001312:	f000 fe87 	bl	8002024 <HAL_GPIO_Init>
}
 8001316:	bf00      	nop
 8001318:	3730      	adds	r7, #48	@ 0x30
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40004400 	.word	0x40004400
 8001324:	40023800 	.word	0x40023800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	20000dec 	.word	0x20000dec
 8001330:	40026088 	.word	0x40026088
 8001334:	20000e4c 	.word	0x20000e4c
 8001338:	400260a0 	.word	0x400260a0
 800133c:	40004800 	.word	0x40004800

08001340 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001346:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800134a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800134e:	2206      	movs	r2, #6
 8001350:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001354:	2202      	movs	r2, #2
 8001356:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001360:	2202      	movs	r2, #2
 8001362:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001366:	2201      	movs	r2, #1
 8001368:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001378:	2201      	movs	r2, #1
 800137a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001384:	f001 f815 	bl	80023b2 <HAL_PCD_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800138e:	f7ff fd33 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000eac 	.word	0x20000eac

0800139c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0a0      	sub	sp, #128	@ 0x80
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	225c      	movs	r2, #92	@ 0x5c
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fba3 	bl	8005b08 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013ca:	d14e      	bne.n	800146a <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80013cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80013d2:	2300      	movs	r3, #0
 80013d4:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4618      	mov	r0, r3
 80013dc:	f001 fa3e 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80013e6:	f7ff fd07 	bl	8000df8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <HAL_PCD_MspInit+0xd8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <HAL_PCD_MspInit+0xd8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <HAL_PCD_MspInit+0xd8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001406:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800140a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001418:	230a      	movs	r3, #10
 800141a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001420:	4619      	mov	r1, r3
 8001422:	4815      	ldr	r0, [pc, #84]	@ (8001478 <HAL_PCD_MspInit+0xdc>)
 8001424:	f000 fdfe 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800142c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142e:	2300      	movs	r3, #0
 8001430:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001436:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800143a:	4619      	mov	r1, r3
 800143c:	480e      	ldr	r0, [pc, #56]	@ (8001478 <HAL_PCD_MspInit+0xdc>)
 800143e:	f000 fdf1 	bl	8002024 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_PCD_MspInit+0xd8>)
 8001444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001446:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <HAL_PCD_MspInit+0xd8>)
 8001448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800144c:	6353      	str	r3, [r2, #52]	@ 0x34
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_PCD_MspInit+0xd8>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <HAL_PCD_MspInit+0xd8>)
 8001458:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800145c:	6453      	str	r3, [r2, #68]	@ 0x44
 800145e:	4b05      	ldr	r3, [pc, #20]	@ (8001474 <HAL_PCD_MspInit+0xd8>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800146a:	bf00      	nop
 800146c:	3780      	adds	r7, #128	@ 0x80
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000

0800147c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800147c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001480:	f7ff fe0e 	bl	80010a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001484:	480c      	ldr	r0, [pc, #48]	@ (80014b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001486:	490d      	ldr	r1, [pc, #52]	@ (80014bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800148c:	e002      	b.n	8001494 <LoopCopyDataInit>

0800148e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001492:	3304      	adds	r3, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001498:	d3f9      	bcc.n	800148e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800149c:	4c0a      	ldr	r4, [pc, #40]	@ (80014c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a0:	e001      	b.n	80014a6 <LoopFillZerobss>

080014a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a4:	3204      	adds	r2, #4

080014a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a8:	d3fb      	bcc.n	80014a2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014aa:	f004 fb81 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ae:	f7ff fb69 	bl	8000b84 <main>
  bx  lr    
 80014b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80014c0:	08006aa8 	.word	0x08006aa8
  ldr r2, =_sbss
 80014c4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80014c8:	200014e0 	.word	0x200014e0

080014cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <HAL_Init+0x40>)
 80014da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <HAL_Init+0x40>)
 80014e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014ec:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <HAL_Init+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <HAL_Init+0x40>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f8:	2003      	movs	r0, #3
 80014fa:	f000 f94f 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f808 	bl	8001514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001504:	f7ff fcce 	bl	8000ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023c00 	.word	0x40023c00

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_InitTick+0x54>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_InitTick+0x58>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f967 	bl	8001806 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f92f 	bl	80017b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	@ (8001570 <HAL_InitTick+0x5c>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000000 	.word	0x20000000
 800156c:	20000008 	.word	0x20000008
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000008 	.word	0x20000008
 8001598:	20001390 	.word	0x20001390

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20001390 	.word	0x20001390

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	@ (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	@ (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	@ (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	@ (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff feb6 	bl	800159c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e099      	b.n	8001970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185c:	e00f      	b.n	800187e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800185e:	f7ff fe9d 	bl	800159c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b05      	cmp	r3, #5
 800186a:	d908      	bls.n	800187e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e078      	b.n	8001970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e8      	bne.n	800185e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4b38      	ldr	r3, [pc, #224]	@ (8001978 <HAL_DMA_Init+0x158>)
 8001898:	4013      	ands	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d107      	bne.n	80018e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	4313      	orrs	r3, r2
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f023 0307 	bic.w	r3, r3, #7
 80018fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	2b04      	cmp	r3, #4
 8001910:	d117      	bne.n	8001942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00e      	beq.n	8001942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fb01 	bl	8001f2c <DMA_CheckFifoParam>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2240      	movs	r2, #64	@ 0x40
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800193e:	2301      	movs	r3, #1
 8001940:	e016      	b.n	8001970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fab8 	bl	8001ec0 <DMA_CalcBaseAndBitshift>
 8001950:	4603      	mov	r3, r0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001958:	223f      	movs	r2, #63	@ 0x3f
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	f010803f 	.word	0xf010803f

0800197c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_DMA_Start_IT+0x26>
 800199e:	2302      	movs	r3, #2
 80019a0:	e040      	b.n	8001a24 <HAL_DMA_Start_IT+0xa8>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d12f      	bne.n	8001a16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2202      	movs	r2, #2
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fa4a 	bl	8001e64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d4:	223f      	movs	r2, #63	@ 0x3f
 80019d6:	409a      	lsls	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0216 	orr.w	r2, r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0208 	orr.w	r2, r2, #8
 8001a02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e005      	b.n	8001a22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a3a:	f7ff fdaf 	bl	800159c <HAL_GetTick>
 8001a3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d008      	beq.n	8001a5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e052      	b.n	8001b04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0216 	bic.w	r2, r2, #22
 8001a6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <HAL_DMA_Abort+0x62>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0208 	bic.w	r2, r2, #8
 8001a9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aae:	e013      	b.n	8001ad8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab0:	f7ff fd74 	bl	800159c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d90c      	bls.n	8001ad8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e015      	b.n	8001b04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1e4      	bne.n	8001ab0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aea:	223f      	movs	r2, #63	@ 0x3f
 8001aec:	409a      	lsls	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d004      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2280      	movs	r2, #128	@ 0x80
 8001b24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00c      	b.n	8001b44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b5c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d98 <HAL_DMA_IRQHandler+0x248>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a8e      	ldr	r2, [pc, #568]	@ (8001d9c <HAL_DMA_IRQHandler+0x24c>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01a      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0204 	bic.w	r2, r2, #4
 8001ba2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	2208      	movs	r2, #8
 8001baa:	409a      	lsls	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d012      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bde:	2201      	movs	r2, #1
 8001be0:	409a      	lsls	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bea:	f043 0202 	orr.w	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d012      	beq.n	8001c28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2204      	movs	r2, #4
 8001c16:	409a      	lsls	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c20:	f043 0204 	orr.w	r2, r3, #4
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d043      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03c      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d018      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d024      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
 8001c7e:	e01f      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
 8001c90:	e016      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0208 	bic.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 808f 	beq.w	8001df0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8087 	beq.w	8001df0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d136      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0216 	bic.w	r2, r2, #22
 8001d08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <HAL_DMA_IRQHandler+0x1da>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0208 	bic.w	r2, r2, #8
 8001d38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3e:	223f      	movs	r2, #63	@ 0x3f
 8001d40:	409a      	lsls	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d07e      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
        }
        return;
 8001d66:	e079      	b.n	8001e5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01d      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d031      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
 8001d94:	e02c      	b.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d023      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
 8001db0:	e01e      	b.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10f      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0210 	bic.w	r2, r2, #16
 8001dce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d032      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2205      	movs	r2, #5
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d307      	bcc.n	8001e38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f2      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x2cc>
 8001e36:	e000      	b.n	8001e3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
 8001e5a:	e000      	b.n	8001e5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e5c:	bf00      	nop
    }
  }
}
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b40      	cmp	r3, #64	@ 0x40
 8001e90:	d108      	bne.n	8001ea4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ea2:	e007      	b.n	8001eb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3b10      	subs	r3, #16
 8001ed0:	4a14      	ldr	r2, [pc, #80]	@ (8001f24 <DMA_CalcBaseAndBitshift+0x64>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eda:	4a13      	ldr	r2, [pc, #76]	@ (8001f28 <DMA_CalcBaseAndBitshift+0x68>)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d909      	bls.n	8001f02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	1d1a      	adds	r2, r3, #4
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f00:	e007      	b.n	8001f12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	aaaaaaab 	.word	0xaaaaaaab
 8001f28:	08006a5c 	.word	0x08006a5c

08001f2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11f      	bne.n	8001f86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d856      	bhi.n	8001ffa <DMA_CheckFifoParam+0xce>
 8001f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <DMA_CheckFifoParam+0x28>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f77 	.word	0x08001f77
 8001f5c:	08001f65 	.word	0x08001f65
 8001f60:	08001ffb 	.word	0x08001ffb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d046      	beq.n	8001ffe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f74:	e043      	b.n	8001ffe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f7e:	d140      	bne.n	8002002 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f84:	e03d      	b.n	8002002 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f8e:	d121      	bne.n	8001fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d837      	bhi.n	8002006 <DMA_CheckFifoParam+0xda>
 8001f96:	a201      	add	r2, pc, #4	@ (adr r2, 8001f9c <DMA_CheckFifoParam+0x70>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fb3 	.word	0x08001fb3
 8001fa4:	08001fad 	.word	0x08001fad
 8001fa8:	08001fc5 	.word	0x08001fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb0:	e030      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d025      	beq.n	800200a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc2:	e022      	b.n	800200a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fcc:	d11f      	bne.n	800200e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fd2:	e01c      	b.n	800200e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d903      	bls.n	8001fe2 <DMA_CheckFifoParam+0xb6>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d003      	beq.n	8001fe8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fe0:	e018      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe6:	e015      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff8:	e00b      	b.n	8002012 <DMA_CheckFifoParam+0xe6>
      break;
 8001ffa:	bf00      	nop
 8001ffc:	e00a      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 8001ffe:	bf00      	nop
 8002000:	e008      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 8002002:	bf00      	nop
 8002004:	e006      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 8002006:	bf00      	nop
 8002008:	e004      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
 800200c:	e002      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;   
 800200e:	bf00      	nop
 8002010:	e000      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
    }
  } 
  
  return status; 
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e165      	b.n	800230c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	f040 8154 	bne.w	8002306 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d005      	beq.n	8002076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	2b02      	cmp	r3, #2
 8002074:	d130      	bne.n	80020d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 0201 	and.w	r2, r3, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d017      	beq.n	8002114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d123      	bne.n	8002168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ae 	beq.w	8002306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c6:	4a58      	ldr	r2, [pc, #352]	@ (8002328 <HAL_GPIO_Init+0x304>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4f      	ldr	r2, [pc, #316]	@ (800232c <HAL_GPIO_Init+0x308>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d025      	beq.n	800223e <HAL_GPIO_Init+0x21a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002330 <HAL_GPIO_Init+0x30c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <HAL_GPIO_Init+0x216>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002334 <HAL_GPIO_Init+0x310>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x212>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4c      	ldr	r2, [pc, #304]	@ (8002338 <HAL_GPIO_Init+0x314>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x20e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4b      	ldr	r2, [pc, #300]	@ (800233c <HAL_GPIO_Init+0x318>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x20a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4a      	ldr	r2, [pc, #296]	@ (8002340 <HAL_GPIO_Init+0x31c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x206>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a49      	ldr	r2, [pc, #292]	@ (8002344 <HAL_GPIO_Init+0x320>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x202>
 8002222:	2306      	movs	r3, #6
 8002224:	e00c      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002226:	2307      	movs	r3, #7
 8002228:	e00a      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800222a:	2305      	movs	r3, #5
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800222e:	2304      	movs	r3, #4
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	@ (8002328 <HAL_GPIO_Init+0x304>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a31      	ldr	r2, [pc, #196]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <HAL_GPIO_Init+0x324>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a26      	ldr	r2, [pc, #152]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b2:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f ae96 	bls.w	8002040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40021400 	.word	0x40021400
 8002344:	40021800 	.word	0x40021800
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002390:	887a      	ldrh	r2, [r7, #2]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	041a      	lsls	r2, r3, #16
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	43d9      	mvns	r1, r3
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	400b      	ands	r3, r1
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	619a      	str	r2, [r3, #24]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af02      	add	r7, sp, #8
 80023b8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e108      	b.n	80025d6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d106      	bne.n	80023e4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe ffdc 	bl	800139c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2203      	movs	r2, #3
 80023e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f2:	d102      	bne.n	80023fa <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fe84 	bl	800510c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7c1a      	ldrb	r2, [r3, #16]
 800240c:	f88d 2000 	strb.w	r2, [sp]
 8002410:	3304      	adds	r3, #4
 8002412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002414:	f002 fe16 	bl	8005044 <USB_CoreInit>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d005      	beq.n	800242a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e0d5      	b.n	80025d6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f002 fe7c 	bl	800512e <USB_SetCurrentMode>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0c6      	b.n	80025d6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e04a      	b.n	80024e4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3315      	adds	r3, #21
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	3314      	adds	r3, #20
 8002472:	7bfa      	ldrb	r2, [r7, #15]
 8002474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	b298      	uxth	r0, r3
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	332e      	adds	r3, #46	@ 0x2e
 800248a:	4602      	mov	r2, r0
 800248c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3318      	adds	r3, #24
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	331c      	adds	r3, #28
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3320      	adds	r3, #32
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	3324      	adds	r3, #36	@ 0x24
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	3301      	adds	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	791b      	ldrb	r3, [r3, #4]
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d3af      	bcc.n	800244e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	e044      	b.n	800257e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800250a:	7bfa      	ldrb	r2, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	440b      	add	r3, r1
 8002518:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	440b      	add	r3, r1
 8002570:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	3301      	adds	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	791b      	ldrb	r3, [r3, #4]
 8002582:	7bfa      	ldrb	r2, [r7, #15]
 8002584:	429a      	cmp	r2, r3
 8002586:	d3b5      	bcc.n	80024f4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6818      	ldr	r0, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	7c1a      	ldrb	r2, [r3, #16]
 8002590:	f88d 2000 	strb.w	r2, [sp]
 8002594:	3304      	adds	r3, #4
 8002596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002598:	f002 fe16 	bl	80051c8 <USB_DevInit>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e013      	b.n	80025d6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7b1b      	ldrb	r3, [r3, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f80a 	bl	80025de <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 ffd1 	bl	8005576 <USB_DevDisconnect>

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002610:	f043 0303 	orr.w	r3, r3, #3
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0cc      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800263c:	4b68      	ldr	r3, [pc, #416]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d90c      	bls.n	8002664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b65      	ldr	r3, [pc, #404]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b63      	ldr	r3, [pc, #396]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0b8      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b59      	ldr	r3, [pc, #356]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a58      	ldr	r2, [pc, #352]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002682:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002686:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002694:	4b53      	ldr	r3, [pc, #332]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	4a52      	ldr	r2, [pc, #328]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800269e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a0:	4b50      	ldr	r3, [pc, #320]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	494d      	ldr	r1, [pc, #308]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d044      	beq.n	8002748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b47      	ldr	r3, [pc, #284]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d119      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e07f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e6:	4b3f      	ldr	r3, [pc, #252]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e067      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002706:	4b37      	ldr	r3, [pc, #220]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f023 0203 	bic.w	r2, r3, #3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	4934      	ldr	r1, [pc, #208]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002718:	f7fe ff40 	bl	800159c <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271e:	e00a      	b.n	8002736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7fe ff3c 	bl	800159c <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e04f      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	4b2b      	ldr	r3, [pc, #172]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 020c 	and.w	r2, r3, #12
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	429a      	cmp	r2, r3
 8002746:	d1eb      	bne.n	8002720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002748:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 030f 	and.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d20c      	bcs.n	8002770 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800275e:	4b20      	ldr	r3, [pc, #128]	@ (80027e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	429a      	cmp	r2, r3
 800276a:	d001      	beq.n	8002770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e032      	b.n	80027d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4916      	ldr	r1, [pc, #88]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d009      	beq.n	80027ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800279a:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	490e      	ldr	r1, [pc, #56]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ae:	f000 fb7f 	bl	8002eb0 <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	@ (80027e4 <HAL_RCC_ClockConfig+0x1bc>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	091b      	lsrs	r3, r3, #4
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	490a      	ldr	r1, [pc, #40]	@ (80027e8 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	fa22 f303 	lsr.w	r3, r2, r3
 80027c6:	4a09      	ldr	r2, [pc, #36]	@ (80027ec <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80027ca:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe fea0 	bl	8001514 <HAL_InitTick>

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40023c00 	.word	0x40023c00
 80027e4:	40023800 	.word	0x40023800
 80027e8:	08006a44 	.word	0x08006a44
 80027ec:	20000000 	.word	0x20000000
 80027f0:	20000004 	.word	0x20000004

080027f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027f8:	4b03      	ldr	r3, [pc, #12]	@ (8002808 <HAL_RCC_GetHCLKFreq+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000000 	.word	0x20000000

0800280c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002810:	f7ff fff0 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 8002814:	4602      	mov	r2, r0
 8002816:	4b05      	ldr	r3, [pc, #20]	@ (800282c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	0a9b      	lsrs	r3, r3, #10
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	4903      	ldr	r1, [pc, #12]	@ (8002830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002822:	5ccb      	ldrb	r3, [r1, r3]
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40023800 	.word	0x40023800
 8002830:	08006a54 	.word	0x08006a54

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002838:	f7ff ffdc 	bl	80027f4 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	@ (8002854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0b5b      	lsrs	r3, r3, #13
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	@ (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08006a54 	.word	0x08006a54

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08c      	sub	sp, #48	@ 0x30
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002894:	4b6f      	ldr	r3, [pc, #444]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800289a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	496c      	ldr	r1, [pc, #432]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80028b2:	2301      	movs	r3, #1
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028c2:	4b64      	ldr	r3, [pc, #400]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c8:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	4960      	ldr	r1, [pc, #384]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80028e0:	2301      	movs	r3, #1
 80028e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d017      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028f0:	4b58      	ldr	r3, [pc, #352]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4955      	ldr	r1, [pc, #340]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800290e:	d101      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002910:	2301      	movs	r3, #1
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800291c:	2301      	movs	r3, #1
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800292c:	4b49      	ldr	r3, [pc, #292]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800292e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002932:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	4946      	ldr	r1, [pc, #280]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800294a:	d101      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800294c:	2301      	movs	r3, #1
 800294e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002958:	2301      	movs	r3, #1
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0320 	and.w	r3, r3, #32
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 808a 	beq.w	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b39      	ldr	r3, [pc, #228]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	4a38      	ldr	r2, [pc, #224]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	@ 0x40
 800297a:	4b36      	ldr	r3, [pc, #216]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002986:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a33      	ldr	r2, [pc, #204]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002990:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002992:	f7fe fe03 	bl	800159c <HAL_GetTick>
 8002996:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe fdff 	bl	800159c <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e278      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80029ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b8:	4b26      	ldr	r3, [pc, #152]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029c0:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d02f      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d028      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029de:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029e6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029ec:	4a19      	ldr	r2, [pc, #100]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029f2:	4b18      	ldr	r3, [pc, #96]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d114      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe fdcd 	bl	800159c <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a04:	e00a      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a06:	f7fe fdc9 	bl	800159c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e240      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0ee      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a34:	d114      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002a36:	4b07      	ldr	r3, [pc, #28]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a4a:	4902      	ldr	r1, [pc, #8]	@ (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	608b      	str	r3, [r1, #8]
 8002a50:	e00c      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40007000 	.word	0x40007000
 8002a5c:	42470e40 	.word	0x42470e40
 8002a60:	4b4a      	ldr	r3, [pc, #296]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a49      	ldr	r2, [pc, #292]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a66:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002a6a:	6093      	str	r3, [r2, #8]
 8002a6c:	4b47      	ldr	r3, [pc, #284]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	4944      	ldr	r1, [pc, #272]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002a90:	4b3f      	ldr	r3, [pc, #252]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a92:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aae:	4937      	ldr	r1, [pc, #220]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ac2:	4b32      	ldr	r3, [pc, #200]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ac8:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ad0:	492e      	ldr	r1, [pc, #184]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d011      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ae4:	4b29      	ldr	r3, [pc, #164]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aea:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af2:	4926      	ldr	r1, [pc, #152]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b02:	d101      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002b04:	2301      	movs	r3, #1
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b14:	4b1d      	ldr	r3, [pc, #116]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	491a      	ldr	r1, [pc, #104]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d011      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b44:	4911      	ldr	r1, [pc, #68]	@ (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b54:	d101      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b56:	2301      	movs	r3, #1
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b68:	f040 80ff 	bne.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b72:	f7fe fd13 	bl	800159c <HAL_GetTick>
 8002b76:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b78:	e00e      	b.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b7a:	f7fe fd0f 	bl	800159c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d907      	bls.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e188      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	424711e0 	.word	0x424711e0
 8002b94:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b98:	4b7e      	ldr	r3, [pc, #504]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1ea      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d028      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d124      	bne.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bcc:	4b71      	ldr	r3, [pc, #452]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bd2:	0c1b      	lsrs	r3, r3, #16
 8002bd4:	f003 0303 	and.w	r3, r3, #3
 8002bd8:	3301      	adds	r3, #1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bde:	4b6d      	ldr	r3, [pc, #436]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be4:	0e1b      	lsrs	r3, r3, #24
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	019b      	lsls	r3, r3, #6
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	431a      	orrs	r2, r3
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	4961      	ldr	r1, [pc, #388]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d035      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c40:	d130      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c42:	4b54      	ldr	r3, [pc, #336]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c48:	0c1b      	lsrs	r3, r3, #16
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	3301      	adds	r3, #1
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c54:	4b4f      	ldr	r3, [pc, #316]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c5a:	0f1b      	lsrs	r3, r3, #28
 8002c5c:	f003 0307 	and.w	r3, r3, #7
 8002c60:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	019b      	lsls	r3, r3, #6
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	085b      	lsrs	r3, r3, #1
 8002c72:	3b01      	subs	r3, #1
 8002c74:	041b      	lsls	r3, r3, #16
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	061b      	lsls	r3, r3, #24
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	071b      	lsls	r3, r3, #28
 8002c84:	4943      	ldr	r1, [pc, #268]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c8c:	4b41      	ldr	r3, [pc, #260]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c92:	f023 021f 	bic.w	r2, r3, #31
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	493d      	ldr	r1, [pc, #244]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d029      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cb8:	d124      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cba:	4b36      	ldr	r3, [pc, #216]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ccc:	4b31      	ldr	r3, [pc, #196]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd2:	0f1b      	lsrs	r3, r3, #28
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	019b      	lsls	r3, r3, #6
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	061b      	lsls	r3, r3, #24
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	071b      	lsls	r3, r3, #28
 8002cfc:	4925      	ldr	r1, [pc, #148]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d016      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	071b      	lsls	r3, r3, #28
 8002d36:	4917      	ldr	r1, [pc, #92]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d3e:	4b16      	ldr	r3, [pc, #88]	@ (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fe fc2a 	bl	800159c <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d4c:	f7fe fc26 	bl	800159c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e09f      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f040 8095 	bne.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d72:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d78:	f7fe fc10 	bl	800159c <HAL_GetTick>
 8002d7c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d7e:	e00f      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d80:	f7fe fc0c 	bl	800159c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d908      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e085      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	42470068 	.word	0x42470068
 8002d9c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002da0:	4b41      	ldr	r3, [pc, #260]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002dac:	d0e8      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d02b      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d127      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002dd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	431a      	orrs	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	041b      	lsls	r3, r3, #16
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	061b      	lsls	r3, r3, #24
 8002e04:	4928      	ldr	r1, [pc, #160]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e12:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	4922      	ldr	r1, [pc, #136]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d01d      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e3a:	d118      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e42:	0e1b      	lsrs	r3, r3, #24
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	019b      	lsls	r3, r3, #6
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	041b      	lsls	r3, r3, #16
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	4910      	ldr	r1, [pc, #64]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8002eac <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fe fb92 	bl	800159c <HAL_GetTick>
 8002e78:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e7c:	f7fe fb8e 	bl	800159c <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e007      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e9a:	d1ef      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3730      	adds	r7, #48	@ 0x30
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	42470070 	.word	0x42470070

08002eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b0ae      	sub	sp, #184	@ 0xb8
 8002eb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed6:	4bcb      	ldr	r3, [pc, #812]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	f200 8206 	bhi.w	80032f0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8002eec <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002f21 	.word	0x08002f21
 8002ef0:	080032f1 	.word	0x080032f1
 8002ef4:	080032f1 	.word	0x080032f1
 8002ef8:	080032f1 	.word	0x080032f1
 8002efc:	08002f29 	.word	0x08002f29
 8002f00:	080032f1 	.word	0x080032f1
 8002f04:	080032f1 	.word	0x080032f1
 8002f08:	080032f1 	.word	0x080032f1
 8002f0c:	08002f31 	.word	0x08002f31
 8002f10:	080032f1 	.word	0x080032f1
 8002f14:	080032f1 	.word	0x080032f1
 8002f18:	080032f1 	.word	0x080032f1
 8002f1c:	08003121 	.word	0x08003121
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f20:	4bb9      	ldr	r3, [pc, #740]	@ (8003208 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f26:	e1e7      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f28:	4bb8      	ldr	r3, [pc, #736]	@ (800320c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f2e:	e1e3      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f30:	4bb4      	ldr	r3, [pc, #720]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f3c:	4bb1      	ldr	r3, [pc, #708]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d071      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f48:	4bae      	ldr	r3, [pc, #696]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	099b      	lsrs	r3, r3, #6
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f54:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002f6e:	4622      	mov	r2, r4
 8002f70:	462b      	mov	r3, r5
 8002f72:	f04f 0000 	mov.w	r0, #0
 8002f76:	f04f 0100 	mov.w	r1, #0
 8002f7a:	0159      	lsls	r1, r3, #5
 8002f7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f80:	0150      	lsls	r0, r2, #5
 8002f82:	4602      	mov	r2, r0
 8002f84:	460b      	mov	r3, r1
 8002f86:	4621      	mov	r1, r4
 8002f88:	1a51      	subs	r1, r2, r1
 8002f8a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002f8c:	4629      	mov	r1, r5
 8002f8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002fa0:	4649      	mov	r1, r9
 8002fa2:	018b      	lsls	r3, r1, #6
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002faa:	4641      	mov	r1, r8
 8002fac:	018a      	lsls	r2, r1, #6
 8002fae:	4641      	mov	r1, r8
 8002fb0:	1a51      	subs	r1, r2, r1
 8002fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002fb4:	4649      	mov	r1, r9
 8002fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002fc8:	4649      	mov	r1, r9
 8002fca:	00cb      	lsls	r3, r1, #3
 8002fcc:	4641      	mov	r1, r8
 8002fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fd2:	4641      	mov	r1, r8
 8002fd4:	00ca      	lsls	r2, r1, #3
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4622      	mov	r2, r4
 8002fde:	189b      	adds	r3, r3, r2
 8002fe0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fe2:	462b      	mov	r3, r5
 8002fe4:	460a      	mov	r2, r1
 8002fe6:	eb42 0303 	adc.w	r3, r2, r3
 8002fea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ff8:	4629      	mov	r1, r5
 8002ffa:	024b      	lsls	r3, r1, #9
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003002:	4621      	mov	r1, r4
 8003004:	024a      	lsls	r2, r1, #9
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800300e:	2200      	movs	r2, #0
 8003010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003014:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003018:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800301c:	f7fd f950 	bl	80002c0 <__aeabi_uldivmod>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4613      	mov	r3, r2
 8003026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800302a:	e067      	b.n	80030fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302c:	4b75      	ldr	r3, [pc, #468]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	2200      	movs	r2, #0
 8003034:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003038:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800303c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003044:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003046:	2300      	movs	r3, #0
 8003048:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800304a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800304e:	4622      	mov	r2, r4
 8003050:	462b      	mov	r3, r5
 8003052:	f04f 0000 	mov.w	r0, #0
 8003056:	f04f 0100 	mov.w	r1, #0
 800305a:	0159      	lsls	r1, r3, #5
 800305c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003060:	0150      	lsls	r0, r2, #5
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4621      	mov	r1, r4
 8003068:	1a51      	subs	r1, r2, r1
 800306a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800306c:	4629      	mov	r1, r5
 800306e:	eb63 0301 	sbc.w	r3, r3, r1
 8003072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003080:	4649      	mov	r1, r9
 8003082:	018b      	lsls	r3, r1, #6
 8003084:	4641      	mov	r1, r8
 8003086:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800308a:	4641      	mov	r1, r8
 800308c:	018a      	lsls	r2, r1, #6
 800308e:	4641      	mov	r1, r8
 8003090:	ebb2 0a01 	subs.w	sl, r2, r1
 8003094:	4649      	mov	r1, r9
 8003096:	eb63 0b01 	sbc.w	fp, r3, r1
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030ae:	4692      	mov	sl, r2
 80030b0:	469b      	mov	fp, r3
 80030b2:	4623      	mov	r3, r4
 80030b4:	eb1a 0303 	adds.w	r3, sl, r3
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	462b      	mov	r3, r5
 80030bc:	eb4b 0303 	adc.w	r3, fp, r3
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030ce:	4629      	mov	r1, r5
 80030d0:	028b      	lsls	r3, r1, #10
 80030d2:	4621      	mov	r1, r4
 80030d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d8:	4621      	mov	r1, r4
 80030da:	028a      	lsls	r2, r1, #10
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030e4:	2200      	movs	r2, #0
 80030e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80030e8:	677a      	str	r2, [r7, #116]	@ 0x74
 80030ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80030ee:	f7fd f8e7 	bl	80002c0 <__aeabi_uldivmod>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4613      	mov	r3, r2
 80030f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80030fc:	4b41      	ldr	r3, [pc, #260]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	3301      	adds	r3, #1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800310e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003112:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800311e:	e0eb      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003120:	4b38      	ldr	r3, [pc, #224]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003128:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312c:	4b35      	ldr	r3, [pc, #212]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d06b      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003138:	4b32      	ldr	r3, [pc, #200]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x354>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	099b      	lsrs	r3, r3, #6
 800313e:	2200      	movs	r2, #0
 8003140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003142:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003144:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	663b      	str	r3, [r7, #96]	@ 0x60
 800314c:	2300      	movs	r3, #0
 800314e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003150:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003154:	4622      	mov	r2, r4
 8003156:	462b      	mov	r3, r5
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	0159      	lsls	r1, r3, #5
 8003162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003166:	0150      	lsls	r0, r2, #5
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4621      	mov	r1, r4
 800316e:	1a51      	subs	r1, r2, r1
 8003170:	61b9      	str	r1, [r7, #24]
 8003172:	4629      	mov	r1, r5
 8003174:	eb63 0301 	sbc.w	r3, r3, r1
 8003178:	61fb      	str	r3, [r7, #28]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003186:	4659      	mov	r1, fp
 8003188:	018b      	lsls	r3, r1, #6
 800318a:	4651      	mov	r1, sl
 800318c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003190:	4651      	mov	r1, sl
 8003192:	018a      	lsls	r2, r1, #6
 8003194:	4651      	mov	r1, sl
 8003196:	ebb2 0801 	subs.w	r8, r2, r1
 800319a:	4659      	mov	r1, fp
 800319c:	eb63 0901 	sbc.w	r9, r3, r1
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b4:	4690      	mov	r8, r2
 80031b6:	4699      	mov	r9, r3
 80031b8:	4623      	mov	r3, r4
 80031ba:	eb18 0303 	adds.w	r3, r8, r3
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	462b      	mov	r3, r5
 80031c2:	eb49 0303 	adc.w	r3, r9, r3
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031d4:	4629      	mov	r1, r5
 80031d6:	024b      	lsls	r3, r1, #9
 80031d8:	4621      	mov	r1, r4
 80031da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031de:	4621      	mov	r1, r4
 80031e0:	024a      	lsls	r2, r1, #9
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031ea:	2200      	movs	r2, #0
 80031ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031ee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80031f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031f4:	f7fd f864 	bl	80002c0 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003202:	e065      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x420>
 8003204:	40023800 	.word	0x40023800
 8003208:	00f42400 	.word	0x00f42400
 800320c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003210:	4b3d      	ldr	r3, [pc, #244]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x458>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	2200      	movs	r2, #0
 8003218:	4618      	mov	r0, r3
 800321a:	4611      	mov	r1, r2
 800321c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003220:	653b      	str	r3, [r7, #80]	@ 0x50
 8003222:	2300      	movs	r3, #0
 8003224:	657b      	str	r3, [r7, #84]	@ 0x54
 8003226:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800322a:	4642      	mov	r2, r8
 800322c:	464b      	mov	r3, r9
 800322e:	f04f 0000 	mov.w	r0, #0
 8003232:	f04f 0100 	mov.w	r1, #0
 8003236:	0159      	lsls	r1, r3, #5
 8003238:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323c:	0150      	lsls	r0, r2, #5
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4641      	mov	r1, r8
 8003244:	1a51      	subs	r1, r2, r1
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	4649      	mov	r1, r9
 800324a:	eb63 0301 	sbc.w	r3, r3, r1
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800325c:	4659      	mov	r1, fp
 800325e:	018b      	lsls	r3, r1, #6
 8003260:	4651      	mov	r1, sl
 8003262:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003266:	4651      	mov	r1, sl
 8003268:	018a      	lsls	r2, r1, #6
 800326a:	4651      	mov	r1, sl
 800326c:	1a54      	subs	r4, r2, r1
 800326e:	4659      	mov	r1, fp
 8003270:	eb63 0501 	sbc.w	r5, r3, r1
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	00eb      	lsls	r3, r5, #3
 800327e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003282:	00e2      	lsls	r2, r4, #3
 8003284:	4614      	mov	r4, r2
 8003286:	461d      	mov	r5, r3
 8003288:	4643      	mov	r3, r8
 800328a:	18e3      	adds	r3, r4, r3
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	464b      	mov	r3, r9
 8003290:	eb45 0303 	adc.w	r3, r5, r3
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032a2:	4629      	mov	r1, r5
 80032a4:	028b      	lsls	r3, r1, #10
 80032a6:	4621      	mov	r1, r4
 80032a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032ac:	4621      	mov	r1, r4
 80032ae:	028a      	lsls	r2, r1, #10
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032b8:	2200      	movs	r2, #0
 80032ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032bc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80032be:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032c2:	f7fc fffd 	bl	80002c0 <__aeabi_uldivmod>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4613      	mov	r3, r2
 80032cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <HAL_RCC_GetSysClockFreq+0x458>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	0f1b      	lsrs	r3, r3, #28
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80032de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80032e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032ee:	e003      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b06      	ldr	r3, [pc, #24]	@ (800330c <HAL_RCC_GetSysClockFreq+0x45c>)
 80032f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	37b8      	adds	r7, #184	@ 0xb8
 8003300:	46bd      	mov	sp, r7
 8003302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003306:	bf00      	nop
 8003308:	40023800 	.word	0x40023800
 800330c:	00f42400 	.word	0x00f42400

08003310 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e28d      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8083 	beq.w	8003436 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003330:	4b94      	ldr	r3, [pc, #592]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b04      	cmp	r3, #4
 800333a:	d019      	beq.n	8003370 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800333c:	4b91      	ldr	r3, [pc, #580]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
        || \
 8003344:	2b08      	cmp	r3, #8
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003348:	4b8e      	ldr	r3, [pc, #568]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003350:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003354:	d00c      	beq.n	8003370 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003356:	4b8b      	ldr	r3, [pc, #556]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800335e:	2b0c      	cmp	r3, #12
 8003360:	d112      	bne.n	8003388 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003362:	4b88      	ldr	r3, [pc, #544]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336e:	d10b      	bne.n	8003388 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003370:	4b84      	ldr	r3, [pc, #528]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d05b      	beq.n	8003434 <HAL_RCC_OscConfig+0x124>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d157      	bne.n	8003434 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e25a      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003390:	d106      	bne.n	80033a0 <HAL_RCC_OscConfig+0x90>
 8003392:	4b7c      	ldr	r3, [pc, #496]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a7b      	ldr	r2, [pc, #492]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e01d      	b.n	80033dc <HAL_RCC_OscConfig+0xcc>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0xb4>
 80033aa:	4b76      	ldr	r3, [pc, #472]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a75      	ldr	r2, [pc, #468]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80033b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	4b73      	ldr	r3, [pc, #460]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a72      	ldr	r2, [pc, #456]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0xcc>
 80033c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80033ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b6c      	ldr	r3, [pc, #432]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80033d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d013      	beq.n	800340c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe f8da 	bl	800159c <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe f8d6 	bl	800159c <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	@ 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e21f      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fe:	4b61      	ldr	r3, [pc, #388]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0xdc>
 800340a:	e014      	b.n	8003436 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe f8c6 	bl	800159c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe f8c2 	bl	800159c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	@ 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e20b      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003426:	4b57      	ldr	r3, [pc, #348]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f0      	bne.n	8003414 <HAL_RCC_OscConfig+0x104>
 8003432:	e000      	b.n	8003436 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d06f      	beq.n	8003522 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003442:	4b50      	ldr	r3, [pc, #320]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b00      	cmp	r3, #0
 800344c:	d017      	beq.n	800347e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800344e:	4b4d      	ldr	r3, [pc, #308]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
        || \
 8003456:	2b08      	cmp	r3, #8
 8003458:	d105      	bne.n	8003466 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800345a:	4b4a      	ldr	r3, [pc, #296]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d11c      	bne.n	80034ac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b44      	ldr	r3, [pc, #272]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	4b41      	ldr	r3, [pc, #260]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x186>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1d3      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b3b      	ldr	r3, [pc, #236]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4937      	ldr	r1, [pc, #220]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b4:	4b34      	ldr	r3, [pc, #208]	@ (8003588 <HAL_RCC_OscConfig+0x278>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fe f86f 	bl	800159c <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fe f86b 	bl	800159c <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1b4      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b28      	ldr	r3, [pc, #160]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4925      	ldr	r1, [pc, #148]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <HAL_RCC_OscConfig+0x278>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe f84e 	bl	800159c <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe f84a 	bl	800159c <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e193      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	4b1b      	ldr	r3, [pc, #108]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d036      	beq.n	800359c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b15      	ldr	r3, [pc, #84]	@ (800358c <HAL_RCC_OscConfig+0x27c>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe f82e 	bl	800159c <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe f82a 	bl	800159c <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e173      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	4b0b      	ldr	r3, [pc, #44]	@ (8003584 <HAL_RCC_OscConfig+0x274>)
 8003558:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x234>
 8003562:	e01b      	b.n	800359c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b09      	ldr	r3, [pc, #36]	@ (800358c <HAL_RCC_OscConfig+0x27c>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356a:	f7fe f817 	bl	800159c <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	e00e      	b.n	8003590 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003572:	f7fe f813 	bl	800159c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d907      	bls.n	8003590 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e15c      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
 8003584:	40023800 	.word	0x40023800
 8003588:	42470000 	.word	0x42470000
 800358c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b8a      	ldr	r3, [pc, #552]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003592:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ea      	bne.n	8003572 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8097 	beq.w	80036d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b83      	ldr	r3, [pc, #524]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10f      	bne.n	80035da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	4b7f      	ldr	r3, [pc, #508]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c2:	4a7e      	ldr	r2, [pc, #504]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80035c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ca:	4b7c      	ldr	r3, [pc, #496]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4b79      	ldr	r3, [pc, #484]	@ (80037c0 <HAL_RCC_OscConfig+0x4b0>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d118      	bne.n	8003618 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e6:	4b76      	ldr	r3, [pc, #472]	@ (80037c0 <HAL_RCC_OscConfig+0x4b0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a75      	ldr	r2, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0x4b0>)
 80035ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035f2:	f7fd ffd3 	bl	800159c <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035fa:	f7fd ffcf 	bl	800159c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e118      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	4b6c      	ldr	r3, [pc, #432]	@ (80037c0 <HAL_RCC_OscConfig+0x4b0>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0f0      	beq.n	80035fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x31e>
 8003620:	4b66      	ldr	r3, [pc, #408]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003624:	4a65      	ldr	r2, [pc, #404]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6713      	str	r3, [r2, #112]	@ 0x70
 800362c:	e01c      	b.n	8003668 <HAL_RCC_OscConfig+0x358>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b05      	cmp	r3, #5
 8003634:	d10c      	bne.n	8003650 <HAL_RCC_OscConfig+0x340>
 8003636:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800363a:	4a60      	ldr	r2, [pc, #384]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 800363c:	f043 0304 	orr.w	r3, r3, #4
 8003640:	6713      	str	r3, [r2, #112]	@ 0x70
 8003642:	4b5e      	ldr	r3, [pc, #376]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003646:	4a5d      	ldr	r2, [pc, #372]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6713      	str	r3, [r2, #112]	@ 0x70
 800364e:	e00b      	b.n	8003668 <HAL_RCC_OscConfig+0x358>
 8003650:	4b5a      	ldr	r3, [pc, #360]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a59      	ldr	r2, [pc, #356]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
 800365c:	4b57      	ldr	r3, [pc, #348]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003660:	4a56      	ldr	r2, [pc, #344]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003662:	f023 0304 	bic.w	r3, r3, #4
 8003666:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d015      	beq.n	800369c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003670:	f7fd ff94 	bl	800159c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fd ff90 	bl	800159c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0d7      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368e:	4b4b      	ldr	r3, [pc, #300]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0ee      	beq.n	8003678 <HAL_RCC_OscConfig+0x368>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369c:	f7fd ff7e 	bl	800159c <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a2:	e00a      	b.n	80036ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a4:	f7fd ff7a 	bl	800159c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e0c1      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ba:	4b40      	ldr	r3, [pc, #256]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1ee      	bne.n	80036a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d105      	bne.n	80036d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036cc:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	4a3a      	ldr	r2, [pc, #232]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80036d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80ad 	beq.w	800383c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e2:	4b36      	ldr	r3, [pc, #216]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d060      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d145      	bne.n	8003782 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b33      	ldr	r3, [pc, #204]	@ (80037c4 <HAL_RCC_OscConfig+0x4b4>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fd ff4e 	bl	800159c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003704:	f7fd ff4a 	bl	800159c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e093      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003730:	019b      	lsls	r3, r3, #6
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374c:	071b      	lsls	r3, r3, #28
 800374e:	491b      	ldr	r1, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003754:	4b1b      	ldr	r3, [pc, #108]	@ (80037c4 <HAL_RCC_OscConfig+0x4b4>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fd ff1f 	bl	800159c <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7fd ff1b 	bl	800159c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e064      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003774:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x452>
 8003780:	e05c      	b.n	800383c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <HAL_RCC_OscConfig+0x4b4>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fd ff08 	bl	800159c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7fd ff04 	bl	800159c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e04d      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_RCC_OscConfig+0x4ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x480>
 80037ae:	e045      	b.n	800383c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e040      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40007000 	.word	0x40007000
 80037c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c8:	4b1f      	ldr	r3, [pc, #124]	@ (8003848 <HAL_RCC_OscConfig+0x538>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d030      	beq.n	8003838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d129      	bne.n	8003838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d122      	bne.n	8003838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037f8:	4013      	ands	r3, r2
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003800:	4293      	cmp	r3, r2
 8003802:	d119      	bne.n	8003838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380e:	085b      	lsrs	r3, r3, #1
 8003810:	3b01      	subs	r3, #1
 8003812:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d10f      	bne.n	8003838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d107      	bne.n	8003838 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40023800 	.word	0x40023800

0800384c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e073      	b.n	8003946 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7f5b      	ldrb	r3, [r3, #29]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd faee 	bl	8000e50 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0310 	and.w	r3, r3, #16
 8003884:	2b10      	cmp	r3, #16
 8003886:	d055      	beq.n	8003934 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	22ca      	movs	r2, #202	@ 0xca
 800388e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2253      	movs	r2, #83	@ 0x53
 8003896:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f92b 	bl	8003af4 <RTC_EnterInitMode>
 800389e:	4603      	mov	r3, r0
 80038a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d12c      	bne.n	8003902 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80038b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ba:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6899      	ldr	r1, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6919      	ldr	r1, [r3, #16]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	041a      	lsls	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f932 	bl	8003b62 <RTC_ExitInitMode>
 80038fe:	4603      	mov	r3, r0
 8003900:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d110      	bne.n	800392a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003916:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699a      	ldr	r2, [r3, #24]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	22ff      	movs	r2, #255	@ 0xff
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24
 8003932:	e001      	b.n	8003938 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003934:	2300      	movs	r3, #0
 8003936:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d102      	bne.n	8003944 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003980:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003984:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	0c1b      	lsrs	r3, r3, #16
 800398a:	b2db      	uxtb	r3, r3
 800398c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003990:	b2da      	uxtb	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	0a1b      	lsrs	r3, r3, #8
 800399a:	b2db      	uxtb	r3, r3
 800399c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	0d9b      	lsrs	r3, r3, #22
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11a      	bne.n	8003a00 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f8ec 	bl	8003bac <RTC_Bcd2ToByte>
 80039d4:	4603      	mov	r3, r0
 80039d6:	461a      	mov	r2, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f8e3 	bl	8003bac <RTC_Bcd2ToByte>
 80039e6:	4603      	mov	r3, r0
 80039e8:	461a      	mov	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	789b      	ldrb	r3, [r3, #2]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f8da 	bl	8003bac <RTC_Bcd2ToByte>
 80039f8:	4603      	mov	r3, r0
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003a28:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	b2da      	uxtb	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	0b5b      	lsrs	r3, r3, #13
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d11a      	bne.n	8003a9e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	78db      	ldrb	r3, [r3, #3]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f89d 	bl	8003bac <RTC_Bcd2ToByte>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	785b      	ldrb	r3, [r3, #1]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 f894 	bl	8003bac <RTC_Bcd2ToByte>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	789b      	ldrb	r3, [r3, #2]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 f88b 	bl	8003bac <RTC_Bcd2ToByte>
 8003a96:	4603      	mov	r3, r0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <HAL_RTC_WaitForSynchro+0x48>)
 8003aba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003abc:	f7fd fd6e 	bl	800159c <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ac2:	e009      	b.n	8003ad8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ac4:	f7fd fd6a 	bl	800159c <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e007      	b.n	8003ae8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ee      	beq.n	8003ac4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	00017f5f 	.word	0x00017f5f

08003af4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003b00:	2300      	movs	r3, #0
 8003b02:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d122      	bne.n	8003b58 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b20:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b22:	f7fd fd3b 	bl	800159c <HAL_GetTick>
 8003b26:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b28:	e00c      	b.n	8003b44 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b2a:	f7fd fd37 	bl	800159c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b38:	d904      	bls.n	8003b44 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <RTC_EnterInitMode+0x64>
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d1e8      	bne.n	8003b2a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b7c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff8b 	bl	8003aa8 <HAL_RTC_WaitForSynchro>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d004      	beq.n	8003ba2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	091b      	lsrs	r3, r3, #4
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	b2db      	uxtb	r3, r3
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e042      	b.n	8003c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fd faac 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2224      	movs	r2, #36	@ 0x24
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 ff95 	bl	8004b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	@ 0x30
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d162      	bne.n	8003d68 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_UART_Transmit_DMA+0x26>
 8003ca8:	88fb      	ldrh	r3, [r7, #6]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e05b      	b.n	8003d6a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2221      	movs	r2, #33	@ 0x21
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	4a27      	ldr	r2, [pc, #156]	@ (8003d74 <HAL_UART_Transmit_DMA+0xec>)
 8003cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cde:	4a26      	ldr	r2, [pc, #152]	@ (8003d78 <HAL_UART_Transmit_DMA+0xf0>)
 8003ce0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce6:	4a25      	ldr	r2, [pc, #148]	@ (8003d7c <HAL_UART_Transmit_DMA+0xf4>)
 8003ce8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cee:	2200      	movs	r2, #0
 8003cf0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8003cf2:	f107 0308 	add.w	r3, r7, #8
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3304      	adds	r3, #4
 8003d06:	461a      	mov	r2, r3
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	f7fd fe37 	bl	800197c <HAL_DMA_Start_IT>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2210      	movs	r2, #16
 8003d18:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e021      	b.n	8003d6a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d2e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3314      	adds	r3, #20
 8003d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	3314      	adds	r3, #20
 8003d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6a39      	ldr	r1, [r7, #32]
 8003d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3730      	adds	r7, #48	@ 0x30
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	080043d9 	.word	0x080043d9
 8003d78:	08004473 	.word	0x08004473
 8003d7c:	080045f7 	.word	0x080045f7

08003d80 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08c      	sub	sp, #48	@ 0x30
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b20      	cmp	r3, #32
 8003d98:	d146      	bne.n	8003e28 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e03f      	b.n	8003e2a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	461a      	mov	r2, r3
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fc65 	bl	800468c <UART_Start_Receive_DMA>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d125      	bne.n	8003e1c <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	613b      	str	r3, [r7, #16]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	330c      	adds	r3, #12
 8003dec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	e853 3f00 	ldrex	r3, [r3]
 8003df4:	617b      	str	r3, [r7, #20]
   return(result);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f043 0310 	orr.w	r3, r3, #16
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e06:	627a      	str	r2, [r7, #36]	@ 0x24
 8003e08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0a:	6a39      	ldr	r1, [r7, #32]
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e0e:	e841 2300 	strex	r3, r2, [r1]
 8003e12:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1e5      	bne.n	8003de6 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003e1a:	e002      	b.n	8003e22 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003e22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e26:	e000      	b.n	8003e2a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8003e28:	2302      	movs	r3, #2
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3730      	adds	r7, #48	@ 0x30
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b0ba      	sub	sp, #232	@ 0xe8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_UART_IRQHandler+0x66>
 8003e86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fda4 	bl	80049e0 <UART_Receive_IT>
      return;
 8003e98:	e273      	b.n	8004382 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 80de 	beq.w	8004060 <HAL_UART_IRQHandler+0x22c>
 8003ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80d1 	beq.w	8004060 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xae>
 8003eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eda:	f043 0201 	orr.w	r2, r3, #1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <HAL_UART_IRQHandler+0xd2>
 8003eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	f043 0202 	orr.w	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_UART_IRQHandler+0xf6>
 8003f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f043 0204 	orr.w	r2, r3, #4
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d011      	beq.n	8003f5a <HAL_UART_IRQHandler+0x126>
 8003f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d105      	bne.n	8003f4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d005      	beq.n	8003f5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f043 0208 	orr.w	r2, r3, #8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 820a 	beq.w	8004378 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x14e>
 8003f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fd2f 	bl	80049e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b40      	cmp	r3, #64	@ 0x40
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d103      	bne.n	8003fae <HAL_UART_IRQHandler+0x17a>
 8003fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04f      	beq.n	800404e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fc3a 	bl	8004828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d141      	bne.n	8004046 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3314      	adds	r3, #20
 8003fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3314      	adds	r3, #20
 8003fea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ffa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004006:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1d9      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d013      	beq.n	800403e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800401a:	4a8a      	ldr	r2, [pc, #552]	@ (8004244 <HAL_UART_IRQHandler+0x410>)
 800401c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004022:	4618      	mov	r0, r3
 8004024:	f7fd fd72 	bl	8001b0c <HAL_DMA_Abort_IT>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d016      	beq.n	800405c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004038:	4610      	mov	r0, r2
 800403a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800403c:	e00e      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 f9c0 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004044:	e00a      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f9bc 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800404c:	e006      	b.n	800405c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f9b8 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800405a:	e18d      	b.n	8004378 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	bf00      	nop
    return;
 800405e:	e18b      	b.n	8004378 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004064:	2b01      	cmp	r3, #1
 8004066:	f040 8167 	bne.w	8004338 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800406a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800406e:	f003 0310 	and.w	r3, r3, #16
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8160 	beq.w	8004338 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 8159 	beq.w	8004338 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60bb      	str	r3, [r7, #8]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a6:	2b40      	cmp	r3, #64	@ 0x40
 80040a8:	f040 80ce 	bne.w	8004248 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a9 	beq.w	8004214 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040ca:	429a      	cmp	r2, r3
 80040cc:	f080 80a2 	bcs.w	8004214 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e2:	f000 8088 	beq.w	80041f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004100:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004112:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004116:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800411e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800412a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1d9      	bne.n	80040e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004142:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004156:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800415a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800415e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004168:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e1      	bne.n	8004132 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004176:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004178:	e853 3f00 	ldrex	r3, [r3]
 800417c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800417e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004184:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004192:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004194:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004198:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800419a:	e841 2300 	strex	r3, r2, [r1]
 800419e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e3      	bne.n	800416e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c6:	f023 0310 	bic.w	r3, r3, #16
 80041ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041e0:	e841 2300 	strex	r3, r2, [r1]
 80041e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e3      	bne.n	80041b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fd fc1b 	bl	8001a2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2202      	movs	r2, #2
 80041fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004204:	b29b      	uxth	r3, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	b29b      	uxth	r3, r3
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7fc fdb1 	bl	8000d74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004212:	e0b3      	b.n	800437c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004218:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800421c:	429a      	cmp	r2, r3
 800421e:	f040 80ad 	bne.w	800437c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800422c:	f040 80a6 	bne.w	800437c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800423a:	4619      	mov	r1, r3
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7fc fd99 	bl	8000d74 <HAL_UARTEx_RxEventCallback>
      return;
 8004242:	e09b      	b.n	800437c <HAL_UART_IRQHandler+0x548>
 8004244:	080048ef 	.word	0x080048ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 808e 	beq.w	8004380 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8089 	beq.w	8004380 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	330c      	adds	r3, #12
 8004274:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004278:	e853 3f00 	ldrex	r3, [r3]
 800427c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800427e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004284:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004292:	647a      	str	r2, [r7, #68]	@ 0x44
 8004294:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004296:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004298:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e3      	bne.n	800426e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3314      	adds	r3, #20
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	623b      	str	r3, [r7, #32]
   return(result);
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3314      	adds	r3, #20
 80042c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e3      	bne.n	80042a6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0310 	bic.w	r3, r3, #16
 8004302:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004310:	61fa      	str	r2, [r7, #28]
 8004312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	69fa      	ldr	r2, [r7, #28]
 8004318:	e841 2300 	strex	r3, r2, [r1]
 800431c:	617b      	str	r3, [r7, #20]
   return(result);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1e3      	bne.n	80042ec <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800432a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800432e:	4619      	mov	r1, r3
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fc fd1f 	bl	8000d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004336:	e023      	b.n	8004380 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <HAL_UART_IRQHandler+0x524>
 8004344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fadd 	bl	8004910 <UART_Transmit_IT>
    return;
 8004356:	e014      	b.n	8004382 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800435c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <HAL_UART_IRQHandler+0x54e>
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fb1d 	bl	80049b0 <UART_EndTransmit_IT>
    return;
 8004376:	e004      	b.n	8004382 <HAL_UART_IRQHandler+0x54e>
    return;
 8004378:	bf00      	nop
 800437a:	e002      	b.n	8004382 <HAL_UART_IRQHandler+0x54e>
      return;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_UART_IRQHandler+0x54e>
      return;
 8004380:	bf00      	nop
  }
}
 8004382:	37e8      	adds	r7, #232	@ 0xe8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004390:	bf00      	nop
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b090      	sub	sp, #64	@ 0x40
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d137      	bne.n	8004464 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80043f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043f6:	2200      	movs	r2, #0
 80043f8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80043fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3314      	adds	r3, #20
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	623b      	str	r3, [r7, #32]
   return(result);
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004410:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3314      	adds	r3, #20
 8004418:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800441a:	633a      	str	r2, [r7, #48]	@ 0x30
 800441c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e5      	bne.n	80043fa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800442e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	60fb      	str	r3, [r7, #12]
   return(result);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004444:	637b      	str	r3, [r7, #52]	@ 0x34
 8004446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800444e:	61fa      	str	r2, [r7, #28]
 8004450:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	69b9      	ldr	r1, [r7, #24]
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	617b      	str	r3, [r7, #20]
   return(result);
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e5      	bne.n	800442e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004462:	e002      	b.n	800446a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004464:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004466:	f7fc fc69 	bl	8000d3c <HAL_UART_TxCpltCallback>
}
 800446a:	bf00      	nop
 800446c:	3740      	adds	r7, #64	@ 0x40
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b084      	sub	sp, #16
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ff81 	bl	8004388 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b09c      	sub	sp, #112	@ 0x70
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d172      	bne.n	8004590 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ac:	2200      	movs	r2, #0
 80044ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	330c      	adds	r3, #12
 80044ce:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80044d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80044d2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044d8:	e841 2300 	strex	r3, r2, [r1]
 80044dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1e5      	bne.n	80044b0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ee:	e853 3f00 	ldrex	r3, [r3]
 80044f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f6:	f023 0301 	bic.w	r3, r3, #1
 80044fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80044fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3314      	adds	r3, #20
 8004502:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004504:	647a      	str	r2, [r7, #68]	@ 0x44
 8004506:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800450a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800450c:	e841 2300 	strex	r3, r2, [r1]
 8004510:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1e5      	bne.n	80044e4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3314      	adds	r3, #20
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	623b      	str	r3, [r7, #32]
   return(result);
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800452e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3314      	adds	r3, #20
 8004536:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004538:	633a      	str	r2, [r7, #48]	@ 0x30
 800453a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800453e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800454c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	2b01      	cmp	r3, #1
 800455a:	d119      	bne.n	8004590 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	330c      	adds	r3, #12
 8004562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	60fb      	str	r3, [r7, #12]
   return(result);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0310 	bic.w	r3, r3, #16
 8004572:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800457c:	61fa      	str	r2, [r7, #28]
 800457e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	617b      	str	r3, [r7, #20]
   return(result);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004592:	2200      	movs	r2, #0
 8004594:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459a:	2b01      	cmp	r3, #1
 800459c:	d106      	bne.n	80045ac <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045a2:	4619      	mov	r1, r3
 80045a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045a6:	f7fc fbe5 	bl	8000d74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045aa:	e002      	b.n	80045b2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80045ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80045ae:	f7ff fef5 	bl	800439c <HAL_UART_RxCpltCallback>
}
 80045b2:	bf00      	nop
 80045b4:	3770      	adds	r7, #112	@ 0x70
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2201      	movs	r2, #1
 80045cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d108      	bne.n	80045e8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4619      	mov	r1, r3
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f7fc fbc7 	bl	8000d74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045e6:	e002      	b.n	80045ee <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff fee1 	bl	80043b0 <HAL_UART_RxHalfCpltCallback>
}
 80045ee:	bf00      	nop
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004606:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004612:	2b80      	cmp	r3, #128	@ 0x80
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b21      	cmp	r3, #33	@ 0x21
 8004628:	d108      	bne.n	800463c <UART_DMAError+0x46>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2200      	movs	r2, #0
 8004634:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004636:	68b8      	ldr	r0, [r7, #8]
 8004638:	f000 f8ce 	bl	80047d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004646:	2b40      	cmp	r3, #64	@ 0x40
 8004648:	bf0c      	ite	eq
 800464a:	2301      	moveq	r3, #1
 800464c:	2300      	movne	r3, #0
 800464e:	b2db      	uxtb	r3, r3
 8004650:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b22      	cmp	r3, #34	@ 0x22
 800465c:	d108      	bne.n	8004670 <UART_DMAError+0x7a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2200      	movs	r2, #0
 8004668:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800466a:	68b8      	ldr	r0, [r7, #8]
 800466c:	f000 f8dc 	bl	8004828 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004674:	f043 0210 	orr.w	r2, r3, #16
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800467c:	68b8      	ldr	r0, [r7, #8]
 800467e:	f7ff fea1 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b098      	sub	sp, #96	@ 0x60
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2222      	movs	r2, #34	@ 0x22
 80046b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b8:	4a44      	ldr	r2, [pc, #272]	@ (80047cc <UART_Start_Receive_DMA+0x140>)
 80046ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c0:	4a43      	ldr	r2, [pc, #268]	@ (80047d0 <UART_Start_Receive_DMA+0x144>)
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c8:	4a42      	ldr	r2, [pc, #264]	@ (80047d4 <UART_Start_Receive_DMA+0x148>)
 80046ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d0:	2200      	movs	r2, #0
 80046d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	88fb      	ldrh	r3, [r7, #6]
 80046ec:	f7fd f946 	bl	800197c <HAL_DMA_Start_IT>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d008      	beq.n	8004708 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2210      	movs	r2, #16
 80046fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2220      	movs	r2, #32
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e05d      	b.n	80047c4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d019      	beq.n	800475a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	330c      	adds	r3, #12
 800472c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	330c      	adds	r3, #12
 8004744:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004746:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004748:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800474c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3314      	adds	r3, #20
 8004760:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800476a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	657b      	str	r3, [r7, #84]	@ 0x54
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3314      	adds	r3, #20
 8004778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800477a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800477c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004782:	e841 2300 	strex	r3, r2, [r1]
 8004786:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1e5      	bne.n	800475a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	3314      	adds	r3, #20
 8004794:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	e853 3f00 	ldrex	r3, [r3]
 800479c:	617b      	str	r3, [r7, #20]
   return(result);
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80047ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80047b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b2:	6a39      	ldr	r1, [r7, #32]
 80047b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b6:	e841 2300 	strex	r3, r2, [r1]
 80047ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1e5      	bne.n	800478e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3760      	adds	r7, #96	@ 0x60
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	0800448f 	.word	0x0800448f
 80047d0:	080045bb 	.word	0x080045bb
 80047d4:	080045f7 	.word	0x080045f7

080047d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	@ 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	330c      	adds	r3, #12
 80047e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	61ba      	str	r2, [r7, #24]
 8004802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	6979      	ldr	r1, [r7, #20]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	613b      	str	r3, [r7, #16]
   return(result);
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800481c:	bf00      	nop
 800481e:	3724      	adds	r7, #36	@ 0x24
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004828:	b480      	push	{r7}
 800482a:	b095      	sub	sp, #84	@ 0x54
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004842:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004850:	643a      	str	r2, [r7, #64]	@ 0x40
 8004852:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004856:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e5      	bne.n	8004830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	61fb      	str	r3, [r7, #28]
   return(result);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3314      	adds	r3, #20
 8004882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004884:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800488a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489c:	2b01      	cmp	r3, #1
 800489e:	d119      	bne.n	80048d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0310 	bic.w	r3, r3, #16
 80048b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	330c      	adds	r3, #12
 80048be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048c0:	61ba      	str	r2, [r7, #24]
 80048c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	613b      	str	r3, [r7, #16]
   return(result);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e5      	bne.n	80048a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048e2:	bf00      	nop
 80048e4:	3754      	adds	r7, #84	@ 0x54
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f7ff fd5e 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b21      	cmp	r3, #33	@ 0x21
 8004922:	d13e      	bne.n	80049a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800492c:	d114      	bne.n	8004958 <UART_Transmit_IT+0x48>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d110      	bne.n	8004958 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	461a      	mov	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800494a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	1c9a      	adds	r2, r3, #2
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	621a      	str	r2, [r3, #32]
 8004956:	e008      	b.n	800496a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	1c59      	adds	r1, r3, #1
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6211      	str	r1, [r2, #32]
 8004962:	781a      	ldrb	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29b      	uxth	r3, r3
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	4619      	mov	r1, r3
 8004978:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800498c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800499c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049a2:	2302      	movs	r3, #2
  }
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3714      	adds	r7, #20
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7fc f9b3 	bl	8000d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	@ 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	2b22      	cmp	r3, #34	@ 0x22
 80049fa:	f040 80aa 	bne.w	8004b52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a06:	d115      	bne.n	8004a34 <UART_Receive_IT+0x54>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d111      	bne.n	8004a34 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a32:	e024      	b.n	8004a7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a42:	d007      	beq.n	8004a54 <UART_Receive_IT+0x74>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <UART_Receive_IT+0x82>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d106      	bne.n	8004a62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	e008      	b.n	8004a74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a6e:	b2da      	uxtb	r2, r3
 8004a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	1c5a      	adds	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d15d      	bne.n	8004b4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0220 	bic.w	r2, r2, #32
 8004aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68da      	ldr	r2, [r3, #12]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ab0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d135      	bne.n	8004b44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	e853 3f00 	ldrex	r3, [r3]
 8004aec:	613b      	str	r3, [r7, #16]
   return(result);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f023 0310 	bic.w	r3, r3, #16
 8004af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afe:	623a      	str	r2, [r7, #32]
 8004b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	69f9      	ldr	r1, [r7, #28]
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e5      	bne.n	8004ade <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d10a      	bne.n	8004b36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b20:	2300      	movs	r3, #0
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fc f919 	bl	8000d74 <HAL_UARTEx_RxEventCallback>
 8004b42:	e002      	b.n	8004b4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fc29 	bl	800439c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e002      	b.n	8004b54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	e000      	b.n	8004b54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b52:	2302      	movs	r3, #2
  }
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3730      	adds	r7, #48	@ 0x30
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b60:	b0c0      	sub	sp, #256	@ 0x100
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b78:	68d9      	ldr	r1, [r3, #12]
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	ea40 0301 	orr.w	r3, r0, r1
 8004b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bb4:	f021 010c 	bic.w	r1, r1, #12
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bc2:	430b      	orrs	r3, r1
 8004bc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd6:	6999      	ldr	r1, [r3, #24]
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	ea40 0301 	orr.w	r3, r0, r1
 8004be2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b8f      	ldr	r3, [pc, #572]	@ (8004e28 <UART_SetConfig+0x2cc>)
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d005      	beq.n	8004bfc <UART_SetConfig+0xa0>
 8004bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8004e2c <UART_SetConfig+0x2d0>)
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d104      	bne.n	8004c06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bfc:	f7fd fe1a 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 8004c00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c04:	e003      	b.n	8004c0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c06:	f7fd fe01 	bl	800280c <HAL_RCC_GetPCLK1Freq>
 8004c0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c18:	f040 810c 	bne.w	8004e34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c20:	2200      	movs	r2, #0
 8004c22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c2e:	4622      	mov	r2, r4
 8004c30:	462b      	mov	r3, r5
 8004c32:	1891      	adds	r1, r2, r2
 8004c34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c36:	415b      	adcs	r3, r3
 8004c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c3e:	4621      	mov	r1, r4
 8004c40:	eb12 0801 	adds.w	r8, r2, r1
 8004c44:	4629      	mov	r1, r5
 8004c46:	eb43 0901 	adc.w	r9, r3, r1
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c5e:	4690      	mov	r8, r2
 8004c60:	4699      	mov	r9, r3
 8004c62:	4623      	mov	r3, r4
 8004c64:	eb18 0303 	adds.w	r3, r8, r3
 8004c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	eb49 0303 	adc.w	r3, r9, r3
 8004c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	18db      	adds	r3, r3, r3
 8004c8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c90:	4613      	mov	r3, r2
 8004c92:	eb42 0303 	adc.w	r3, r2, r3
 8004c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ca0:	f7fb fb0e 	bl	80002c0 <__aeabi_uldivmod>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	4b61      	ldr	r3, [pc, #388]	@ (8004e30 <UART_SetConfig+0x2d4>)
 8004caa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	011c      	lsls	r4, r3, #4
 8004cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	eb12 0a01 	adds.w	sl, r2, r1
 8004cda:	4649      	mov	r1, r9
 8004cdc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf4:	4692      	mov	sl, r2
 8004cf6:	469b      	mov	fp, r3
 8004cf8:	4643      	mov	r3, r8
 8004cfa:	eb1a 0303 	adds.w	r3, sl, r3
 8004cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d02:	464b      	mov	r3, r9
 8004d04:	eb4b 0303 	adc.w	r3, fp, r3
 8004d08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d20:	460b      	mov	r3, r1
 8004d22:	18db      	adds	r3, r3, r3
 8004d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d26:	4613      	mov	r3, r2
 8004d28:	eb42 0303 	adc.w	r3, r2, r3
 8004d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d36:	f7fb fac3 	bl	80002c0 <__aeabi_uldivmod>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	4b3b      	ldr	r3, [pc, #236]	@ (8004e30 <UART_SetConfig+0x2d4>)
 8004d42:	fba3 2301 	umull	r2, r3, r3, r1
 8004d46:	095b      	lsrs	r3, r3, #5
 8004d48:	2264      	movs	r2, #100	@ 0x64
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	1acb      	subs	r3, r1, r3
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d56:	4b36      	ldr	r3, [pc, #216]	@ (8004e30 <UART_SetConfig+0x2d4>)
 8004d58:	fba3 2302 	umull	r2, r3, r3, r2
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d64:	441c      	add	r4, r3
 8004d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	1891      	adds	r1, r2, r2
 8004d7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d80:	415b      	adcs	r3, r3
 8004d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d88:	4641      	mov	r1, r8
 8004d8a:	1851      	adds	r1, r2, r1
 8004d8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d8e:	4649      	mov	r1, r9
 8004d90:	414b      	adcs	r3, r1
 8004d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004da0:	4659      	mov	r1, fp
 8004da2:	00cb      	lsls	r3, r1, #3
 8004da4:	4651      	mov	r1, sl
 8004da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004daa:	4651      	mov	r1, sl
 8004dac:	00ca      	lsls	r2, r1, #3
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	4603      	mov	r3, r0
 8004db4:	4642      	mov	r2, r8
 8004db6:	189b      	adds	r3, r3, r2
 8004db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	460a      	mov	r2, r1
 8004dc0:	eb42 0303 	adc.w	r3, r2, r3
 8004dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ddc:	460b      	mov	r3, r1
 8004dde:	18db      	adds	r3, r3, r3
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de2:	4613      	mov	r3, r2
 8004de4:	eb42 0303 	adc.w	r3, r2, r3
 8004de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004df2:	f7fb fa65 	bl	80002c0 <__aeabi_uldivmod>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8004e30 <UART_SetConfig+0x2d4>)
 8004dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	2164      	movs	r1, #100	@ 0x64
 8004e04:	fb01 f303 	mul.w	r3, r1, r3
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	3332      	adds	r3, #50	@ 0x32
 8004e0e:	4a08      	ldr	r2, [pc, #32]	@ (8004e30 <UART_SetConfig+0x2d4>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	095b      	lsrs	r3, r3, #5
 8004e16:	f003 0207 	and.w	r2, r3, #7
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4422      	add	r2, r4
 8004e22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e24:	e106      	b.n	8005034 <UART_SetConfig+0x4d8>
 8004e26:	bf00      	nop
 8004e28:	40011000 	.word	0x40011000
 8004e2c:	40011400 	.word	0x40011400
 8004e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e46:	4642      	mov	r2, r8
 8004e48:	464b      	mov	r3, r9
 8004e4a:	1891      	adds	r1, r2, r2
 8004e4c:	6239      	str	r1, [r7, #32]
 8004e4e:	415b      	adcs	r3, r3
 8004e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e56:	4641      	mov	r1, r8
 8004e58:	1854      	adds	r4, r2, r1
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	eb43 0501 	adc.w	r5, r3, r1
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	00eb      	lsls	r3, r5, #3
 8004e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e6e:	00e2      	lsls	r2, r4, #3
 8004e70:	4614      	mov	r4, r2
 8004e72:	461d      	mov	r5, r3
 8004e74:	4643      	mov	r3, r8
 8004e76:	18e3      	adds	r3, r4, r3
 8004e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e7c:	464b      	mov	r3, r9
 8004e7e:	eb45 0303 	adc.w	r3, r5, r3
 8004e82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	008b      	lsls	r3, r1, #2
 8004ea6:	4621      	mov	r1, r4
 8004ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eac:	4621      	mov	r1, r4
 8004eae:	008a      	lsls	r2, r1, #2
 8004eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004eb4:	f7fb fa04 	bl	80002c0 <__aeabi_uldivmod>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4b60      	ldr	r3, [pc, #384]	@ (8005040 <UART_SetConfig+0x4e4>)
 8004ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	011c      	lsls	r4, r3, #4
 8004ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ed0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ed8:	4642      	mov	r2, r8
 8004eda:	464b      	mov	r3, r9
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	61b9      	str	r1, [r7, #24]
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	61fb      	str	r3, [r7, #28]
 8004ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee8:	4641      	mov	r1, r8
 8004eea:	1851      	adds	r1, r2, r1
 8004eec:	6139      	str	r1, [r7, #16]
 8004eee:	4649      	mov	r1, r9
 8004ef0:	414b      	adcs	r3, r1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f00:	4659      	mov	r1, fp
 8004f02:	00cb      	lsls	r3, r1, #3
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	00ca      	lsls	r2, r1, #3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	4619      	mov	r1, r3
 8004f12:	4603      	mov	r3, r0
 8004f14:	4642      	mov	r2, r8
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	460a      	mov	r2, r1
 8004f20:	eb42 0303 	adc.w	r3, r2, r3
 8004f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f40:	4649      	mov	r1, r9
 8004f42:	008b      	lsls	r3, r1, #2
 8004f44:	4641      	mov	r1, r8
 8004f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f4a:	4641      	mov	r1, r8
 8004f4c:	008a      	lsls	r2, r1, #2
 8004f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f52:	f7fb f9b5 	bl	80002c0 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4611      	mov	r1, r2
 8004f5c:	4b38      	ldr	r3, [pc, #224]	@ (8005040 <UART_SetConfig+0x4e4>)
 8004f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	2264      	movs	r2, #100	@ 0x64
 8004f66:	fb02 f303 	mul.w	r3, r2, r3
 8004f6a:	1acb      	subs	r3, r1, r3
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	3332      	adds	r3, #50	@ 0x32
 8004f70:	4a33      	ldr	r2, [pc, #204]	@ (8005040 <UART_SetConfig+0x4e4>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f7c:	441c      	add	r4, r3
 8004f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f82:	2200      	movs	r2, #0
 8004f84:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f86:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	1891      	adds	r1, r2, r2
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	415b      	adcs	r3, r3
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	1851      	adds	r1, r2, r1
 8004fa0:	6039      	str	r1, [r7, #0]
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	414b      	adcs	r3, r1
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	00cb      	lsls	r3, r1, #3
 8004fb8:	4651      	mov	r1, sl
 8004fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fbe:	4651      	mov	r1, sl
 8004fc0:	00ca      	lsls	r2, r1, #3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4642      	mov	r2, r8
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fce:	464b      	mov	r3, r9
 8004fd0:	460a      	mov	r2, r1
 8004fd2:	eb42 0303 	adc.w	r3, r2, r3
 8004fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fe2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ff0:	4649      	mov	r1, r9
 8004ff2:	008b      	lsls	r3, r1, #2
 8004ff4:	4641      	mov	r1, r8
 8004ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	008a      	lsls	r2, r1, #2
 8004ffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005002:	f7fb f95d 	bl	80002c0 <__aeabi_uldivmod>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4b0d      	ldr	r3, [pc, #52]	@ (8005040 <UART_SetConfig+0x4e4>)
 800500c:	fba3 1302 	umull	r1, r3, r3, r2
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	2164      	movs	r1, #100	@ 0x64
 8005014:	fb01 f303 	mul.w	r3, r1, r3
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	3332      	adds	r3, #50	@ 0x32
 800501e:	4a08      	ldr	r2, [pc, #32]	@ (8005040 <UART_SetConfig+0x4e4>)
 8005020:	fba2 2303 	umull	r2, r3, r2, r3
 8005024:	095b      	lsrs	r3, r3, #5
 8005026:	f003 020f 	and.w	r2, r3, #15
 800502a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4422      	add	r2, r4
 8005032:	609a      	str	r2, [r3, #8]
}
 8005034:	bf00      	nop
 8005036:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800503a:	46bd      	mov	sp, r7
 800503c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005040:	51eb851f 	.word	0x51eb851f

08005044 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005044:	b084      	sub	sp, #16
 8005046:	b580      	push	{r7, lr}
 8005048:	b084      	sub	sp, #16
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	f107 001c 	add.w	r0, r7, #28
 8005052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005056:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800505a:	2b01      	cmp	r3, #1
 800505c:	d123      	bne.n	80050a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005062:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005086:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800508a:	2b01      	cmp	r3, #1
 800508c:	d105      	bne.n	800509a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa9a 	bl	80055d4 <USB_CoreReset>
 80050a0:	4603      	mov	r3, r0
 80050a2:	73fb      	strb	r3, [r7, #15]
 80050a4:	e01b      	b.n	80050de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fa8e 	bl	80055d4 <USB_CoreReset>
 80050b8:	4603      	mov	r3, r0
 80050ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80050d0:	e005      	b.n	80050de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050de:	7fbb      	ldrb	r3, [r7, #30]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d10b      	bne.n	80050fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f043 0206 	orr.w	r2, r3, #6
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005108:	b004      	add	sp, #16
 800510a:	4770      	bx	lr

0800510c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f023 0201 	bic.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	460b      	mov	r3, r1
 8005138:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800514a:	78fb      	ldrb	r3, [r7, #3]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d115      	bne.n	800517c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800515c:	200a      	movs	r0, #10
 800515e:	f7fc fa29 	bl	80015b4 <HAL_Delay>
      ms += 10U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	330a      	adds	r3, #10
 8005166:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 fa25 	bl	80055b8 <USB_GetMode>
 800516e:	4603      	mov	r3, r0
 8005170:	2b01      	cmp	r3, #1
 8005172:	d01e      	beq.n	80051b2 <USB_SetCurrentMode+0x84>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2bc7      	cmp	r3, #199	@ 0xc7
 8005178:	d9f0      	bls.n	800515c <USB_SetCurrentMode+0x2e>
 800517a:	e01a      	b.n	80051b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d115      	bne.n	80051ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800518e:	200a      	movs	r0, #10
 8005190:	f7fc fa10 	bl	80015b4 <HAL_Delay>
      ms += 10U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	330a      	adds	r3, #10
 8005198:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fa0c 	bl	80055b8 <USB_GetMode>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d005      	beq.n	80051b2 <USB_SetCurrentMode+0x84>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80051aa:	d9f0      	bls.n	800518e <USB_SetCurrentMode+0x60>
 80051ac:	e001      	b.n	80051b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e005      	b.n	80051be <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2bc8      	cmp	r3, #200	@ 0xc8
 80051b6:	d101      	bne.n	80051bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e000      	b.n	80051be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3710      	adds	r7, #16
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051c8:	b084      	sub	sp, #16
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80051d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	e009      	b.n	80051fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	3340      	adds	r3, #64	@ 0x40
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	3301      	adds	r3, #1
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	2b0e      	cmp	r3, #14
 8005200:	d9f2      	bls.n	80051e8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005202:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005206:	2b00      	cmp	r3, #0
 8005208:	d11c      	bne.n	8005244 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005218:	f043 0302 	orr.w	r3, r3, #2
 800521c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e005      	b.n	8005250 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005248:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005256:	461a      	mov	r2, r3
 8005258:	2300      	movs	r3, #0
 800525a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800525c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005260:	2b01      	cmp	r3, #1
 8005262:	d10d      	bne.n	8005280 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800526c:	2100      	movs	r1, #0
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f968 	bl	8005544 <USB_SetDevSpeed>
 8005274:	e008      	b.n	8005288 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005276:	2101      	movs	r1, #1
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f963 	bl	8005544 <USB_SetDevSpeed>
 800527e:	e003      	b.n	8005288 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005280:	2103      	movs	r1, #3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f95e 	bl	8005544 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005288:	2110      	movs	r1, #16
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f8fa 	bl	8005484 <USB_FlushTxFifo>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 f924 	bl	80054e8 <USB_FlushRxFifo>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b0:	461a      	mov	r2, r3
 80052b2:	2300      	movs	r3, #0
 80052b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052bc:	461a      	mov	r2, r3
 80052be:	2300      	movs	r3, #0
 80052c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c8:	461a      	mov	r2, r3
 80052ca:	2300      	movs	r3, #0
 80052cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	e043      	b.n	800535c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ea:	d118      	bne.n	800531e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052fe:	461a      	mov	r2, r3
 8005300:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	e013      	b.n	8005330 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005314:	461a      	mov	r2, r3
 8005316:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	e008      	b.n	8005330 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800532a:	461a      	mov	r2, r3
 800532c:	2300      	movs	r3, #0
 800532e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533c:	461a      	mov	r2, r3
 800533e:	2300      	movs	r3, #0
 8005340:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534e:	461a      	mov	r2, r3
 8005350:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	3301      	adds	r3, #1
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005360:	461a      	mov	r2, r3
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4293      	cmp	r3, r2
 8005366:	d3b5      	bcc.n	80052d4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005368:	2300      	movs	r3, #0
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	e043      	b.n	80053f6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005384:	d118      	bne.n	80053b8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005398:	461a      	mov	r2, r3
 800539a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e013      	b.n	80053ca <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ae:	461a      	mov	r2, r3
 80053b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e008      	b.n	80053ca <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053c4:	461a      	mov	r2, r3
 80053c6:	2300      	movs	r3, #0
 80053c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053d6:	461a      	mov	r2, r3
 80053d8:	2300      	movs	r3, #0
 80053da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e8:	461a      	mov	r2, r3
 80053ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	3301      	adds	r3, #1
 80053f4:	613b      	str	r3, [r7, #16]
 80053f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053fa:	461a      	mov	r2, r3
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4293      	cmp	r3, r2
 8005400:	d3b5      	bcc.n	800536e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005414:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005422:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005428:	2b00      	cmp	r3, #0
 800542a:	d105      	bne.n	8005438 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f043 0210 	orr.w	r2, r3, #16
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	699a      	ldr	r2, [r3, #24]
 800543c:	4b10      	ldr	r3, [pc, #64]	@ (8005480 <USB_DevInit+0x2b8>)
 800543e:	4313      	orrs	r3, r2
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005444:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	f043 0208 	orr.w	r2, r3, #8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005458:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800545c:	2b01      	cmp	r3, #1
 800545e:	d107      	bne.n	8005470 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	699b      	ldr	r3, [r3, #24]
 8005464:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005468:	f043 0304 	orr.w	r3, r3, #4
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005470:	7dfb      	ldrb	r3, [r7, #23]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800547c:	b004      	add	sp, #16
 800547e:	4770      	bx	lr
 8005480:	803c3800 	.word	0x803c3800

08005484 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3301      	adds	r3, #1
 8005496:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800549e:	d901      	bls.n	80054a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e01b      	b.n	80054dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	daf2      	bge.n	8005492 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	019b      	lsls	r3, r3, #6
 80054b4:	f043 0220 	orr.w	r2, r3, #32
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054c8:	d901      	bls.n	80054ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e006      	b.n	80054dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d0f0      	beq.n	80054bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3301      	adds	r3, #1
 80054f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005500:	d901      	bls.n	8005506 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e018      	b.n	8005538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	daf2      	bge.n	80054f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2210      	movs	r2, #16
 8005516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3301      	adds	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005524:	d901      	bls.n	800552a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e006      	b.n	8005538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b10      	cmp	r3, #16
 8005534:	d0f0      	beq.n	8005518 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	460b      	mov	r3, r1
 800554e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005564:	4313      	orrs	r3, r2
 8005566:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005590:	f023 0303 	bic.w	r3, r3, #3
 8005594:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3714      	adds	r7, #20
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	f003 0301 	and.w	r3, r3, #1
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3301      	adds	r3, #1
 80055e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055ec:	d901      	bls.n	80055f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e022      	b.n	8005638 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	daf2      	bge.n	80055e0 <USB_CoreReset+0xc>

  count = 10U;
 80055fa:	230a      	movs	r3, #10
 80055fc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80055fe:	e002      	b.n	8005606 <USB_CoreReset+0x32>
  {
    count--;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3b01      	subs	r3, #1
 8005604:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1f9      	bne.n	8005600 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f043 0201 	orr.w	r2, r3, #1
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3301      	adds	r3, #1
 800561c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005624:	d901      	bls.n	800562a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e006      	b.n	8005638 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d0f0      	beq.n	8005618 <USB_CoreReset+0x44>

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <std>:
 8005644:	2300      	movs	r3, #0
 8005646:	b510      	push	{r4, lr}
 8005648:	4604      	mov	r4, r0
 800564a:	e9c0 3300 	strd	r3, r3, [r0]
 800564e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005652:	6083      	str	r3, [r0, #8]
 8005654:	8181      	strh	r1, [r0, #12]
 8005656:	6643      	str	r3, [r0, #100]	@ 0x64
 8005658:	81c2      	strh	r2, [r0, #14]
 800565a:	6183      	str	r3, [r0, #24]
 800565c:	4619      	mov	r1, r3
 800565e:	2208      	movs	r2, #8
 8005660:	305c      	adds	r0, #92	@ 0x5c
 8005662:	f000 fa51 	bl	8005b08 <memset>
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <std+0x58>)
 8005668:	6263      	str	r3, [r4, #36]	@ 0x24
 800566a:	4b0d      	ldr	r3, [pc, #52]	@ (80056a0 <std+0x5c>)
 800566c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800566e:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <std+0x60>)
 8005670:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005672:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <std+0x64>)
 8005674:	6323      	str	r3, [r4, #48]	@ 0x30
 8005676:	4b0d      	ldr	r3, [pc, #52]	@ (80056ac <std+0x68>)
 8005678:	6224      	str	r4, [r4, #32]
 800567a:	429c      	cmp	r4, r3
 800567c:	d006      	beq.n	800568c <std+0x48>
 800567e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005682:	4294      	cmp	r4, r2
 8005684:	d002      	beq.n	800568c <std+0x48>
 8005686:	33d0      	adds	r3, #208	@ 0xd0
 8005688:	429c      	cmp	r4, r3
 800568a:	d105      	bne.n	8005698 <std+0x54>
 800568c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005694:	f000 bab0 	b.w	8005bf8 <__retarget_lock_init_recursive>
 8005698:	bd10      	pop	{r4, pc}
 800569a:	bf00      	nop
 800569c:	08005959 	.word	0x08005959
 80056a0:	0800597b 	.word	0x0800597b
 80056a4:	080059b3 	.word	0x080059b3
 80056a8:	080059d7 	.word	0x080059d7
 80056ac:	20001394 	.word	0x20001394

080056b0 <stdio_exit_handler>:
 80056b0:	4a02      	ldr	r2, [pc, #8]	@ (80056bc <stdio_exit_handler+0xc>)
 80056b2:	4903      	ldr	r1, [pc, #12]	@ (80056c0 <stdio_exit_handler+0x10>)
 80056b4:	4803      	ldr	r0, [pc, #12]	@ (80056c4 <stdio_exit_handler+0x14>)
 80056b6:	f000 b869 	b.w	800578c <_fwalk_sglue>
 80056ba:	bf00      	nop
 80056bc:	2000000c 	.word	0x2000000c
 80056c0:	08006761 	.word	0x08006761
 80056c4:	2000001c 	.word	0x2000001c

080056c8 <cleanup_stdio>:
 80056c8:	6841      	ldr	r1, [r0, #4]
 80056ca:	4b0c      	ldr	r3, [pc, #48]	@ (80056fc <cleanup_stdio+0x34>)
 80056cc:	4299      	cmp	r1, r3
 80056ce:	b510      	push	{r4, lr}
 80056d0:	4604      	mov	r4, r0
 80056d2:	d001      	beq.n	80056d8 <cleanup_stdio+0x10>
 80056d4:	f001 f844 	bl	8006760 <_fflush_r>
 80056d8:	68a1      	ldr	r1, [r4, #8]
 80056da:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <cleanup_stdio+0x38>)
 80056dc:	4299      	cmp	r1, r3
 80056de:	d002      	beq.n	80056e6 <cleanup_stdio+0x1e>
 80056e0:	4620      	mov	r0, r4
 80056e2:	f001 f83d 	bl	8006760 <_fflush_r>
 80056e6:	68e1      	ldr	r1, [r4, #12]
 80056e8:	4b06      	ldr	r3, [pc, #24]	@ (8005704 <cleanup_stdio+0x3c>)
 80056ea:	4299      	cmp	r1, r3
 80056ec:	d004      	beq.n	80056f8 <cleanup_stdio+0x30>
 80056ee:	4620      	mov	r0, r4
 80056f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f4:	f001 b834 	b.w	8006760 <_fflush_r>
 80056f8:	bd10      	pop	{r4, pc}
 80056fa:	bf00      	nop
 80056fc:	20001394 	.word	0x20001394
 8005700:	200013fc 	.word	0x200013fc
 8005704:	20001464 	.word	0x20001464

08005708 <global_stdio_init.part.0>:
 8005708:	b510      	push	{r4, lr}
 800570a:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <global_stdio_init.part.0+0x30>)
 800570c:	4c0b      	ldr	r4, [pc, #44]	@ (800573c <global_stdio_init.part.0+0x34>)
 800570e:	4a0c      	ldr	r2, [pc, #48]	@ (8005740 <global_stdio_init.part.0+0x38>)
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	4620      	mov	r0, r4
 8005714:	2200      	movs	r2, #0
 8005716:	2104      	movs	r1, #4
 8005718:	f7ff ff94 	bl	8005644 <std>
 800571c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005720:	2201      	movs	r2, #1
 8005722:	2109      	movs	r1, #9
 8005724:	f7ff ff8e 	bl	8005644 <std>
 8005728:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800572c:	2202      	movs	r2, #2
 800572e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005732:	2112      	movs	r1, #18
 8005734:	f7ff bf86 	b.w	8005644 <std>
 8005738:	200014cc 	.word	0x200014cc
 800573c:	20001394 	.word	0x20001394
 8005740:	080056b1 	.word	0x080056b1

08005744 <__sfp_lock_acquire>:
 8005744:	4801      	ldr	r0, [pc, #4]	@ (800574c <__sfp_lock_acquire+0x8>)
 8005746:	f000 ba58 	b.w	8005bfa <__retarget_lock_acquire_recursive>
 800574a:	bf00      	nop
 800574c:	200014d5 	.word	0x200014d5

08005750 <__sfp_lock_release>:
 8005750:	4801      	ldr	r0, [pc, #4]	@ (8005758 <__sfp_lock_release+0x8>)
 8005752:	f000 ba53 	b.w	8005bfc <__retarget_lock_release_recursive>
 8005756:	bf00      	nop
 8005758:	200014d5 	.word	0x200014d5

0800575c <__sinit>:
 800575c:	b510      	push	{r4, lr}
 800575e:	4604      	mov	r4, r0
 8005760:	f7ff fff0 	bl	8005744 <__sfp_lock_acquire>
 8005764:	6a23      	ldr	r3, [r4, #32]
 8005766:	b11b      	cbz	r3, 8005770 <__sinit+0x14>
 8005768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800576c:	f7ff bff0 	b.w	8005750 <__sfp_lock_release>
 8005770:	4b04      	ldr	r3, [pc, #16]	@ (8005784 <__sinit+0x28>)
 8005772:	6223      	str	r3, [r4, #32]
 8005774:	4b04      	ldr	r3, [pc, #16]	@ (8005788 <__sinit+0x2c>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f5      	bne.n	8005768 <__sinit+0xc>
 800577c:	f7ff ffc4 	bl	8005708 <global_stdio_init.part.0>
 8005780:	e7f2      	b.n	8005768 <__sinit+0xc>
 8005782:	bf00      	nop
 8005784:	080056c9 	.word	0x080056c9
 8005788:	200014cc 	.word	0x200014cc

0800578c <_fwalk_sglue>:
 800578c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005790:	4607      	mov	r7, r0
 8005792:	4688      	mov	r8, r1
 8005794:	4614      	mov	r4, r2
 8005796:	2600      	movs	r6, #0
 8005798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800579c:	f1b9 0901 	subs.w	r9, r9, #1
 80057a0:	d505      	bpl.n	80057ae <_fwalk_sglue+0x22>
 80057a2:	6824      	ldr	r4, [r4, #0]
 80057a4:	2c00      	cmp	r4, #0
 80057a6:	d1f7      	bne.n	8005798 <_fwalk_sglue+0xc>
 80057a8:	4630      	mov	r0, r6
 80057aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ae:	89ab      	ldrh	r3, [r5, #12]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d907      	bls.n	80057c4 <_fwalk_sglue+0x38>
 80057b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057b8:	3301      	adds	r3, #1
 80057ba:	d003      	beq.n	80057c4 <_fwalk_sglue+0x38>
 80057bc:	4629      	mov	r1, r5
 80057be:	4638      	mov	r0, r7
 80057c0:	47c0      	blx	r8
 80057c2:	4306      	orrs	r6, r0
 80057c4:	3568      	adds	r5, #104	@ 0x68
 80057c6:	e7e9      	b.n	800579c <_fwalk_sglue+0x10>

080057c8 <iprintf>:
 80057c8:	b40f      	push	{r0, r1, r2, r3}
 80057ca:	b507      	push	{r0, r1, r2, lr}
 80057cc:	4906      	ldr	r1, [pc, #24]	@ (80057e8 <iprintf+0x20>)
 80057ce:	ab04      	add	r3, sp, #16
 80057d0:	6808      	ldr	r0, [r1, #0]
 80057d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80057d6:	6881      	ldr	r1, [r0, #8]
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	f000 fc99 	bl	8006110 <_vfiprintf_r>
 80057de:	b003      	add	sp, #12
 80057e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057e4:	b004      	add	sp, #16
 80057e6:	4770      	bx	lr
 80057e8:	20000018 	.word	0x20000018

080057ec <_puts_r>:
 80057ec:	6a03      	ldr	r3, [r0, #32]
 80057ee:	b570      	push	{r4, r5, r6, lr}
 80057f0:	6884      	ldr	r4, [r0, #8]
 80057f2:	4605      	mov	r5, r0
 80057f4:	460e      	mov	r6, r1
 80057f6:	b90b      	cbnz	r3, 80057fc <_puts_r+0x10>
 80057f8:	f7ff ffb0 	bl	800575c <__sinit>
 80057fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057fe:	07db      	lsls	r3, r3, #31
 8005800:	d405      	bmi.n	800580e <_puts_r+0x22>
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	0598      	lsls	r0, r3, #22
 8005806:	d402      	bmi.n	800580e <_puts_r+0x22>
 8005808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800580a:	f000 f9f6 	bl	8005bfa <__retarget_lock_acquire_recursive>
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	0719      	lsls	r1, r3, #28
 8005812:	d502      	bpl.n	800581a <_puts_r+0x2e>
 8005814:	6923      	ldr	r3, [r4, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d135      	bne.n	8005886 <_puts_r+0x9a>
 800581a:	4621      	mov	r1, r4
 800581c:	4628      	mov	r0, r5
 800581e:	f000 f91d 	bl	8005a5c <__swsetup_r>
 8005822:	b380      	cbz	r0, 8005886 <_puts_r+0x9a>
 8005824:	f04f 35ff 	mov.w	r5, #4294967295
 8005828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800582a:	07da      	lsls	r2, r3, #31
 800582c:	d405      	bmi.n	800583a <_puts_r+0x4e>
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	059b      	lsls	r3, r3, #22
 8005832:	d402      	bmi.n	800583a <_puts_r+0x4e>
 8005834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005836:	f000 f9e1 	bl	8005bfc <__retarget_lock_release_recursive>
 800583a:	4628      	mov	r0, r5
 800583c:	bd70      	pop	{r4, r5, r6, pc}
 800583e:	2b00      	cmp	r3, #0
 8005840:	da04      	bge.n	800584c <_puts_r+0x60>
 8005842:	69a2      	ldr	r2, [r4, #24]
 8005844:	429a      	cmp	r2, r3
 8005846:	dc17      	bgt.n	8005878 <_puts_r+0x8c>
 8005848:	290a      	cmp	r1, #10
 800584a:	d015      	beq.n	8005878 <_puts_r+0x8c>
 800584c:	6823      	ldr	r3, [r4, #0]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	6022      	str	r2, [r4, #0]
 8005852:	7019      	strb	r1, [r3, #0]
 8005854:	68a3      	ldr	r3, [r4, #8]
 8005856:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800585a:	3b01      	subs	r3, #1
 800585c:	60a3      	str	r3, [r4, #8]
 800585e:	2900      	cmp	r1, #0
 8005860:	d1ed      	bne.n	800583e <_puts_r+0x52>
 8005862:	2b00      	cmp	r3, #0
 8005864:	da11      	bge.n	800588a <_puts_r+0x9e>
 8005866:	4622      	mov	r2, r4
 8005868:	210a      	movs	r1, #10
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f8b7 	bl	80059de <__swbuf_r>
 8005870:	3001      	adds	r0, #1
 8005872:	d0d7      	beq.n	8005824 <_puts_r+0x38>
 8005874:	250a      	movs	r5, #10
 8005876:	e7d7      	b.n	8005828 <_puts_r+0x3c>
 8005878:	4622      	mov	r2, r4
 800587a:	4628      	mov	r0, r5
 800587c:	f000 f8af 	bl	80059de <__swbuf_r>
 8005880:	3001      	adds	r0, #1
 8005882:	d1e7      	bne.n	8005854 <_puts_r+0x68>
 8005884:	e7ce      	b.n	8005824 <_puts_r+0x38>
 8005886:	3e01      	subs	r6, #1
 8005888:	e7e4      	b.n	8005854 <_puts_r+0x68>
 800588a:	6823      	ldr	r3, [r4, #0]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	6022      	str	r2, [r4, #0]
 8005890:	220a      	movs	r2, #10
 8005892:	701a      	strb	r2, [r3, #0]
 8005894:	e7ee      	b.n	8005874 <_puts_r+0x88>
	...

08005898 <puts>:
 8005898:	4b02      	ldr	r3, [pc, #8]	@ (80058a4 <puts+0xc>)
 800589a:	4601      	mov	r1, r0
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	f7ff bfa5 	b.w	80057ec <_puts_r>
 80058a2:	bf00      	nop
 80058a4:	20000018 	.word	0x20000018

080058a8 <sniprintf>:
 80058a8:	b40c      	push	{r2, r3}
 80058aa:	b530      	push	{r4, r5, lr}
 80058ac:	4b18      	ldr	r3, [pc, #96]	@ (8005910 <sniprintf+0x68>)
 80058ae:	1e0c      	subs	r4, r1, #0
 80058b0:	681d      	ldr	r5, [r3, #0]
 80058b2:	b09d      	sub	sp, #116	@ 0x74
 80058b4:	da08      	bge.n	80058c8 <sniprintf+0x20>
 80058b6:	238b      	movs	r3, #139	@ 0x8b
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	f04f 30ff 	mov.w	r0, #4294967295
 80058be:	b01d      	add	sp, #116	@ 0x74
 80058c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058c4:	b002      	add	sp, #8
 80058c6:	4770      	bx	lr
 80058c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80058cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80058d6:	bf14      	ite	ne
 80058d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058dc:	4623      	moveq	r3, r4
 80058de:	9304      	str	r3, [sp, #16]
 80058e0:	9307      	str	r3, [sp, #28]
 80058e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80058e6:	9002      	str	r0, [sp, #8]
 80058e8:	9006      	str	r0, [sp, #24]
 80058ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80058f0:	ab21      	add	r3, sp, #132	@ 0x84
 80058f2:	a902      	add	r1, sp, #8
 80058f4:	4628      	mov	r0, r5
 80058f6:	9301      	str	r3, [sp, #4]
 80058f8:	f000 fae4 	bl	8005ec4 <_svfiprintf_r>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	bfbc      	itt	lt
 8005900:	238b      	movlt	r3, #139	@ 0x8b
 8005902:	602b      	strlt	r3, [r5, #0]
 8005904:	2c00      	cmp	r4, #0
 8005906:	d0da      	beq.n	80058be <sniprintf+0x16>
 8005908:	9b02      	ldr	r3, [sp, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e7d6      	b.n	80058be <sniprintf+0x16>
 8005910:	20000018 	.word	0x20000018

08005914 <siprintf>:
 8005914:	b40e      	push	{r1, r2, r3}
 8005916:	b510      	push	{r4, lr}
 8005918:	b09d      	sub	sp, #116	@ 0x74
 800591a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800591c:	9002      	str	r0, [sp, #8]
 800591e:	9006      	str	r0, [sp, #24]
 8005920:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005924:	480a      	ldr	r0, [pc, #40]	@ (8005950 <siprintf+0x3c>)
 8005926:	9107      	str	r1, [sp, #28]
 8005928:	9104      	str	r1, [sp, #16]
 800592a:	490a      	ldr	r1, [pc, #40]	@ (8005954 <siprintf+0x40>)
 800592c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005930:	9105      	str	r1, [sp, #20]
 8005932:	2400      	movs	r4, #0
 8005934:	a902      	add	r1, sp, #8
 8005936:	6800      	ldr	r0, [r0, #0]
 8005938:	9301      	str	r3, [sp, #4]
 800593a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800593c:	f000 fac2 	bl	8005ec4 <_svfiprintf_r>
 8005940:	9b02      	ldr	r3, [sp, #8]
 8005942:	701c      	strb	r4, [r3, #0]
 8005944:	b01d      	add	sp, #116	@ 0x74
 8005946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800594a:	b003      	add	sp, #12
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000018 	.word	0x20000018
 8005954:	ffff0208 	.word	0xffff0208

08005958 <__sread>:
 8005958:	b510      	push	{r4, lr}
 800595a:	460c      	mov	r4, r1
 800595c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005960:	f000 f8fc 	bl	8005b5c <_read_r>
 8005964:	2800      	cmp	r0, #0
 8005966:	bfab      	itete	ge
 8005968:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800596a:	89a3      	ldrhlt	r3, [r4, #12]
 800596c:	181b      	addge	r3, r3, r0
 800596e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005972:	bfac      	ite	ge
 8005974:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005976:	81a3      	strhlt	r3, [r4, #12]
 8005978:	bd10      	pop	{r4, pc}

0800597a <__swrite>:
 800597a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800597e:	461f      	mov	r7, r3
 8005980:	898b      	ldrh	r3, [r1, #12]
 8005982:	05db      	lsls	r3, r3, #23
 8005984:	4605      	mov	r5, r0
 8005986:	460c      	mov	r4, r1
 8005988:	4616      	mov	r6, r2
 800598a:	d505      	bpl.n	8005998 <__swrite+0x1e>
 800598c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005990:	2302      	movs	r3, #2
 8005992:	2200      	movs	r2, #0
 8005994:	f000 f8d0 	bl	8005b38 <_lseek_r>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800599e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	4632      	mov	r2, r6
 80059a6:	463b      	mov	r3, r7
 80059a8:	4628      	mov	r0, r5
 80059aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ae:	f000 b8e7 	b.w	8005b80 <_write_r>

080059b2 <__sseek>:
 80059b2:	b510      	push	{r4, lr}
 80059b4:	460c      	mov	r4, r1
 80059b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ba:	f000 f8bd 	bl	8005b38 <_lseek_r>
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	bf15      	itete	ne
 80059c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059ce:	81a3      	strheq	r3, [r4, #12]
 80059d0:	bf18      	it	ne
 80059d2:	81a3      	strhne	r3, [r4, #12]
 80059d4:	bd10      	pop	{r4, pc}

080059d6 <__sclose>:
 80059d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059da:	f000 b89d 	b.w	8005b18 <_close_r>

080059de <__swbuf_r>:
 80059de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e0:	460e      	mov	r6, r1
 80059e2:	4614      	mov	r4, r2
 80059e4:	4605      	mov	r5, r0
 80059e6:	b118      	cbz	r0, 80059f0 <__swbuf_r+0x12>
 80059e8:	6a03      	ldr	r3, [r0, #32]
 80059ea:	b90b      	cbnz	r3, 80059f0 <__swbuf_r+0x12>
 80059ec:	f7ff feb6 	bl	800575c <__sinit>
 80059f0:	69a3      	ldr	r3, [r4, #24]
 80059f2:	60a3      	str	r3, [r4, #8]
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	071a      	lsls	r2, r3, #28
 80059f8:	d501      	bpl.n	80059fe <__swbuf_r+0x20>
 80059fa:	6923      	ldr	r3, [r4, #16]
 80059fc:	b943      	cbnz	r3, 8005a10 <__swbuf_r+0x32>
 80059fe:	4621      	mov	r1, r4
 8005a00:	4628      	mov	r0, r5
 8005a02:	f000 f82b 	bl	8005a5c <__swsetup_r>
 8005a06:	b118      	cbz	r0, 8005a10 <__swbuf_r+0x32>
 8005a08:	f04f 37ff 	mov.w	r7, #4294967295
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	6922      	ldr	r2, [r4, #16]
 8005a14:	1a98      	subs	r0, r3, r2
 8005a16:	6963      	ldr	r3, [r4, #20]
 8005a18:	b2f6      	uxtb	r6, r6
 8005a1a:	4283      	cmp	r3, r0
 8005a1c:	4637      	mov	r7, r6
 8005a1e:	dc05      	bgt.n	8005a2c <__swbuf_r+0x4e>
 8005a20:	4621      	mov	r1, r4
 8005a22:	4628      	mov	r0, r5
 8005a24:	f000 fe9c 	bl	8006760 <_fflush_r>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d1ed      	bne.n	8005a08 <__swbuf_r+0x2a>
 8005a2c:	68a3      	ldr	r3, [r4, #8]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	6022      	str	r2, [r4, #0]
 8005a38:	701e      	strb	r6, [r3, #0]
 8005a3a:	6962      	ldr	r2, [r4, #20]
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d004      	beq.n	8005a4c <__swbuf_r+0x6e>
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	07db      	lsls	r3, r3, #31
 8005a46:	d5e1      	bpl.n	8005a0c <__swbuf_r+0x2e>
 8005a48:	2e0a      	cmp	r6, #10
 8005a4a:	d1df      	bne.n	8005a0c <__swbuf_r+0x2e>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 fe86 	bl	8006760 <_fflush_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d0d9      	beq.n	8005a0c <__swbuf_r+0x2e>
 8005a58:	e7d6      	b.n	8005a08 <__swbuf_r+0x2a>
	...

08005a5c <__swsetup_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4b29      	ldr	r3, [pc, #164]	@ (8005b04 <__swsetup_r+0xa8>)
 8005a60:	4605      	mov	r5, r0
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	460c      	mov	r4, r1
 8005a66:	b118      	cbz	r0, 8005a70 <__swsetup_r+0x14>
 8005a68:	6a03      	ldr	r3, [r0, #32]
 8005a6a:	b90b      	cbnz	r3, 8005a70 <__swsetup_r+0x14>
 8005a6c:	f7ff fe76 	bl	800575c <__sinit>
 8005a70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a74:	0719      	lsls	r1, r3, #28
 8005a76:	d422      	bmi.n	8005abe <__swsetup_r+0x62>
 8005a78:	06da      	lsls	r2, r3, #27
 8005a7a:	d407      	bmi.n	8005a8c <__swsetup_r+0x30>
 8005a7c:	2209      	movs	r2, #9
 8005a7e:	602a      	str	r2, [r5, #0]
 8005a80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a84:	81a3      	strh	r3, [r4, #12]
 8005a86:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8a:	e033      	b.n	8005af4 <__swsetup_r+0x98>
 8005a8c:	0758      	lsls	r0, r3, #29
 8005a8e:	d512      	bpl.n	8005ab6 <__swsetup_r+0x5a>
 8005a90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a92:	b141      	cbz	r1, 8005aa6 <__swsetup_r+0x4a>
 8005a94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a98:	4299      	cmp	r1, r3
 8005a9a:	d002      	beq.n	8005aa2 <__swsetup_r+0x46>
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 f8bd 	bl	8005c1c <_free_r>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005aa6:	89a3      	ldrh	r3, [r4, #12]
 8005aa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005aac:	81a3      	strh	r3, [r4, #12]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	6063      	str	r3, [r4, #4]
 8005ab2:	6923      	ldr	r3, [r4, #16]
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	f043 0308 	orr.w	r3, r3, #8
 8005abc:	81a3      	strh	r3, [r4, #12]
 8005abe:	6923      	ldr	r3, [r4, #16]
 8005ac0:	b94b      	cbnz	r3, 8005ad6 <__swsetup_r+0x7a>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005acc:	d003      	beq.n	8005ad6 <__swsetup_r+0x7a>
 8005ace:	4621      	mov	r1, r4
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	f000 fe93 	bl	80067fc <__smakebuf_r>
 8005ad6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ada:	f013 0201 	ands.w	r2, r3, #1
 8005ade:	d00a      	beq.n	8005af6 <__swsetup_r+0x9a>
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	60a2      	str	r2, [r4, #8]
 8005ae4:	6962      	ldr	r2, [r4, #20]
 8005ae6:	4252      	negs	r2, r2
 8005ae8:	61a2      	str	r2, [r4, #24]
 8005aea:	6922      	ldr	r2, [r4, #16]
 8005aec:	b942      	cbnz	r2, 8005b00 <__swsetup_r+0xa4>
 8005aee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005af2:	d1c5      	bne.n	8005a80 <__swsetup_r+0x24>
 8005af4:	bd38      	pop	{r3, r4, r5, pc}
 8005af6:	0799      	lsls	r1, r3, #30
 8005af8:	bf58      	it	pl
 8005afa:	6962      	ldrpl	r2, [r4, #20]
 8005afc:	60a2      	str	r2, [r4, #8]
 8005afe:	e7f4      	b.n	8005aea <__swsetup_r+0x8e>
 8005b00:	2000      	movs	r0, #0
 8005b02:	e7f7      	b.n	8005af4 <__swsetup_r+0x98>
 8005b04:	20000018 	.word	0x20000018

08005b08 <memset>:
 8005b08:	4402      	add	r2, r0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d100      	bne.n	8005b12 <memset+0xa>
 8005b10:	4770      	bx	lr
 8005b12:	f803 1b01 	strb.w	r1, [r3], #1
 8005b16:	e7f9      	b.n	8005b0c <memset+0x4>

08005b18 <_close_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	4d06      	ldr	r5, [pc, #24]	@ (8005b34 <_close_r+0x1c>)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4604      	mov	r4, r0
 8005b20:	4608      	mov	r0, r1
 8005b22:	602b      	str	r3, [r5, #0]
 8005b24:	f7fb fa51 	bl	8000fca <_close>
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d102      	bne.n	8005b32 <_close_r+0x1a>
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	b103      	cbz	r3, 8005b32 <_close_r+0x1a>
 8005b30:	6023      	str	r3, [r4, #0]
 8005b32:	bd38      	pop	{r3, r4, r5, pc}
 8005b34:	200014d0 	.word	0x200014d0

08005b38 <_lseek_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4d07      	ldr	r5, [pc, #28]	@ (8005b58 <_lseek_r+0x20>)
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	4608      	mov	r0, r1
 8005b40:	4611      	mov	r1, r2
 8005b42:	2200      	movs	r2, #0
 8005b44:	602a      	str	r2, [r5, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f7fb fa66 	bl	8001018 <_lseek>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_lseek_r+0x1e>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_lseek_r+0x1e>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	200014d0 	.word	0x200014d0

08005b5c <_read_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4d07      	ldr	r5, [pc, #28]	@ (8005b7c <_read_r+0x20>)
 8005b60:	4604      	mov	r4, r0
 8005b62:	4608      	mov	r0, r1
 8005b64:	4611      	mov	r1, r2
 8005b66:	2200      	movs	r2, #0
 8005b68:	602a      	str	r2, [r5, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f7fb fa10 	bl	8000f90 <_read>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_read_r+0x1e>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_read_r+0x1e>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	200014d0 	.word	0x200014d0

08005b80 <_write_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4d07      	ldr	r5, [pc, #28]	@ (8005ba0 <_write_r+0x20>)
 8005b84:	4604      	mov	r4, r0
 8005b86:	4608      	mov	r0, r1
 8005b88:	4611      	mov	r1, r2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	602a      	str	r2, [r5, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f7fa ffa6 	bl	8000ae0 <_write>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_write_r+0x1e>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_write_r+0x1e>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	200014d0 	.word	0x200014d0

08005ba4 <__errno>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	@ (8005bac <__errno+0x8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000018 	.word	0x20000018

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	4d0d      	ldr	r5, [pc, #52]	@ (8005be8 <__libc_init_array+0x38>)
 8005bb4:	4c0d      	ldr	r4, [pc, #52]	@ (8005bec <__libc_init_array+0x3c>)
 8005bb6:	1b64      	subs	r4, r4, r5
 8005bb8:	10a4      	asrs	r4, r4, #2
 8005bba:	2600      	movs	r6, #0
 8005bbc:	42a6      	cmp	r6, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	4d0b      	ldr	r5, [pc, #44]	@ (8005bf0 <__libc_init_array+0x40>)
 8005bc2:	4c0c      	ldr	r4, [pc, #48]	@ (8005bf4 <__libc_init_array+0x44>)
 8005bc4:	f000 fed8 	bl	8006978 <_init>
 8005bc8:	1b64      	subs	r4, r4, r5
 8005bca:	10a4      	asrs	r4, r4, #2
 8005bcc:	2600      	movs	r6, #0
 8005bce:	42a6      	cmp	r6, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd8:	4798      	blx	r3
 8005bda:	3601      	adds	r6, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8005be2:	4798      	blx	r3
 8005be4:	3601      	adds	r6, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	08006aa0 	.word	0x08006aa0
 8005bec:	08006aa0 	.word	0x08006aa0
 8005bf0:	08006aa0 	.word	0x08006aa0
 8005bf4:	08006aa4 	.word	0x08006aa4

08005bf8 <__retarget_lock_init_recursive>:
 8005bf8:	4770      	bx	lr

08005bfa <__retarget_lock_acquire_recursive>:
 8005bfa:	4770      	bx	lr

08005bfc <__retarget_lock_release_recursive>:
 8005bfc:	4770      	bx	lr

08005bfe <memcpy>:
 8005bfe:	440a      	add	r2, r1
 8005c00:	4291      	cmp	r1, r2
 8005c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c06:	d100      	bne.n	8005c0a <memcpy+0xc>
 8005c08:	4770      	bx	lr
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c14:	4291      	cmp	r1, r2
 8005c16:	d1f9      	bne.n	8005c0c <memcpy+0xe>
 8005c18:	bd10      	pop	{r4, pc}
	...

08005c1c <_free_r>:
 8005c1c:	b538      	push	{r3, r4, r5, lr}
 8005c1e:	4605      	mov	r5, r0
 8005c20:	2900      	cmp	r1, #0
 8005c22:	d041      	beq.n	8005ca8 <_free_r+0x8c>
 8005c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c28:	1f0c      	subs	r4, r1, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bfb8      	it	lt
 8005c2e:	18e4      	addlt	r4, r4, r3
 8005c30:	f000 f8e0 	bl	8005df4 <__malloc_lock>
 8005c34:	4a1d      	ldr	r2, [pc, #116]	@ (8005cac <_free_r+0x90>)
 8005c36:	6813      	ldr	r3, [r2, #0]
 8005c38:	b933      	cbnz	r3, 8005c48 <_free_r+0x2c>
 8005c3a:	6063      	str	r3, [r4, #4]
 8005c3c:	6014      	str	r4, [r2, #0]
 8005c3e:	4628      	mov	r0, r5
 8005c40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c44:	f000 b8dc 	b.w	8005e00 <__malloc_unlock>
 8005c48:	42a3      	cmp	r3, r4
 8005c4a:	d908      	bls.n	8005c5e <_free_r+0x42>
 8005c4c:	6820      	ldr	r0, [r4, #0]
 8005c4e:	1821      	adds	r1, r4, r0
 8005c50:	428b      	cmp	r3, r1
 8005c52:	bf01      	itttt	eq
 8005c54:	6819      	ldreq	r1, [r3, #0]
 8005c56:	685b      	ldreq	r3, [r3, #4]
 8005c58:	1809      	addeq	r1, r1, r0
 8005c5a:	6021      	streq	r1, [r4, #0]
 8005c5c:	e7ed      	b.n	8005c3a <_free_r+0x1e>
 8005c5e:	461a      	mov	r2, r3
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	b10b      	cbz	r3, 8005c68 <_free_r+0x4c>
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	d9fa      	bls.n	8005c5e <_free_r+0x42>
 8005c68:	6811      	ldr	r1, [r2, #0]
 8005c6a:	1850      	adds	r0, r2, r1
 8005c6c:	42a0      	cmp	r0, r4
 8005c6e:	d10b      	bne.n	8005c88 <_free_r+0x6c>
 8005c70:	6820      	ldr	r0, [r4, #0]
 8005c72:	4401      	add	r1, r0
 8005c74:	1850      	adds	r0, r2, r1
 8005c76:	4283      	cmp	r3, r0
 8005c78:	6011      	str	r1, [r2, #0]
 8005c7a:	d1e0      	bne.n	8005c3e <_free_r+0x22>
 8005c7c:	6818      	ldr	r0, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	6053      	str	r3, [r2, #4]
 8005c82:	4408      	add	r0, r1
 8005c84:	6010      	str	r0, [r2, #0]
 8005c86:	e7da      	b.n	8005c3e <_free_r+0x22>
 8005c88:	d902      	bls.n	8005c90 <_free_r+0x74>
 8005c8a:	230c      	movs	r3, #12
 8005c8c:	602b      	str	r3, [r5, #0]
 8005c8e:	e7d6      	b.n	8005c3e <_free_r+0x22>
 8005c90:	6820      	ldr	r0, [r4, #0]
 8005c92:	1821      	adds	r1, r4, r0
 8005c94:	428b      	cmp	r3, r1
 8005c96:	bf04      	itt	eq
 8005c98:	6819      	ldreq	r1, [r3, #0]
 8005c9a:	685b      	ldreq	r3, [r3, #4]
 8005c9c:	6063      	str	r3, [r4, #4]
 8005c9e:	bf04      	itt	eq
 8005ca0:	1809      	addeq	r1, r1, r0
 8005ca2:	6021      	streq	r1, [r4, #0]
 8005ca4:	6054      	str	r4, [r2, #4]
 8005ca6:	e7ca      	b.n	8005c3e <_free_r+0x22>
 8005ca8:	bd38      	pop	{r3, r4, r5, pc}
 8005caa:	bf00      	nop
 8005cac:	200014dc 	.word	0x200014dc

08005cb0 <sbrk_aligned>:
 8005cb0:	b570      	push	{r4, r5, r6, lr}
 8005cb2:	4e0f      	ldr	r6, [pc, #60]	@ (8005cf0 <sbrk_aligned+0x40>)
 8005cb4:	460c      	mov	r4, r1
 8005cb6:	6831      	ldr	r1, [r6, #0]
 8005cb8:	4605      	mov	r5, r0
 8005cba:	b911      	cbnz	r1, 8005cc2 <sbrk_aligned+0x12>
 8005cbc:	f000 fe16 	bl	80068ec <_sbrk_r>
 8005cc0:	6030      	str	r0, [r6, #0]
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	f000 fe11 	bl	80068ec <_sbrk_r>
 8005cca:	1c43      	adds	r3, r0, #1
 8005ccc:	d103      	bne.n	8005cd6 <sbrk_aligned+0x26>
 8005cce:	f04f 34ff 	mov.w	r4, #4294967295
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	bd70      	pop	{r4, r5, r6, pc}
 8005cd6:	1cc4      	adds	r4, r0, #3
 8005cd8:	f024 0403 	bic.w	r4, r4, #3
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d0f8      	beq.n	8005cd2 <sbrk_aligned+0x22>
 8005ce0:	1a21      	subs	r1, r4, r0
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fe02 	bl	80068ec <_sbrk_r>
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d1f2      	bne.n	8005cd2 <sbrk_aligned+0x22>
 8005cec:	e7ef      	b.n	8005cce <sbrk_aligned+0x1e>
 8005cee:	bf00      	nop
 8005cf0:	200014d8 	.word	0x200014d8

08005cf4 <_malloc_r>:
 8005cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf8:	1ccd      	adds	r5, r1, #3
 8005cfa:	f025 0503 	bic.w	r5, r5, #3
 8005cfe:	3508      	adds	r5, #8
 8005d00:	2d0c      	cmp	r5, #12
 8005d02:	bf38      	it	cc
 8005d04:	250c      	movcc	r5, #12
 8005d06:	2d00      	cmp	r5, #0
 8005d08:	4606      	mov	r6, r0
 8005d0a:	db01      	blt.n	8005d10 <_malloc_r+0x1c>
 8005d0c:	42a9      	cmp	r1, r5
 8005d0e:	d904      	bls.n	8005d1a <_malloc_r+0x26>
 8005d10:	230c      	movs	r3, #12
 8005d12:	6033      	str	r3, [r6, #0]
 8005d14:	2000      	movs	r0, #0
 8005d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005df0 <_malloc_r+0xfc>
 8005d1e:	f000 f869 	bl	8005df4 <__malloc_lock>
 8005d22:	f8d8 3000 	ldr.w	r3, [r8]
 8005d26:	461c      	mov	r4, r3
 8005d28:	bb44      	cbnz	r4, 8005d7c <_malloc_r+0x88>
 8005d2a:	4629      	mov	r1, r5
 8005d2c:	4630      	mov	r0, r6
 8005d2e:	f7ff ffbf 	bl	8005cb0 <sbrk_aligned>
 8005d32:	1c43      	adds	r3, r0, #1
 8005d34:	4604      	mov	r4, r0
 8005d36:	d158      	bne.n	8005dea <_malloc_r+0xf6>
 8005d38:	f8d8 4000 	ldr.w	r4, [r8]
 8005d3c:	4627      	mov	r7, r4
 8005d3e:	2f00      	cmp	r7, #0
 8005d40:	d143      	bne.n	8005dca <_malloc_r+0xd6>
 8005d42:	2c00      	cmp	r4, #0
 8005d44:	d04b      	beq.n	8005dde <_malloc_r+0xea>
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	4639      	mov	r1, r7
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	eb04 0903 	add.w	r9, r4, r3
 8005d50:	f000 fdcc 	bl	80068ec <_sbrk_r>
 8005d54:	4581      	cmp	r9, r0
 8005d56:	d142      	bne.n	8005dde <_malloc_r+0xea>
 8005d58:	6821      	ldr	r1, [r4, #0]
 8005d5a:	1a6d      	subs	r5, r5, r1
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	4630      	mov	r0, r6
 8005d60:	f7ff ffa6 	bl	8005cb0 <sbrk_aligned>
 8005d64:	3001      	adds	r0, #1
 8005d66:	d03a      	beq.n	8005dde <_malloc_r+0xea>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	442b      	add	r3, r5
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	bb62      	cbnz	r2, 8005dd0 <_malloc_r+0xdc>
 8005d76:	f8c8 7000 	str.w	r7, [r8]
 8005d7a:	e00f      	b.n	8005d9c <_malloc_r+0xa8>
 8005d7c:	6822      	ldr	r2, [r4, #0]
 8005d7e:	1b52      	subs	r2, r2, r5
 8005d80:	d420      	bmi.n	8005dc4 <_malloc_r+0xd0>
 8005d82:	2a0b      	cmp	r2, #11
 8005d84:	d917      	bls.n	8005db6 <_malloc_r+0xc2>
 8005d86:	1961      	adds	r1, r4, r5
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	6025      	str	r5, [r4, #0]
 8005d8c:	bf18      	it	ne
 8005d8e:	6059      	strne	r1, [r3, #4]
 8005d90:	6863      	ldr	r3, [r4, #4]
 8005d92:	bf08      	it	eq
 8005d94:	f8c8 1000 	streq.w	r1, [r8]
 8005d98:	5162      	str	r2, [r4, r5]
 8005d9a:	604b      	str	r3, [r1, #4]
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f000 f82f 	bl	8005e00 <__malloc_unlock>
 8005da2:	f104 000b 	add.w	r0, r4, #11
 8005da6:	1d23      	adds	r3, r4, #4
 8005da8:	f020 0007 	bic.w	r0, r0, #7
 8005dac:	1ac2      	subs	r2, r0, r3
 8005dae:	bf1c      	itt	ne
 8005db0:	1a1b      	subne	r3, r3, r0
 8005db2:	50a3      	strne	r3, [r4, r2]
 8005db4:	e7af      	b.n	8005d16 <_malloc_r+0x22>
 8005db6:	6862      	ldr	r2, [r4, #4]
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	bf0c      	ite	eq
 8005dbc:	f8c8 2000 	streq.w	r2, [r8]
 8005dc0:	605a      	strne	r2, [r3, #4]
 8005dc2:	e7eb      	b.n	8005d9c <_malloc_r+0xa8>
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	6864      	ldr	r4, [r4, #4]
 8005dc8:	e7ae      	b.n	8005d28 <_malloc_r+0x34>
 8005dca:	463c      	mov	r4, r7
 8005dcc:	687f      	ldr	r7, [r7, #4]
 8005dce:	e7b6      	b.n	8005d3e <_malloc_r+0x4a>
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	42a3      	cmp	r3, r4
 8005dd6:	d1fb      	bne.n	8005dd0 <_malloc_r+0xdc>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	6053      	str	r3, [r2, #4]
 8005ddc:	e7de      	b.n	8005d9c <_malloc_r+0xa8>
 8005dde:	230c      	movs	r3, #12
 8005de0:	6033      	str	r3, [r6, #0]
 8005de2:	4630      	mov	r0, r6
 8005de4:	f000 f80c 	bl	8005e00 <__malloc_unlock>
 8005de8:	e794      	b.n	8005d14 <_malloc_r+0x20>
 8005dea:	6005      	str	r5, [r0, #0]
 8005dec:	e7d6      	b.n	8005d9c <_malloc_r+0xa8>
 8005dee:	bf00      	nop
 8005df0:	200014dc 	.word	0x200014dc

08005df4 <__malloc_lock>:
 8005df4:	4801      	ldr	r0, [pc, #4]	@ (8005dfc <__malloc_lock+0x8>)
 8005df6:	f7ff bf00 	b.w	8005bfa <__retarget_lock_acquire_recursive>
 8005dfa:	bf00      	nop
 8005dfc:	200014d4 	.word	0x200014d4

08005e00 <__malloc_unlock>:
 8005e00:	4801      	ldr	r0, [pc, #4]	@ (8005e08 <__malloc_unlock+0x8>)
 8005e02:	f7ff befb 	b.w	8005bfc <__retarget_lock_release_recursive>
 8005e06:	bf00      	nop
 8005e08:	200014d4 	.word	0x200014d4

08005e0c <__ssputs_r>:
 8005e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e10:	688e      	ldr	r6, [r1, #8]
 8005e12:	461f      	mov	r7, r3
 8005e14:	42be      	cmp	r6, r7
 8005e16:	680b      	ldr	r3, [r1, #0]
 8005e18:	4682      	mov	sl, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	4690      	mov	r8, r2
 8005e1e:	d82d      	bhi.n	8005e7c <__ssputs_r+0x70>
 8005e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e28:	d026      	beq.n	8005e78 <__ssputs_r+0x6c>
 8005e2a:	6965      	ldr	r5, [r4, #20]
 8005e2c:	6909      	ldr	r1, [r1, #16]
 8005e2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e32:	eba3 0901 	sub.w	r9, r3, r1
 8005e36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e3a:	1c7b      	adds	r3, r7, #1
 8005e3c:	444b      	add	r3, r9
 8005e3e:	106d      	asrs	r5, r5, #1
 8005e40:	429d      	cmp	r5, r3
 8005e42:	bf38      	it	cc
 8005e44:	461d      	movcc	r5, r3
 8005e46:	0553      	lsls	r3, r2, #21
 8005e48:	d527      	bpl.n	8005e9a <__ssputs_r+0x8e>
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	f7ff ff52 	bl	8005cf4 <_malloc_r>
 8005e50:	4606      	mov	r6, r0
 8005e52:	b360      	cbz	r0, 8005eae <__ssputs_r+0xa2>
 8005e54:	6921      	ldr	r1, [r4, #16]
 8005e56:	464a      	mov	r2, r9
 8005e58:	f7ff fed1 	bl	8005bfe <memcpy>
 8005e5c:	89a3      	ldrh	r3, [r4, #12]
 8005e5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e66:	81a3      	strh	r3, [r4, #12]
 8005e68:	6126      	str	r6, [r4, #16]
 8005e6a:	6165      	str	r5, [r4, #20]
 8005e6c:	444e      	add	r6, r9
 8005e6e:	eba5 0509 	sub.w	r5, r5, r9
 8005e72:	6026      	str	r6, [r4, #0]
 8005e74:	60a5      	str	r5, [r4, #8]
 8005e76:	463e      	mov	r6, r7
 8005e78:	42be      	cmp	r6, r7
 8005e7a:	d900      	bls.n	8005e7e <__ssputs_r+0x72>
 8005e7c:	463e      	mov	r6, r7
 8005e7e:	6820      	ldr	r0, [r4, #0]
 8005e80:	4632      	mov	r2, r6
 8005e82:	4641      	mov	r1, r8
 8005e84:	f000 fcf6 	bl	8006874 <memmove>
 8005e88:	68a3      	ldr	r3, [r4, #8]
 8005e8a:	1b9b      	subs	r3, r3, r6
 8005e8c:	60a3      	str	r3, [r4, #8]
 8005e8e:	6823      	ldr	r3, [r4, #0]
 8005e90:	4433      	add	r3, r6
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	2000      	movs	r0, #0
 8005e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e9a:	462a      	mov	r2, r5
 8005e9c:	f000 fd36 	bl	800690c <_realloc_r>
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d1e0      	bne.n	8005e68 <__ssputs_r+0x5c>
 8005ea6:	6921      	ldr	r1, [r4, #16]
 8005ea8:	4650      	mov	r0, sl
 8005eaa:	f7ff feb7 	bl	8005c1c <_free_r>
 8005eae:	230c      	movs	r3, #12
 8005eb0:	f8ca 3000 	str.w	r3, [sl]
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	e7e9      	b.n	8005e96 <__ssputs_r+0x8a>
	...

08005ec4 <_svfiprintf_r>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	4698      	mov	r8, r3
 8005eca:	898b      	ldrh	r3, [r1, #12]
 8005ecc:	061b      	lsls	r3, r3, #24
 8005ece:	b09d      	sub	sp, #116	@ 0x74
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	460d      	mov	r5, r1
 8005ed4:	4614      	mov	r4, r2
 8005ed6:	d510      	bpl.n	8005efa <_svfiprintf_r+0x36>
 8005ed8:	690b      	ldr	r3, [r1, #16]
 8005eda:	b973      	cbnz	r3, 8005efa <_svfiprintf_r+0x36>
 8005edc:	2140      	movs	r1, #64	@ 0x40
 8005ede:	f7ff ff09 	bl	8005cf4 <_malloc_r>
 8005ee2:	6028      	str	r0, [r5, #0]
 8005ee4:	6128      	str	r0, [r5, #16]
 8005ee6:	b930      	cbnz	r0, 8005ef6 <_svfiprintf_r+0x32>
 8005ee8:	230c      	movs	r3, #12
 8005eea:	603b      	str	r3, [r7, #0]
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	b01d      	add	sp, #116	@ 0x74
 8005ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef6:	2340      	movs	r3, #64	@ 0x40
 8005ef8:	616b      	str	r3, [r5, #20]
 8005efa:	2300      	movs	r3, #0
 8005efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005efe:	2320      	movs	r3, #32
 8005f00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f04:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f08:	2330      	movs	r3, #48	@ 0x30
 8005f0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80060a8 <_svfiprintf_r+0x1e4>
 8005f0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f12:	f04f 0901 	mov.w	r9, #1
 8005f16:	4623      	mov	r3, r4
 8005f18:	469a      	mov	sl, r3
 8005f1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f1e:	b10a      	cbz	r2, 8005f24 <_svfiprintf_r+0x60>
 8005f20:	2a25      	cmp	r2, #37	@ 0x25
 8005f22:	d1f9      	bne.n	8005f18 <_svfiprintf_r+0x54>
 8005f24:	ebba 0b04 	subs.w	fp, sl, r4
 8005f28:	d00b      	beq.n	8005f42 <_svfiprintf_r+0x7e>
 8005f2a:	465b      	mov	r3, fp
 8005f2c:	4622      	mov	r2, r4
 8005f2e:	4629      	mov	r1, r5
 8005f30:	4638      	mov	r0, r7
 8005f32:	f7ff ff6b 	bl	8005e0c <__ssputs_r>
 8005f36:	3001      	adds	r0, #1
 8005f38:	f000 80a7 	beq.w	800608a <_svfiprintf_r+0x1c6>
 8005f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f3e:	445a      	add	r2, fp
 8005f40:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f42:	f89a 3000 	ldrb.w	r3, [sl]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 809f 	beq.w	800608a <_svfiprintf_r+0x1c6>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f56:	f10a 0a01 	add.w	sl, sl, #1
 8005f5a:	9304      	str	r3, [sp, #16]
 8005f5c:	9307      	str	r3, [sp, #28]
 8005f5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f62:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f64:	4654      	mov	r4, sl
 8005f66:	2205      	movs	r2, #5
 8005f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f6c:	484e      	ldr	r0, [pc, #312]	@ (80060a8 <_svfiprintf_r+0x1e4>)
 8005f6e:	f7fa f957 	bl	8000220 <memchr>
 8005f72:	9a04      	ldr	r2, [sp, #16]
 8005f74:	b9d8      	cbnz	r0, 8005fae <_svfiprintf_r+0xea>
 8005f76:	06d0      	lsls	r0, r2, #27
 8005f78:	bf44      	itt	mi
 8005f7a:	2320      	movmi	r3, #32
 8005f7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f80:	0711      	lsls	r1, r2, #28
 8005f82:	bf44      	itt	mi
 8005f84:	232b      	movmi	r3, #43	@ 0x2b
 8005f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f90:	d015      	beq.n	8005fbe <_svfiprintf_r+0xfa>
 8005f92:	9a07      	ldr	r2, [sp, #28]
 8005f94:	4654      	mov	r4, sl
 8005f96:	2000      	movs	r0, #0
 8005f98:	f04f 0c0a 	mov.w	ip, #10
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fa2:	3b30      	subs	r3, #48	@ 0x30
 8005fa4:	2b09      	cmp	r3, #9
 8005fa6:	d94b      	bls.n	8006040 <_svfiprintf_r+0x17c>
 8005fa8:	b1b0      	cbz	r0, 8005fd8 <_svfiprintf_r+0x114>
 8005faa:	9207      	str	r2, [sp, #28]
 8005fac:	e014      	b.n	8005fd8 <_svfiprintf_r+0x114>
 8005fae:	eba0 0308 	sub.w	r3, r0, r8
 8005fb2:	fa09 f303 	lsl.w	r3, r9, r3
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	9304      	str	r3, [sp, #16]
 8005fba:	46a2      	mov	sl, r4
 8005fbc:	e7d2      	b.n	8005f64 <_svfiprintf_r+0xa0>
 8005fbe:	9b03      	ldr	r3, [sp, #12]
 8005fc0:	1d19      	adds	r1, r3, #4
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	9103      	str	r1, [sp, #12]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfbb      	ittet	lt
 8005fca:	425b      	neglt	r3, r3
 8005fcc:	f042 0202 	orrlt.w	r2, r2, #2
 8005fd0:	9307      	strge	r3, [sp, #28]
 8005fd2:	9307      	strlt	r3, [sp, #28]
 8005fd4:	bfb8      	it	lt
 8005fd6:	9204      	strlt	r2, [sp, #16]
 8005fd8:	7823      	ldrb	r3, [r4, #0]
 8005fda:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fdc:	d10a      	bne.n	8005ff4 <_svfiprintf_r+0x130>
 8005fde:	7863      	ldrb	r3, [r4, #1]
 8005fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fe2:	d132      	bne.n	800604a <_svfiprintf_r+0x186>
 8005fe4:	9b03      	ldr	r3, [sp, #12]
 8005fe6:	1d1a      	adds	r2, r3, #4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	9203      	str	r2, [sp, #12]
 8005fec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ff0:	3402      	adds	r4, #2
 8005ff2:	9305      	str	r3, [sp, #20]
 8005ff4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80060b8 <_svfiprintf_r+0x1f4>
 8005ff8:	7821      	ldrb	r1, [r4, #0]
 8005ffa:	2203      	movs	r2, #3
 8005ffc:	4650      	mov	r0, sl
 8005ffe:	f7fa f90f 	bl	8000220 <memchr>
 8006002:	b138      	cbz	r0, 8006014 <_svfiprintf_r+0x150>
 8006004:	9b04      	ldr	r3, [sp, #16]
 8006006:	eba0 000a 	sub.w	r0, r0, sl
 800600a:	2240      	movs	r2, #64	@ 0x40
 800600c:	4082      	lsls	r2, r0
 800600e:	4313      	orrs	r3, r2
 8006010:	3401      	adds	r4, #1
 8006012:	9304      	str	r3, [sp, #16]
 8006014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006018:	4824      	ldr	r0, [pc, #144]	@ (80060ac <_svfiprintf_r+0x1e8>)
 800601a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800601e:	2206      	movs	r2, #6
 8006020:	f7fa f8fe 	bl	8000220 <memchr>
 8006024:	2800      	cmp	r0, #0
 8006026:	d036      	beq.n	8006096 <_svfiprintf_r+0x1d2>
 8006028:	4b21      	ldr	r3, [pc, #132]	@ (80060b0 <_svfiprintf_r+0x1ec>)
 800602a:	bb1b      	cbnz	r3, 8006074 <_svfiprintf_r+0x1b0>
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	3307      	adds	r3, #7
 8006030:	f023 0307 	bic.w	r3, r3, #7
 8006034:	3308      	adds	r3, #8
 8006036:	9303      	str	r3, [sp, #12]
 8006038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800603a:	4433      	add	r3, r6
 800603c:	9309      	str	r3, [sp, #36]	@ 0x24
 800603e:	e76a      	b.n	8005f16 <_svfiprintf_r+0x52>
 8006040:	fb0c 3202 	mla	r2, ip, r2, r3
 8006044:	460c      	mov	r4, r1
 8006046:	2001      	movs	r0, #1
 8006048:	e7a8      	b.n	8005f9c <_svfiprintf_r+0xd8>
 800604a:	2300      	movs	r3, #0
 800604c:	3401      	adds	r4, #1
 800604e:	9305      	str	r3, [sp, #20]
 8006050:	4619      	mov	r1, r3
 8006052:	f04f 0c0a 	mov.w	ip, #10
 8006056:	4620      	mov	r0, r4
 8006058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800605c:	3a30      	subs	r2, #48	@ 0x30
 800605e:	2a09      	cmp	r2, #9
 8006060:	d903      	bls.n	800606a <_svfiprintf_r+0x1a6>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0c6      	beq.n	8005ff4 <_svfiprintf_r+0x130>
 8006066:	9105      	str	r1, [sp, #20]
 8006068:	e7c4      	b.n	8005ff4 <_svfiprintf_r+0x130>
 800606a:	fb0c 2101 	mla	r1, ip, r1, r2
 800606e:	4604      	mov	r4, r0
 8006070:	2301      	movs	r3, #1
 8006072:	e7f0      	b.n	8006056 <_svfiprintf_r+0x192>
 8006074:	ab03      	add	r3, sp, #12
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	462a      	mov	r2, r5
 800607a:	4b0e      	ldr	r3, [pc, #56]	@ (80060b4 <_svfiprintf_r+0x1f0>)
 800607c:	a904      	add	r1, sp, #16
 800607e:	4638      	mov	r0, r7
 8006080:	f3af 8000 	nop.w
 8006084:	1c42      	adds	r2, r0, #1
 8006086:	4606      	mov	r6, r0
 8006088:	d1d6      	bne.n	8006038 <_svfiprintf_r+0x174>
 800608a:	89ab      	ldrh	r3, [r5, #12]
 800608c:	065b      	lsls	r3, r3, #25
 800608e:	f53f af2d 	bmi.w	8005eec <_svfiprintf_r+0x28>
 8006092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006094:	e72c      	b.n	8005ef0 <_svfiprintf_r+0x2c>
 8006096:	ab03      	add	r3, sp, #12
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	462a      	mov	r2, r5
 800609c:	4b05      	ldr	r3, [pc, #20]	@ (80060b4 <_svfiprintf_r+0x1f0>)
 800609e:	a904      	add	r1, sp, #16
 80060a0:	4638      	mov	r0, r7
 80060a2:	f000 f9bb 	bl	800641c <_printf_i>
 80060a6:	e7ed      	b.n	8006084 <_svfiprintf_r+0x1c0>
 80060a8:	08006a64 	.word	0x08006a64
 80060ac:	08006a6e 	.word	0x08006a6e
 80060b0:	00000000 	.word	0x00000000
 80060b4:	08005e0d 	.word	0x08005e0d
 80060b8:	08006a6a 	.word	0x08006a6a

080060bc <__sfputc_r>:
 80060bc:	6893      	ldr	r3, [r2, #8]
 80060be:	3b01      	subs	r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	b410      	push	{r4}
 80060c4:	6093      	str	r3, [r2, #8]
 80060c6:	da08      	bge.n	80060da <__sfputc_r+0x1e>
 80060c8:	6994      	ldr	r4, [r2, #24]
 80060ca:	42a3      	cmp	r3, r4
 80060cc:	db01      	blt.n	80060d2 <__sfputc_r+0x16>
 80060ce:	290a      	cmp	r1, #10
 80060d0:	d103      	bne.n	80060da <__sfputc_r+0x1e>
 80060d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060d6:	f7ff bc82 	b.w	80059de <__swbuf_r>
 80060da:	6813      	ldr	r3, [r2, #0]
 80060dc:	1c58      	adds	r0, r3, #1
 80060de:	6010      	str	r0, [r2, #0]
 80060e0:	7019      	strb	r1, [r3, #0]
 80060e2:	4608      	mov	r0, r1
 80060e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <__sfputs_r>:
 80060ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ec:	4606      	mov	r6, r0
 80060ee:	460f      	mov	r7, r1
 80060f0:	4614      	mov	r4, r2
 80060f2:	18d5      	adds	r5, r2, r3
 80060f4:	42ac      	cmp	r4, r5
 80060f6:	d101      	bne.n	80060fc <__sfputs_r+0x12>
 80060f8:	2000      	movs	r0, #0
 80060fa:	e007      	b.n	800610c <__sfputs_r+0x22>
 80060fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006100:	463a      	mov	r2, r7
 8006102:	4630      	mov	r0, r6
 8006104:	f7ff ffda 	bl	80060bc <__sfputc_r>
 8006108:	1c43      	adds	r3, r0, #1
 800610a:	d1f3      	bne.n	80060f4 <__sfputs_r+0xa>
 800610c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006110 <_vfiprintf_r>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	460d      	mov	r5, r1
 8006116:	b09d      	sub	sp, #116	@ 0x74
 8006118:	4614      	mov	r4, r2
 800611a:	4698      	mov	r8, r3
 800611c:	4606      	mov	r6, r0
 800611e:	b118      	cbz	r0, 8006128 <_vfiprintf_r+0x18>
 8006120:	6a03      	ldr	r3, [r0, #32]
 8006122:	b90b      	cbnz	r3, 8006128 <_vfiprintf_r+0x18>
 8006124:	f7ff fb1a 	bl	800575c <__sinit>
 8006128:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800612a:	07d9      	lsls	r1, r3, #31
 800612c:	d405      	bmi.n	800613a <_vfiprintf_r+0x2a>
 800612e:	89ab      	ldrh	r3, [r5, #12]
 8006130:	059a      	lsls	r2, r3, #22
 8006132:	d402      	bmi.n	800613a <_vfiprintf_r+0x2a>
 8006134:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006136:	f7ff fd60 	bl	8005bfa <__retarget_lock_acquire_recursive>
 800613a:	89ab      	ldrh	r3, [r5, #12]
 800613c:	071b      	lsls	r3, r3, #28
 800613e:	d501      	bpl.n	8006144 <_vfiprintf_r+0x34>
 8006140:	692b      	ldr	r3, [r5, #16]
 8006142:	b99b      	cbnz	r3, 800616c <_vfiprintf_r+0x5c>
 8006144:	4629      	mov	r1, r5
 8006146:	4630      	mov	r0, r6
 8006148:	f7ff fc88 	bl	8005a5c <__swsetup_r>
 800614c:	b170      	cbz	r0, 800616c <_vfiprintf_r+0x5c>
 800614e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006150:	07dc      	lsls	r4, r3, #31
 8006152:	d504      	bpl.n	800615e <_vfiprintf_r+0x4e>
 8006154:	f04f 30ff 	mov.w	r0, #4294967295
 8006158:	b01d      	add	sp, #116	@ 0x74
 800615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800615e:	89ab      	ldrh	r3, [r5, #12]
 8006160:	0598      	lsls	r0, r3, #22
 8006162:	d4f7      	bmi.n	8006154 <_vfiprintf_r+0x44>
 8006164:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006166:	f7ff fd49 	bl	8005bfc <__retarget_lock_release_recursive>
 800616a:	e7f3      	b.n	8006154 <_vfiprintf_r+0x44>
 800616c:	2300      	movs	r3, #0
 800616e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006170:	2320      	movs	r3, #32
 8006172:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006176:	f8cd 800c 	str.w	r8, [sp, #12]
 800617a:	2330      	movs	r3, #48	@ 0x30
 800617c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800632c <_vfiprintf_r+0x21c>
 8006180:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006184:	f04f 0901 	mov.w	r9, #1
 8006188:	4623      	mov	r3, r4
 800618a:	469a      	mov	sl, r3
 800618c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006190:	b10a      	cbz	r2, 8006196 <_vfiprintf_r+0x86>
 8006192:	2a25      	cmp	r2, #37	@ 0x25
 8006194:	d1f9      	bne.n	800618a <_vfiprintf_r+0x7a>
 8006196:	ebba 0b04 	subs.w	fp, sl, r4
 800619a:	d00b      	beq.n	80061b4 <_vfiprintf_r+0xa4>
 800619c:	465b      	mov	r3, fp
 800619e:	4622      	mov	r2, r4
 80061a0:	4629      	mov	r1, r5
 80061a2:	4630      	mov	r0, r6
 80061a4:	f7ff ffa1 	bl	80060ea <__sfputs_r>
 80061a8:	3001      	adds	r0, #1
 80061aa:	f000 80a7 	beq.w	80062fc <_vfiprintf_r+0x1ec>
 80061ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80061b0:	445a      	add	r2, fp
 80061b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80061b4:	f89a 3000 	ldrb.w	r3, [sl]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 809f 	beq.w	80062fc <_vfiprintf_r+0x1ec>
 80061be:	2300      	movs	r3, #0
 80061c0:	f04f 32ff 	mov.w	r2, #4294967295
 80061c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061c8:	f10a 0a01 	add.w	sl, sl, #1
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	9307      	str	r3, [sp, #28]
 80061d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80061d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80061d6:	4654      	mov	r4, sl
 80061d8:	2205      	movs	r2, #5
 80061da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061de:	4853      	ldr	r0, [pc, #332]	@ (800632c <_vfiprintf_r+0x21c>)
 80061e0:	f7fa f81e 	bl	8000220 <memchr>
 80061e4:	9a04      	ldr	r2, [sp, #16]
 80061e6:	b9d8      	cbnz	r0, 8006220 <_vfiprintf_r+0x110>
 80061e8:	06d1      	lsls	r1, r2, #27
 80061ea:	bf44      	itt	mi
 80061ec:	2320      	movmi	r3, #32
 80061ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061f2:	0713      	lsls	r3, r2, #28
 80061f4:	bf44      	itt	mi
 80061f6:	232b      	movmi	r3, #43	@ 0x2b
 80061f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80061fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006200:	2b2a      	cmp	r3, #42	@ 0x2a
 8006202:	d015      	beq.n	8006230 <_vfiprintf_r+0x120>
 8006204:	9a07      	ldr	r2, [sp, #28]
 8006206:	4654      	mov	r4, sl
 8006208:	2000      	movs	r0, #0
 800620a:	f04f 0c0a 	mov.w	ip, #10
 800620e:	4621      	mov	r1, r4
 8006210:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006214:	3b30      	subs	r3, #48	@ 0x30
 8006216:	2b09      	cmp	r3, #9
 8006218:	d94b      	bls.n	80062b2 <_vfiprintf_r+0x1a2>
 800621a:	b1b0      	cbz	r0, 800624a <_vfiprintf_r+0x13a>
 800621c:	9207      	str	r2, [sp, #28]
 800621e:	e014      	b.n	800624a <_vfiprintf_r+0x13a>
 8006220:	eba0 0308 	sub.w	r3, r0, r8
 8006224:	fa09 f303 	lsl.w	r3, r9, r3
 8006228:	4313      	orrs	r3, r2
 800622a:	9304      	str	r3, [sp, #16]
 800622c:	46a2      	mov	sl, r4
 800622e:	e7d2      	b.n	80061d6 <_vfiprintf_r+0xc6>
 8006230:	9b03      	ldr	r3, [sp, #12]
 8006232:	1d19      	adds	r1, r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	9103      	str	r1, [sp, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	bfbb      	ittet	lt
 800623c:	425b      	neglt	r3, r3
 800623e:	f042 0202 	orrlt.w	r2, r2, #2
 8006242:	9307      	strge	r3, [sp, #28]
 8006244:	9307      	strlt	r3, [sp, #28]
 8006246:	bfb8      	it	lt
 8006248:	9204      	strlt	r2, [sp, #16]
 800624a:	7823      	ldrb	r3, [r4, #0]
 800624c:	2b2e      	cmp	r3, #46	@ 0x2e
 800624e:	d10a      	bne.n	8006266 <_vfiprintf_r+0x156>
 8006250:	7863      	ldrb	r3, [r4, #1]
 8006252:	2b2a      	cmp	r3, #42	@ 0x2a
 8006254:	d132      	bne.n	80062bc <_vfiprintf_r+0x1ac>
 8006256:	9b03      	ldr	r3, [sp, #12]
 8006258:	1d1a      	adds	r2, r3, #4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	9203      	str	r2, [sp, #12]
 800625e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006262:	3402      	adds	r4, #2
 8006264:	9305      	str	r3, [sp, #20]
 8006266:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800633c <_vfiprintf_r+0x22c>
 800626a:	7821      	ldrb	r1, [r4, #0]
 800626c:	2203      	movs	r2, #3
 800626e:	4650      	mov	r0, sl
 8006270:	f7f9 ffd6 	bl	8000220 <memchr>
 8006274:	b138      	cbz	r0, 8006286 <_vfiprintf_r+0x176>
 8006276:	9b04      	ldr	r3, [sp, #16]
 8006278:	eba0 000a 	sub.w	r0, r0, sl
 800627c:	2240      	movs	r2, #64	@ 0x40
 800627e:	4082      	lsls	r2, r0
 8006280:	4313      	orrs	r3, r2
 8006282:	3401      	adds	r4, #1
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800628a:	4829      	ldr	r0, [pc, #164]	@ (8006330 <_vfiprintf_r+0x220>)
 800628c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006290:	2206      	movs	r2, #6
 8006292:	f7f9 ffc5 	bl	8000220 <memchr>
 8006296:	2800      	cmp	r0, #0
 8006298:	d03f      	beq.n	800631a <_vfiprintf_r+0x20a>
 800629a:	4b26      	ldr	r3, [pc, #152]	@ (8006334 <_vfiprintf_r+0x224>)
 800629c:	bb1b      	cbnz	r3, 80062e6 <_vfiprintf_r+0x1d6>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	3307      	adds	r3, #7
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	3308      	adds	r3, #8
 80062a8:	9303      	str	r3, [sp, #12]
 80062aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ac:	443b      	add	r3, r7
 80062ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b0:	e76a      	b.n	8006188 <_vfiprintf_r+0x78>
 80062b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80062b6:	460c      	mov	r4, r1
 80062b8:	2001      	movs	r0, #1
 80062ba:	e7a8      	b.n	800620e <_vfiprintf_r+0xfe>
 80062bc:	2300      	movs	r3, #0
 80062be:	3401      	adds	r4, #1
 80062c0:	9305      	str	r3, [sp, #20]
 80062c2:	4619      	mov	r1, r3
 80062c4:	f04f 0c0a 	mov.w	ip, #10
 80062c8:	4620      	mov	r0, r4
 80062ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062ce:	3a30      	subs	r2, #48	@ 0x30
 80062d0:	2a09      	cmp	r2, #9
 80062d2:	d903      	bls.n	80062dc <_vfiprintf_r+0x1cc>
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0c6      	beq.n	8006266 <_vfiprintf_r+0x156>
 80062d8:	9105      	str	r1, [sp, #20]
 80062da:	e7c4      	b.n	8006266 <_vfiprintf_r+0x156>
 80062dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80062e0:	4604      	mov	r4, r0
 80062e2:	2301      	movs	r3, #1
 80062e4:	e7f0      	b.n	80062c8 <_vfiprintf_r+0x1b8>
 80062e6:	ab03      	add	r3, sp, #12
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	462a      	mov	r2, r5
 80062ec:	4b12      	ldr	r3, [pc, #72]	@ (8006338 <_vfiprintf_r+0x228>)
 80062ee:	a904      	add	r1, sp, #16
 80062f0:	4630      	mov	r0, r6
 80062f2:	f3af 8000 	nop.w
 80062f6:	4607      	mov	r7, r0
 80062f8:	1c78      	adds	r0, r7, #1
 80062fa:	d1d6      	bne.n	80062aa <_vfiprintf_r+0x19a>
 80062fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80062fe:	07d9      	lsls	r1, r3, #31
 8006300:	d405      	bmi.n	800630e <_vfiprintf_r+0x1fe>
 8006302:	89ab      	ldrh	r3, [r5, #12]
 8006304:	059a      	lsls	r2, r3, #22
 8006306:	d402      	bmi.n	800630e <_vfiprintf_r+0x1fe>
 8006308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800630a:	f7ff fc77 	bl	8005bfc <__retarget_lock_release_recursive>
 800630e:	89ab      	ldrh	r3, [r5, #12]
 8006310:	065b      	lsls	r3, r3, #25
 8006312:	f53f af1f 	bmi.w	8006154 <_vfiprintf_r+0x44>
 8006316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006318:	e71e      	b.n	8006158 <_vfiprintf_r+0x48>
 800631a:	ab03      	add	r3, sp, #12
 800631c:	9300      	str	r3, [sp, #0]
 800631e:	462a      	mov	r2, r5
 8006320:	4b05      	ldr	r3, [pc, #20]	@ (8006338 <_vfiprintf_r+0x228>)
 8006322:	a904      	add	r1, sp, #16
 8006324:	4630      	mov	r0, r6
 8006326:	f000 f879 	bl	800641c <_printf_i>
 800632a:	e7e4      	b.n	80062f6 <_vfiprintf_r+0x1e6>
 800632c:	08006a64 	.word	0x08006a64
 8006330:	08006a6e 	.word	0x08006a6e
 8006334:	00000000 	.word	0x00000000
 8006338:	080060eb 	.word	0x080060eb
 800633c:	08006a6a 	.word	0x08006a6a

08006340 <_printf_common>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	4616      	mov	r6, r2
 8006346:	4698      	mov	r8, r3
 8006348:	688a      	ldr	r2, [r1, #8]
 800634a:	690b      	ldr	r3, [r1, #16]
 800634c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006350:	4293      	cmp	r3, r2
 8006352:	bfb8      	it	lt
 8006354:	4613      	movlt	r3, r2
 8006356:	6033      	str	r3, [r6, #0]
 8006358:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800635c:	4607      	mov	r7, r0
 800635e:	460c      	mov	r4, r1
 8006360:	b10a      	cbz	r2, 8006366 <_printf_common+0x26>
 8006362:	3301      	adds	r3, #1
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	0699      	lsls	r1, r3, #26
 800636a:	bf42      	ittt	mi
 800636c:	6833      	ldrmi	r3, [r6, #0]
 800636e:	3302      	addmi	r3, #2
 8006370:	6033      	strmi	r3, [r6, #0]
 8006372:	6825      	ldr	r5, [r4, #0]
 8006374:	f015 0506 	ands.w	r5, r5, #6
 8006378:	d106      	bne.n	8006388 <_printf_common+0x48>
 800637a:	f104 0a19 	add.w	sl, r4, #25
 800637e:	68e3      	ldr	r3, [r4, #12]
 8006380:	6832      	ldr	r2, [r6, #0]
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	42ab      	cmp	r3, r5
 8006386:	dc26      	bgt.n	80063d6 <_printf_common+0x96>
 8006388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800638c:	6822      	ldr	r2, [r4, #0]
 800638e:	3b00      	subs	r3, #0
 8006390:	bf18      	it	ne
 8006392:	2301      	movne	r3, #1
 8006394:	0692      	lsls	r2, r2, #26
 8006396:	d42b      	bmi.n	80063f0 <_printf_common+0xb0>
 8006398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800639c:	4641      	mov	r1, r8
 800639e:	4638      	mov	r0, r7
 80063a0:	47c8      	blx	r9
 80063a2:	3001      	adds	r0, #1
 80063a4:	d01e      	beq.n	80063e4 <_printf_common+0xa4>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	6922      	ldr	r2, [r4, #16]
 80063aa:	f003 0306 	and.w	r3, r3, #6
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	bf02      	ittt	eq
 80063b2:	68e5      	ldreq	r5, [r4, #12]
 80063b4:	6833      	ldreq	r3, [r6, #0]
 80063b6:	1aed      	subeq	r5, r5, r3
 80063b8:	68a3      	ldr	r3, [r4, #8]
 80063ba:	bf0c      	ite	eq
 80063bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063c0:	2500      	movne	r5, #0
 80063c2:	4293      	cmp	r3, r2
 80063c4:	bfc4      	itt	gt
 80063c6:	1a9b      	subgt	r3, r3, r2
 80063c8:	18ed      	addgt	r5, r5, r3
 80063ca:	2600      	movs	r6, #0
 80063cc:	341a      	adds	r4, #26
 80063ce:	42b5      	cmp	r5, r6
 80063d0:	d11a      	bne.n	8006408 <_printf_common+0xc8>
 80063d2:	2000      	movs	r0, #0
 80063d4:	e008      	b.n	80063e8 <_printf_common+0xa8>
 80063d6:	2301      	movs	r3, #1
 80063d8:	4652      	mov	r2, sl
 80063da:	4641      	mov	r1, r8
 80063dc:	4638      	mov	r0, r7
 80063de:	47c8      	blx	r9
 80063e0:	3001      	adds	r0, #1
 80063e2:	d103      	bne.n	80063ec <_printf_common+0xac>
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ec:	3501      	adds	r5, #1
 80063ee:	e7c6      	b.n	800637e <_printf_common+0x3e>
 80063f0:	18e1      	adds	r1, r4, r3
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	2030      	movs	r0, #48	@ 0x30
 80063f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063fa:	4422      	add	r2, r4
 80063fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006400:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006404:	3302      	adds	r3, #2
 8006406:	e7c7      	b.n	8006398 <_printf_common+0x58>
 8006408:	2301      	movs	r3, #1
 800640a:	4622      	mov	r2, r4
 800640c:	4641      	mov	r1, r8
 800640e:	4638      	mov	r0, r7
 8006410:	47c8      	blx	r9
 8006412:	3001      	adds	r0, #1
 8006414:	d0e6      	beq.n	80063e4 <_printf_common+0xa4>
 8006416:	3601      	adds	r6, #1
 8006418:	e7d9      	b.n	80063ce <_printf_common+0x8e>
	...

0800641c <_printf_i>:
 800641c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	7e0f      	ldrb	r7, [r1, #24]
 8006422:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006424:	2f78      	cmp	r7, #120	@ 0x78
 8006426:	4691      	mov	r9, r2
 8006428:	4680      	mov	r8, r0
 800642a:	460c      	mov	r4, r1
 800642c:	469a      	mov	sl, r3
 800642e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006432:	d807      	bhi.n	8006444 <_printf_i+0x28>
 8006434:	2f62      	cmp	r7, #98	@ 0x62
 8006436:	d80a      	bhi.n	800644e <_printf_i+0x32>
 8006438:	2f00      	cmp	r7, #0
 800643a:	f000 80d1 	beq.w	80065e0 <_printf_i+0x1c4>
 800643e:	2f58      	cmp	r7, #88	@ 0x58
 8006440:	f000 80b8 	beq.w	80065b4 <_printf_i+0x198>
 8006444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800644c:	e03a      	b.n	80064c4 <_printf_i+0xa8>
 800644e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006452:	2b15      	cmp	r3, #21
 8006454:	d8f6      	bhi.n	8006444 <_printf_i+0x28>
 8006456:	a101      	add	r1, pc, #4	@ (adr r1, 800645c <_printf_i+0x40>)
 8006458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800645c:	080064b5 	.word	0x080064b5
 8006460:	080064c9 	.word	0x080064c9
 8006464:	08006445 	.word	0x08006445
 8006468:	08006445 	.word	0x08006445
 800646c:	08006445 	.word	0x08006445
 8006470:	08006445 	.word	0x08006445
 8006474:	080064c9 	.word	0x080064c9
 8006478:	08006445 	.word	0x08006445
 800647c:	08006445 	.word	0x08006445
 8006480:	08006445 	.word	0x08006445
 8006484:	08006445 	.word	0x08006445
 8006488:	080065c7 	.word	0x080065c7
 800648c:	080064f3 	.word	0x080064f3
 8006490:	08006581 	.word	0x08006581
 8006494:	08006445 	.word	0x08006445
 8006498:	08006445 	.word	0x08006445
 800649c:	080065e9 	.word	0x080065e9
 80064a0:	08006445 	.word	0x08006445
 80064a4:	080064f3 	.word	0x080064f3
 80064a8:	08006445 	.word	0x08006445
 80064ac:	08006445 	.word	0x08006445
 80064b0:	08006589 	.word	0x08006589
 80064b4:	6833      	ldr	r3, [r6, #0]
 80064b6:	1d1a      	adds	r2, r3, #4
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6032      	str	r2, [r6, #0]
 80064bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064c4:	2301      	movs	r3, #1
 80064c6:	e09c      	b.n	8006602 <_printf_i+0x1e6>
 80064c8:	6833      	ldr	r3, [r6, #0]
 80064ca:	6820      	ldr	r0, [r4, #0]
 80064cc:	1d19      	adds	r1, r3, #4
 80064ce:	6031      	str	r1, [r6, #0]
 80064d0:	0606      	lsls	r6, r0, #24
 80064d2:	d501      	bpl.n	80064d8 <_printf_i+0xbc>
 80064d4:	681d      	ldr	r5, [r3, #0]
 80064d6:	e003      	b.n	80064e0 <_printf_i+0xc4>
 80064d8:	0645      	lsls	r5, r0, #25
 80064da:	d5fb      	bpl.n	80064d4 <_printf_i+0xb8>
 80064dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064e0:	2d00      	cmp	r5, #0
 80064e2:	da03      	bge.n	80064ec <_printf_i+0xd0>
 80064e4:	232d      	movs	r3, #45	@ 0x2d
 80064e6:	426d      	negs	r5, r5
 80064e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ec:	4858      	ldr	r0, [pc, #352]	@ (8006650 <_printf_i+0x234>)
 80064ee:	230a      	movs	r3, #10
 80064f0:	e011      	b.n	8006516 <_printf_i+0xfa>
 80064f2:	6821      	ldr	r1, [r4, #0]
 80064f4:	6833      	ldr	r3, [r6, #0]
 80064f6:	0608      	lsls	r0, r1, #24
 80064f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80064fc:	d402      	bmi.n	8006504 <_printf_i+0xe8>
 80064fe:	0649      	lsls	r1, r1, #25
 8006500:	bf48      	it	mi
 8006502:	b2ad      	uxthmi	r5, r5
 8006504:	2f6f      	cmp	r7, #111	@ 0x6f
 8006506:	4852      	ldr	r0, [pc, #328]	@ (8006650 <_printf_i+0x234>)
 8006508:	6033      	str	r3, [r6, #0]
 800650a:	bf14      	ite	ne
 800650c:	230a      	movne	r3, #10
 800650e:	2308      	moveq	r3, #8
 8006510:	2100      	movs	r1, #0
 8006512:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006516:	6866      	ldr	r6, [r4, #4]
 8006518:	60a6      	str	r6, [r4, #8]
 800651a:	2e00      	cmp	r6, #0
 800651c:	db05      	blt.n	800652a <_printf_i+0x10e>
 800651e:	6821      	ldr	r1, [r4, #0]
 8006520:	432e      	orrs	r6, r5
 8006522:	f021 0104 	bic.w	r1, r1, #4
 8006526:	6021      	str	r1, [r4, #0]
 8006528:	d04b      	beq.n	80065c2 <_printf_i+0x1a6>
 800652a:	4616      	mov	r6, r2
 800652c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006530:	fb03 5711 	mls	r7, r3, r1, r5
 8006534:	5dc7      	ldrb	r7, [r0, r7]
 8006536:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800653a:	462f      	mov	r7, r5
 800653c:	42bb      	cmp	r3, r7
 800653e:	460d      	mov	r5, r1
 8006540:	d9f4      	bls.n	800652c <_printf_i+0x110>
 8006542:	2b08      	cmp	r3, #8
 8006544:	d10b      	bne.n	800655e <_printf_i+0x142>
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	07df      	lsls	r7, r3, #31
 800654a:	d508      	bpl.n	800655e <_printf_i+0x142>
 800654c:	6923      	ldr	r3, [r4, #16]
 800654e:	6861      	ldr	r1, [r4, #4]
 8006550:	4299      	cmp	r1, r3
 8006552:	bfde      	ittt	le
 8006554:	2330      	movle	r3, #48	@ 0x30
 8006556:	f806 3c01 	strble.w	r3, [r6, #-1]
 800655a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800655e:	1b92      	subs	r2, r2, r6
 8006560:	6122      	str	r2, [r4, #16]
 8006562:	f8cd a000 	str.w	sl, [sp]
 8006566:	464b      	mov	r3, r9
 8006568:	aa03      	add	r2, sp, #12
 800656a:	4621      	mov	r1, r4
 800656c:	4640      	mov	r0, r8
 800656e:	f7ff fee7 	bl	8006340 <_printf_common>
 8006572:	3001      	adds	r0, #1
 8006574:	d14a      	bne.n	800660c <_printf_i+0x1f0>
 8006576:	f04f 30ff 	mov.w	r0, #4294967295
 800657a:	b004      	add	sp, #16
 800657c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	f043 0320 	orr.w	r3, r3, #32
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	4832      	ldr	r0, [pc, #200]	@ (8006654 <_printf_i+0x238>)
 800658a:	2778      	movs	r7, #120	@ 0x78
 800658c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	6831      	ldr	r1, [r6, #0]
 8006594:	061f      	lsls	r7, r3, #24
 8006596:	f851 5b04 	ldr.w	r5, [r1], #4
 800659a:	d402      	bmi.n	80065a2 <_printf_i+0x186>
 800659c:	065f      	lsls	r7, r3, #25
 800659e:	bf48      	it	mi
 80065a0:	b2ad      	uxthmi	r5, r5
 80065a2:	6031      	str	r1, [r6, #0]
 80065a4:	07d9      	lsls	r1, r3, #31
 80065a6:	bf44      	itt	mi
 80065a8:	f043 0320 	orrmi.w	r3, r3, #32
 80065ac:	6023      	strmi	r3, [r4, #0]
 80065ae:	b11d      	cbz	r5, 80065b8 <_printf_i+0x19c>
 80065b0:	2310      	movs	r3, #16
 80065b2:	e7ad      	b.n	8006510 <_printf_i+0xf4>
 80065b4:	4826      	ldr	r0, [pc, #152]	@ (8006650 <_printf_i+0x234>)
 80065b6:	e7e9      	b.n	800658c <_printf_i+0x170>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	f023 0320 	bic.w	r3, r3, #32
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	e7f6      	b.n	80065b0 <_printf_i+0x194>
 80065c2:	4616      	mov	r6, r2
 80065c4:	e7bd      	b.n	8006542 <_printf_i+0x126>
 80065c6:	6833      	ldr	r3, [r6, #0]
 80065c8:	6825      	ldr	r5, [r4, #0]
 80065ca:	6961      	ldr	r1, [r4, #20]
 80065cc:	1d18      	adds	r0, r3, #4
 80065ce:	6030      	str	r0, [r6, #0]
 80065d0:	062e      	lsls	r6, r5, #24
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	d501      	bpl.n	80065da <_printf_i+0x1be>
 80065d6:	6019      	str	r1, [r3, #0]
 80065d8:	e002      	b.n	80065e0 <_printf_i+0x1c4>
 80065da:	0668      	lsls	r0, r5, #25
 80065dc:	d5fb      	bpl.n	80065d6 <_printf_i+0x1ba>
 80065de:	8019      	strh	r1, [r3, #0]
 80065e0:	2300      	movs	r3, #0
 80065e2:	6123      	str	r3, [r4, #16]
 80065e4:	4616      	mov	r6, r2
 80065e6:	e7bc      	b.n	8006562 <_printf_i+0x146>
 80065e8:	6833      	ldr	r3, [r6, #0]
 80065ea:	1d1a      	adds	r2, r3, #4
 80065ec:	6032      	str	r2, [r6, #0]
 80065ee:	681e      	ldr	r6, [r3, #0]
 80065f0:	6862      	ldr	r2, [r4, #4]
 80065f2:	2100      	movs	r1, #0
 80065f4:	4630      	mov	r0, r6
 80065f6:	f7f9 fe13 	bl	8000220 <memchr>
 80065fa:	b108      	cbz	r0, 8006600 <_printf_i+0x1e4>
 80065fc:	1b80      	subs	r0, r0, r6
 80065fe:	6060      	str	r0, [r4, #4]
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	6123      	str	r3, [r4, #16]
 8006604:	2300      	movs	r3, #0
 8006606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800660a:	e7aa      	b.n	8006562 <_printf_i+0x146>
 800660c:	6923      	ldr	r3, [r4, #16]
 800660e:	4632      	mov	r2, r6
 8006610:	4649      	mov	r1, r9
 8006612:	4640      	mov	r0, r8
 8006614:	47d0      	blx	sl
 8006616:	3001      	adds	r0, #1
 8006618:	d0ad      	beq.n	8006576 <_printf_i+0x15a>
 800661a:	6823      	ldr	r3, [r4, #0]
 800661c:	079b      	lsls	r3, r3, #30
 800661e:	d413      	bmi.n	8006648 <_printf_i+0x22c>
 8006620:	68e0      	ldr	r0, [r4, #12]
 8006622:	9b03      	ldr	r3, [sp, #12]
 8006624:	4298      	cmp	r0, r3
 8006626:	bfb8      	it	lt
 8006628:	4618      	movlt	r0, r3
 800662a:	e7a6      	b.n	800657a <_printf_i+0x15e>
 800662c:	2301      	movs	r3, #1
 800662e:	4632      	mov	r2, r6
 8006630:	4649      	mov	r1, r9
 8006632:	4640      	mov	r0, r8
 8006634:	47d0      	blx	sl
 8006636:	3001      	adds	r0, #1
 8006638:	d09d      	beq.n	8006576 <_printf_i+0x15a>
 800663a:	3501      	adds	r5, #1
 800663c:	68e3      	ldr	r3, [r4, #12]
 800663e:	9903      	ldr	r1, [sp, #12]
 8006640:	1a5b      	subs	r3, r3, r1
 8006642:	42ab      	cmp	r3, r5
 8006644:	dcf2      	bgt.n	800662c <_printf_i+0x210>
 8006646:	e7eb      	b.n	8006620 <_printf_i+0x204>
 8006648:	2500      	movs	r5, #0
 800664a:	f104 0619 	add.w	r6, r4, #25
 800664e:	e7f5      	b.n	800663c <_printf_i+0x220>
 8006650:	08006a75 	.word	0x08006a75
 8006654:	08006a86 	.word	0x08006a86

08006658 <__sflush_r>:
 8006658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800665c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006660:	0716      	lsls	r6, r2, #28
 8006662:	4605      	mov	r5, r0
 8006664:	460c      	mov	r4, r1
 8006666:	d454      	bmi.n	8006712 <__sflush_r+0xba>
 8006668:	684b      	ldr	r3, [r1, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	dc02      	bgt.n	8006674 <__sflush_r+0x1c>
 800666e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	dd48      	ble.n	8006706 <__sflush_r+0xae>
 8006674:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006676:	2e00      	cmp	r6, #0
 8006678:	d045      	beq.n	8006706 <__sflush_r+0xae>
 800667a:	2300      	movs	r3, #0
 800667c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006680:	682f      	ldr	r7, [r5, #0]
 8006682:	6a21      	ldr	r1, [r4, #32]
 8006684:	602b      	str	r3, [r5, #0]
 8006686:	d030      	beq.n	80066ea <__sflush_r+0x92>
 8006688:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	0759      	lsls	r1, r3, #29
 800668e:	d505      	bpl.n	800669c <__sflush_r+0x44>
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	1ad2      	subs	r2, r2, r3
 8006694:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006696:	b10b      	cbz	r3, 800669c <__sflush_r+0x44>
 8006698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800669a:	1ad2      	subs	r2, r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80066a0:	6a21      	ldr	r1, [r4, #32]
 80066a2:	4628      	mov	r0, r5
 80066a4:	47b0      	blx	r6
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	d106      	bne.n	80066ba <__sflush_r+0x62>
 80066ac:	6829      	ldr	r1, [r5, #0]
 80066ae:	291d      	cmp	r1, #29
 80066b0:	d82b      	bhi.n	800670a <__sflush_r+0xb2>
 80066b2:	4a2a      	ldr	r2, [pc, #168]	@ (800675c <__sflush_r+0x104>)
 80066b4:	40ca      	lsrs	r2, r1
 80066b6:	07d6      	lsls	r6, r2, #31
 80066b8:	d527      	bpl.n	800670a <__sflush_r+0xb2>
 80066ba:	2200      	movs	r2, #0
 80066bc:	6062      	str	r2, [r4, #4]
 80066be:	04d9      	lsls	r1, r3, #19
 80066c0:	6922      	ldr	r2, [r4, #16]
 80066c2:	6022      	str	r2, [r4, #0]
 80066c4:	d504      	bpl.n	80066d0 <__sflush_r+0x78>
 80066c6:	1c42      	adds	r2, r0, #1
 80066c8:	d101      	bne.n	80066ce <__sflush_r+0x76>
 80066ca:	682b      	ldr	r3, [r5, #0]
 80066cc:	b903      	cbnz	r3, 80066d0 <__sflush_r+0x78>
 80066ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80066d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066d2:	602f      	str	r7, [r5, #0]
 80066d4:	b1b9      	cbz	r1, 8006706 <__sflush_r+0xae>
 80066d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066da:	4299      	cmp	r1, r3
 80066dc:	d002      	beq.n	80066e4 <__sflush_r+0x8c>
 80066de:	4628      	mov	r0, r5
 80066e0:	f7ff fa9c 	bl	8005c1c <_free_r>
 80066e4:	2300      	movs	r3, #0
 80066e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80066e8:	e00d      	b.n	8006706 <__sflush_r+0xae>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4628      	mov	r0, r5
 80066ee:	47b0      	blx	r6
 80066f0:	4602      	mov	r2, r0
 80066f2:	1c50      	adds	r0, r2, #1
 80066f4:	d1c9      	bne.n	800668a <__sflush_r+0x32>
 80066f6:	682b      	ldr	r3, [r5, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d0c6      	beq.n	800668a <__sflush_r+0x32>
 80066fc:	2b1d      	cmp	r3, #29
 80066fe:	d001      	beq.n	8006704 <__sflush_r+0xac>
 8006700:	2b16      	cmp	r3, #22
 8006702:	d11e      	bne.n	8006742 <__sflush_r+0xea>
 8006704:	602f      	str	r7, [r5, #0]
 8006706:	2000      	movs	r0, #0
 8006708:	e022      	b.n	8006750 <__sflush_r+0xf8>
 800670a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800670e:	b21b      	sxth	r3, r3
 8006710:	e01b      	b.n	800674a <__sflush_r+0xf2>
 8006712:	690f      	ldr	r7, [r1, #16]
 8006714:	2f00      	cmp	r7, #0
 8006716:	d0f6      	beq.n	8006706 <__sflush_r+0xae>
 8006718:	0793      	lsls	r3, r2, #30
 800671a:	680e      	ldr	r6, [r1, #0]
 800671c:	bf08      	it	eq
 800671e:	694b      	ldreq	r3, [r1, #20]
 8006720:	600f      	str	r7, [r1, #0]
 8006722:	bf18      	it	ne
 8006724:	2300      	movne	r3, #0
 8006726:	eba6 0807 	sub.w	r8, r6, r7
 800672a:	608b      	str	r3, [r1, #8]
 800672c:	f1b8 0f00 	cmp.w	r8, #0
 8006730:	dde9      	ble.n	8006706 <__sflush_r+0xae>
 8006732:	6a21      	ldr	r1, [r4, #32]
 8006734:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006736:	4643      	mov	r3, r8
 8006738:	463a      	mov	r2, r7
 800673a:	4628      	mov	r0, r5
 800673c:	47b0      	blx	r6
 800673e:	2800      	cmp	r0, #0
 8006740:	dc08      	bgt.n	8006754 <__sflush_r+0xfc>
 8006742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006754:	4407      	add	r7, r0
 8006756:	eba8 0800 	sub.w	r8, r8, r0
 800675a:	e7e7      	b.n	800672c <__sflush_r+0xd4>
 800675c:	20400001 	.word	0x20400001

08006760 <_fflush_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	690b      	ldr	r3, [r1, #16]
 8006764:	4605      	mov	r5, r0
 8006766:	460c      	mov	r4, r1
 8006768:	b913      	cbnz	r3, 8006770 <_fflush_r+0x10>
 800676a:	2500      	movs	r5, #0
 800676c:	4628      	mov	r0, r5
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	b118      	cbz	r0, 800677a <_fflush_r+0x1a>
 8006772:	6a03      	ldr	r3, [r0, #32]
 8006774:	b90b      	cbnz	r3, 800677a <_fflush_r+0x1a>
 8006776:	f7fe fff1 	bl	800575c <__sinit>
 800677a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d0f3      	beq.n	800676a <_fflush_r+0xa>
 8006782:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006784:	07d0      	lsls	r0, r2, #31
 8006786:	d404      	bmi.n	8006792 <_fflush_r+0x32>
 8006788:	0599      	lsls	r1, r3, #22
 800678a:	d402      	bmi.n	8006792 <_fflush_r+0x32>
 800678c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800678e:	f7ff fa34 	bl	8005bfa <__retarget_lock_acquire_recursive>
 8006792:	4628      	mov	r0, r5
 8006794:	4621      	mov	r1, r4
 8006796:	f7ff ff5f 	bl	8006658 <__sflush_r>
 800679a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800679c:	07da      	lsls	r2, r3, #31
 800679e:	4605      	mov	r5, r0
 80067a0:	d4e4      	bmi.n	800676c <_fflush_r+0xc>
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	059b      	lsls	r3, r3, #22
 80067a6:	d4e1      	bmi.n	800676c <_fflush_r+0xc>
 80067a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80067aa:	f7ff fa27 	bl	8005bfc <__retarget_lock_release_recursive>
 80067ae:	e7dd      	b.n	800676c <_fflush_r+0xc>

080067b0 <__swhatbuf_r>:
 80067b0:	b570      	push	{r4, r5, r6, lr}
 80067b2:	460c      	mov	r4, r1
 80067b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b8:	2900      	cmp	r1, #0
 80067ba:	b096      	sub	sp, #88	@ 0x58
 80067bc:	4615      	mov	r5, r2
 80067be:	461e      	mov	r6, r3
 80067c0:	da0d      	bge.n	80067de <__swhatbuf_r+0x2e>
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067c8:	f04f 0100 	mov.w	r1, #0
 80067cc:	bf14      	ite	ne
 80067ce:	2340      	movne	r3, #64	@ 0x40
 80067d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067d4:	2000      	movs	r0, #0
 80067d6:	6031      	str	r1, [r6, #0]
 80067d8:	602b      	str	r3, [r5, #0]
 80067da:	b016      	add	sp, #88	@ 0x58
 80067dc:	bd70      	pop	{r4, r5, r6, pc}
 80067de:	466a      	mov	r2, sp
 80067e0:	f000 f862 	bl	80068a8 <_fstat_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	dbec      	blt.n	80067c2 <__swhatbuf_r+0x12>
 80067e8:	9901      	ldr	r1, [sp, #4]
 80067ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067f2:	4259      	negs	r1, r3
 80067f4:	4159      	adcs	r1, r3
 80067f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067fa:	e7eb      	b.n	80067d4 <__swhatbuf_r+0x24>

080067fc <__smakebuf_r>:
 80067fc:	898b      	ldrh	r3, [r1, #12]
 80067fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006800:	079d      	lsls	r5, r3, #30
 8006802:	4606      	mov	r6, r0
 8006804:	460c      	mov	r4, r1
 8006806:	d507      	bpl.n	8006818 <__smakebuf_r+0x1c>
 8006808:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	6123      	str	r3, [r4, #16]
 8006810:	2301      	movs	r3, #1
 8006812:	6163      	str	r3, [r4, #20]
 8006814:	b003      	add	sp, #12
 8006816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006818:	ab01      	add	r3, sp, #4
 800681a:	466a      	mov	r2, sp
 800681c:	f7ff ffc8 	bl	80067b0 <__swhatbuf_r>
 8006820:	9f00      	ldr	r7, [sp, #0]
 8006822:	4605      	mov	r5, r0
 8006824:	4639      	mov	r1, r7
 8006826:	4630      	mov	r0, r6
 8006828:	f7ff fa64 	bl	8005cf4 <_malloc_r>
 800682c:	b948      	cbnz	r0, 8006842 <__smakebuf_r+0x46>
 800682e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006832:	059a      	lsls	r2, r3, #22
 8006834:	d4ee      	bmi.n	8006814 <__smakebuf_r+0x18>
 8006836:	f023 0303 	bic.w	r3, r3, #3
 800683a:	f043 0302 	orr.w	r3, r3, #2
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	e7e2      	b.n	8006808 <__smakebuf_r+0xc>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	6020      	str	r0, [r4, #0]
 8006846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006852:	b15b      	cbz	r3, 800686c <__smakebuf_r+0x70>
 8006854:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006858:	4630      	mov	r0, r6
 800685a:	f000 f837 	bl	80068cc <_isatty_r>
 800685e:	b128      	cbz	r0, 800686c <__smakebuf_r+0x70>
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	431d      	orrs	r5, r3
 8006870:	81a5      	strh	r5, [r4, #12]
 8006872:	e7cf      	b.n	8006814 <__smakebuf_r+0x18>

08006874 <memmove>:
 8006874:	4288      	cmp	r0, r1
 8006876:	b510      	push	{r4, lr}
 8006878:	eb01 0402 	add.w	r4, r1, r2
 800687c:	d902      	bls.n	8006884 <memmove+0x10>
 800687e:	4284      	cmp	r4, r0
 8006880:	4623      	mov	r3, r4
 8006882:	d807      	bhi.n	8006894 <memmove+0x20>
 8006884:	1e43      	subs	r3, r0, #1
 8006886:	42a1      	cmp	r1, r4
 8006888:	d008      	beq.n	800689c <memmove+0x28>
 800688a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800688e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006892:	e7f8      	b.n	8006886 <memmove+0x12>
 8006894:	4402      	add	r2, r0
 8006896:	4601      	mov	r1, r0
 8006898:	428a      	cmp	r2, r1
 800689a:	d100      	bne.n	800689e <memmove+0x2a>
 800689c:	bd10      	pop	{r4, pc}
 800689e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068a6:	e7f7      	b.n	8006898 <memmove+0x24>

080068a8 <_fstat_r>:
 80068a8:	b538      	push	{r3, r4, r5, lr}
 80068aa:	4d07      	ldr	r5, [pc, #28]	@ (80068c8 <_fstat_r+0x20>)
 80068ac:	2300      	movs	r3, #0
 80068ae:	4604      	mov	r4, r0
 80068b0:	4608      	mov	r0, r1
 80068b2:	4611      	mov	r1, r2
 80068b4:	602b      	str	r3, [r5, #0]
 80068b6:	f7fa fb94 	bl	8000fe2 <_fstat>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	d102      	bne.n	80068c4 <_fstat_r+0x1c>
 80068be:	682b      	ldr	r3, [r5, #0]
 80068c0:	b103      	cbz	r3, 80068c4 <_fstat_r+0x1c>
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	bd38      	pop	{r3, r4, r5, pc}
 80068c6:	bf00      	nop
 80068c8:	200014d0 	.word	0x200014d0

080068cc <_isatty_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d06      	ldr	r5, [pc, #24]	@ (80068e8 <_isatty_r+0x1c>)
 80068d0:	2300      	movs	r3, #0
 80068d2:	4604      	mov	r4, r0
 80068d4:	4608      	mov	r0, r1
 80068d6:	602b      	str	r3, [r5, #0]
 80068d8:	f7fa fb93 	bl	8001002 <_isatty>
 80068dc:	1c43      	adds	r3, r0, #1
 80068de:	d102      	bne.n	80068e6 <_isatty_r+0x1a>
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	b103      	cbz	r3, 80068e6 <_isatty_r+0x1a>
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	bd38      	pop	{r3, r4, r5, pc}
 80068e8:	200014d0 	.word	0x200014d0

080068ec <_sbrk_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	4d06      	ldr	r5, [pc, #24]	@ (8006908 <_sbrk_r+0x1c>)
 80068f0:	2300      	movs	r3, #0
 80068f2:	4604      	mov	r4, r0
 80068f4:	4608      	mov	r0, r1
 80068f6:	602b      	str	r3, [r5, #0]
 80068f8:	f7fa fb9c 	bl	8001034 <_sbrk>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_sbrk_r+0x1a>
 8006900:	682b      	ldr	r3, [r5, #0]
 8006902:	b103      	cbz	r3, 8006906 <_sbrk_r+0x1a>
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	200014d0 	.word	0x200014d0

0800690c <_realloc_r>:
 800690c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006910:	4607      	mov	r7, r0
 8006912:	4614      	mov	r4, r2
 8006914:	460d      	mov	r5, r1
 8006916:	b921      	cbnz	r1, 8006922 <_realloc_r+0x16>
 8006918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800691c:	4611      	mov	r1, r2
 800691e:	f7ff b9e9 	b.w	8005cf4 <_malloc_r>
 8006922:	b92a      	cbnz	r2, 8006930 <_realloc_r+0x24>
 8006924:	f7ff f97a 	bl	8005c1c <_free_r>
 8006928:	4625      	mov	r5, r4
 800692a:	4628      	mov	r0, r5
 800692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006930:	f000 f81a 	bl	8006968 <_malloc_usable_size_r>
 8006934:	4284      	cmp	r4, r0
 8006936:	4606      	mov	r6, r0
 8006938:	d802      	bhi.n	8006940 <_realloc_r+0x34>
 800693a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800693e:	d8f4      	bhi.n	800692a <_realloc_r+0x1e>
 8006940:	4621      	mov	r1, r4
 8006942:	4638      	mov	r0, r7
 8006944:	f7ff f9d6 	bl	8005cf4 <_malloc_r>
 8006948:	4680      	mov	r8, r0
 800694a:	b908      	cbnz	r0, 8006950 <_realloc_r+0x44>
 800694c:	4645      	mov	r5, r8
 800694e:	e7ec      	b.n	800692a <_realloc_r+0x1e>
 8006950:	42b4      	cmp	r4, r6
 8006952:	4622      	mov	r2, r4
 8006954:	4629      	mov	r1, r5
 8006956:	bf28      	it	cs
 8006958:	4632      	movcs	r2, r6
 800695a:	f7ff f950 	bl	8005bfe <memcpy>
 800695e:	4629      	mov	r1, r5
 8006960:	4638      	mov	r0, r7
 8006962:	f7ff f95b 	bl	8005c1c <_free_r>
 8006966:	e7f1      	b.n	800694c <_realloc_r+0x40>

08006968 <_malloc_usable_size_r>:
 8006968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800696c:	1f18      	subs	r0, r3, #4
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfbc      	itt	lt
 8006972:	580b      	ldrlt	r3, [r1, r0]
 8006974:	18c0      	addlt	r0, r0, r3
 8006976:	4770      	bx	lr

08006978 <_init>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	bf00      	nop
 800697c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800697e:	bc08      	pop	{r3}
 8006980:	469e      	mov	lr, r3
 8006982:	4770      	bx	lr

08006984 <_fini>:
 8006984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006986:	bf00      	nop
 8006988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800698a:	bc08      	pop	{r3}
 800698c:	469e      	mov	lr, r3
 800698e:	4770      	bx	lr
